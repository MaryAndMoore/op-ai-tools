repo,filename,fullpath,content
ethereum-optimism/community-hub,biz,biz,"
"
ethereum-optimism/community-hub,README.md,biz/README.md,"---
title: How do I get project support (marketing / integrations / etc.)?
lang: en-US
---

Welcome! If you have not filled out the connect with [Optimism form](https://airtable.com/appQ2S9IatldkoNQw/pagyJSUyxJA2SQKO3/form) please do so prior to reading this.

We are excited for your deployment onto OP Mainnet!
You will be welcomed by [the following metrics](https://dune.com/optimismfnd/Optimism) üìàüìà (up and to the right!), [a budding community](https://discord-gateway.optimism.io/) ü´Çü´Ç, and some great exclusive [Telegram Channels](https://t.me/+Cb7q0a1YqItkZTRk) ‚öôÔ∏è‚öôÔ∏è for builders.

## Developer Support üôãüíª

Steps to take if you would like developer support immediately, ranked in order of response times. 

1. See our [Developer Documentation](../developers/), [Tutorials](https://github.com/ethereum-optimism/optimism-tutorial), and [Help Center](https://help.optimism.io)
2. Head over to [**#dev-support**](https://discord.com/channels/667044843901681675/887914409207414785) on discord 


## Marketing Requests ü¶∏ü¶∏

When your project is deployed on the Superchain, you can be added to [our Superchain apps page](https://www.optimism.io/apps). 
Simply [fill out this form](https://share.hsforms.com/1hUEaGvsySTK9ccNBcNmjkwqoshb) to be included. Inclusion is at our discretion. 
To amplify your app launch through Superchain marketing channels [fill out this form](https://share.hsforms.com/1XHQ9Io_lT0-vf9nSVoUahQqoshb)


### Promoting Values before anything else

We love to promote values-aligned projects as part of our broader content program.


### Tweeting

We do the occasional retweet but the bar for these is kept quite high in order to keep our Twitter feed as valuable/high signal as possible. 
Other than RT's, we may like or reply to a tweet or include it in our weekly wrap up thread. 
You're welcome to submit your tweet for amplification but please keep in mind if and how we interact with it is at our sole discretion.


### OPRadio

We also host a weekly Twitter Space in an interview/podcast format called OP Radio. You're welcome to express interest in being featured on OP Radio, but keep in mind that we maintain the final say on whether it makes sense or not.

 
## Governance Grants

Grants are mainly handled by [The Optimism Collective](https://app.optimism.io/announcement), our open governance system/digital society. If you are interested in applying, we first recommend the following: 
 
- Check that your application falls within the possible Governance Grant categories in the [OPerating manual](https://github.com/ethereum-optimism/OPerating-manual/blob/main/manual.md#valid-proposal-types).
- Deploy to OP Mainnet (we are [EVM Equivalent](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306), not just EVM compatible so it is very easy to deploy). 
  Check out our [getting started tutorial](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/getting-started) to see how to deploy. We also have [tons of more in-depth tutorials](https://github.com/ethereum-optimism/optimism-tutorial) for bridging and other L2 specific functionality. 
- Try gaining organic traction:
  - Traction can be gained through our community.
  - Head over to [our discord](https://discord-gateway.optimism.io/) and check out [#showandtell](https://discord.com/channels/667044843901681675/819333988719263774) or [#demoday](https://discord.com/channels/667044843901681675/960493820674465883).
  Demo Day is an AMA about your product to our community. Apply in Discord. 
  - Seek synergies ‚Äì look at other teams already deployed on OP Mainnet that could work with your product and reach out to them.
- Once you have done the above, check out our [governance grant process](https://gov.optimism.io/t/mission-applicant-guide-how-to-submit-a-mission-application/6899).
- To get reviews in real time from governance delegates go to discord and post about your project in [#gov-general](https://discord.com/channels/667044843901681675/968498307913637919).
 

## Other Helpful Links

Curious about our Optimistic Origins? 
Listen to [this OPRadio Episode](https://twitter.com/optimismFND/status/1585015947626426368) with one of our founders, [@JingleJam](https://twitter.com/jinglejamOP).

What do the next 100 years have in store for crypto? [@Karl_dot_tech](https://twitter.com/karl_dot_tech) shares his vision in [this chat with Bankless](https://www.youtube.com/watch?v=60F2wtjZO5M).

Want to see what we are doing with Retroactive Public Goods? [See here](../governance/retropgf-2.md)

Changes to the protocol coming in the near term include multi-client architecture, and the world‚Äôs next generation fault proof. 
Check out [Bedrock](https://dev.optimism.io/introducing-optimism-bedrock/) and [Cannon](https://medium.com/ethereum-optimism/cannon-cannon-cannon-introducing-cannon-4ce0d9245a03). 

Want to see the first ever step forward into a modular rollup architecture? We are making it easy for anyone to deploy their own app-specific rollup via the [OP Stack](https://optimism.mirror.xyz/fLk5UGjZDiXFuvQh6R_HscMQuuY9ABYNF7PI76-qJYs). 
**Fun fact:** A team has already launched [a Voxel Game on the OP Stack](https://dev.optimism.io/opcraft-autonomous-world/)! 

**Last note:** [We‚Äôre hiring](https://jobs.optimism.io/)! 
Join our community! 
Have fun! 
Enjoy life! 
Don‚Äôt worry so much! 
Brush your teeth! 
Eat apples! 
Research the origins of public relations! 
Give back to your community! 
Tweet things you don‚Äôt actually believe! 
Download free music using your library card! 
Don‚Äôt download a car! 
Don‚Äôt listen to anyone except for your parents, and even then, with a grain of salt!

 
## WELCOME TO THE COLLECTIVE üî¥‚ú®
 

"
ethereum-optimism/community-hub,contribute,contribute,"
"
ethereum-optimism/community-hub,README.md,contribute/README.md,"---
title: Contribute to Optimism
lang: en-US
---

::: tip Welcome!

So you want to get involved in the Optimism Collective?? We are so happy to have you! Let‚Äôs make sure we are on the same page about what The Collective is all about.

:::

The Optimism Collective believes that **building public goods should be rewarded.**

This key ingredient to the [Optimistic vision](https://www.optimism.io/vision) is more than just altruism ‚Äì it‚Äôs core to our success. Optimism‚Äôs codebase itself is an open-source project, and builds on the shoulders of countless OSS giants which came before it.

This means public goods funding is a critical growth strategy. For Optimism, well-funded public goods means better developer tooling, widespread user education, safer infrastructure, and industry-leading research. It means Optimism can last and thrive.

Once we show that this model can drive a successful economy for the Optimism Collective, we can scale the principle of **`impact = profit`** to the world!

RetroPGF is a core part of Optimism‚Äôs vision. If done right, it will form the backbone for a new type of economy. As with any complex system, though, this new process can‚Äôt be centrally planned or designed all at once. **The only way to build it *well* is to build it *together*.** This journey will require care, open-mindedness, patience, and, of course, optimism!

So, how can you have meaningful impact in The Collective? We recommend following these 3 very easy principles:

1. ***Do what you love.*** ‚Üí Real impact stems from passion, a love for what you do.
2. ***Fix the problem in front of you, together.*** ‚Üí Chances are if you have a problem, someone else has that problem as well. Let‚Äôs fix it together! What caused the problem? How do you fix it, and can we work together to fix it for everyone else? 
3. ***Do it with optimism.*** ‚Üí Be kind, patient and optimistic in everything you do. 

Most importantly, make sure that your contributions align with the [Collective Intents](https://gov.optimism.io/t/collective-intents/5874). This will help ensure that your contribution is working towards a larger goal of the Collective. 

# Getting Started

You can contribute towards the collective in a million different ways, and there is no way we could make processes for all of these contributions. Nor would we want to! However, getting from 0 to 1 is the hardest step. So we have made a few ways to get you up to speed and contributing in no time! 

If you are looking for what is happening right now, add the [Optimism Public calender](https://calendar.google.com/calendar/embed?src=c_4hui70itm089e7t8q50heh1kno%40group.calendar.google.com) to see upcoming events! We also have a [‚ÄúGet a Grant‚Äù](../governance/get-a-grant.md) page if you already have an idea on how you want to contribute. 

## üåç Accessibility

At Optimism, we know that we can never truly decentralise if we do not embrace the diversity of our community. As such, we take translations seriously. 

* If you speak more than one language [come help translate](./contribution-path/translators.md)! 
* If you have an eye for documentation you can always help [improve the docs](https://github.com/ethereum-optimism/community-hub) themselves! 
* For those of you who enjoy connecting with like minded individuals, keep an eye on our [Local Optimists Program](./contribution-path/local-optimists.md) for events near you!
* If you enjoy helping others then you should check out the [support NERD program](./contribution-path/NERD-req.md).

## üìà Data & Analytics

Data is an essential ingredient to good decision making. We take our data seriously. 

* Check out our existing [Dune dashboards](https://dune.com/optimismfnd) to give you an idea of what we are looking at. 
* If you have a nack for numbers then you should get involved in the [NumbaNERDs program](./contribution-path/numbaNERDs.md)!
* We also have [this gov post](https://gov.optimism.io/t/how-to-contribute-op-rewards-analytics/5975) with resources to get you inspired and informed.

## üíª Developers

As a developer you have a few options to get contributing! Build on us, with us, or help move the whole space forward. We are happy to have you <3.

* If you are a dapp developer, check out our [developer docs to get started](../developers/README.md). 
* If you want to get a little deeper into the [OP Stack](https://stack.optimism.io/), we have great docs for [Getting Started with the OP Stack](https://stack.optimism.io/docs/build/getting-started/). 
* If you are looking for inspiration on what to build then check out the [Ideas List](https://github.com/orgs/ethereum-optimism/projects/31/views/3) which has a wide range of ideas from quick builds to mad science innovations. Go poke around! 
* If you want to contribute directly to the Optimism codebase please [read this doc](./technical-contributions.md).
* And last but not least, if you are familiar with the struggles of developing in the blockchain world and have a passion for technical support, you can help out your fellow developers by joining the [TechNERD program](./contribution-path/techNERDs.md). 
* You can also help [make the developer tutorials better](https://github.com/ethereum-optimism/optimism-tutorial). 

## üèõÔ∏è Governance

The Optimism Collectives governance is an incredibly collective and exciting space that is growing and evolving. Plenty of opportunities to have impact! All work supported or executed by the Collective should be in pursuit of our [Collective Intents](https://gov.optimism.io/t/collective-intents/5874).

* An easy place to start is to look at the [Get a Grant](../governance/get-a-grant.md) page. This is an easy way to see what governance is looking for.
* Before getting into our governance its highly recommended to [understand our unique governance set up](../governance/README.md).
* If you are serious about getting into governance you can get involved in the Token House by [becoming a Delegate](../governance/delegate.md). This is a serious responsibility, so make sure you [understand what is required of you](../governance/existing-delegate.md).
* There is also the [Citizens House](../governance/citizens-house.md). You can read more about [Citizenship here](../governance/citizenship.md). 
* If you are a delegate already involved and voting, looking for additional ways to help the Collective, reach out to lavande@optimism.io.

## ü´° Marketing

The Optimism Vision is big! And Visions this big need to be amplified by a diverse & aligned group to help make it real. 

* The [Ambassadors program](./contribution-path/Ambassador-req.md) enables community members to create focused content to bring the Vision closer to reality. If you have a talent for writing, design or visuals, come get involved! 
* If your project wants some marketing love, you have options! Get your app in front of the Optimism community with our [Demo Day (every Thursday)](./demo-day.md).
* If your app is deployed on the Superchain, you can be added to our [our Superchain apps page](https://www.optimism.io/apps). Simply [fill out this form](https://share.hsforms.com/1hUEaGvsySTK9ccNBcNmjkwqoshb) to be included. Inclusion is at our discretion. To amplify your app launch through Superchain marketing channels [fill out this form](https://share.hsforms.com/1XHQ9Io_lT0-vf9nSVoUahQqoshb)

"
ethereum-optimism/community-hub,contribution-path,contribute/contribution-path,"
"
ethereum-optimism/community-hub,Ambassador-req.md,contribute/contribution-path/Ambassador-req.md,"---
title: Ambassador Requirements 
lang: en-US
---

::: tip
üí° Ready to join the Ambassador program and seize the memes of production with us? Well you‚Äôre in the right place! Below are the requirements and processes involved in becoming an Ambassador.
:::

‚ö†Ô∏è **This document is a work in progress, and will evolve. Check back occasionally.**

First off, let's check you are doing this for the right reasons. Check your assumptions at the door, please:

‚ùå¬† Being an Ambassador will NOT give you eternal fame and glory.

‚úÖ¬† Ambassadors will help onboard millions of users into the Optimism ecosystem through education.

‚úÖ¬† Being an Ambassador will up your skill level as a contributor, and in doing so, you will help others in the program up theirs through collaboration in an Optimistic environment. 

## Becoming an Ambassador 

üöÄ Optimism Ambassadors are highly values aligned with Optimism and are of course highly Optimistic!

The journey to become an Ambassador follow the following steps:

ü¶æ `wannabe-ambassador` ‚Üí `ambassador-in-training` ‚Üí `ambassador`

### Pre-flight checklist

* Optimism Ambassadors love to collaborate and help others grow in the Ambassador program.
* Optimism Ambassadors create values-focused content which form the narrative of the entire ecosystem.
* Optimism Ambassadors value sustainability initiatives like [retroactive public goods funding](https://app.optimism.io/retropgf).

### Step 1: `wannabe-ambassador`

**`wannabe-ambassador`** ‚Üí `ambassador-in-training` ‚Üí `ambassador`

1. To show your interest, get the `wannabe-ambassador` role in the [#become-an-ambassador](https://discord.com/channels/667044843901681675/973588280715141192) Discord channel. 
    1. **Get Up To Speed:**
        - Read pinned messages in Discord Ambassador Channels
        - Review upvoted Reddit posts in the [r/optimismCollective](https://www.reddit.com/r/optimismCollective/)
    2. **Stay Active - Activity on Reddit in the [r/optimismCollective](https://www.reddit.com/r/optimismCollective/) will be a determining factor for the `ambassador-in-training` role** 
        - We use Reddit so you can cross post your content from other platforms here
        - Answer questions, upvote, downvote, use tags, and comment
        - Spamming and low quality activity will be obvious to your peers who will be voting on advancing you through the program
        
### Step 2: `ambassador-in-training`

`wannabe-ambassador` ‚Üí **`ambassador-in-training`** ‚Üí `ambassador`

#### **To Obtain `ambassador-in-training` status:**

- **Fill out Ambassador [intake form](https://app.deform.cc/form/3d8c6150-3c4a-4944-b1a7-8c5b888ae1ec)**
- **Minimum of 8 weeks** spent as as an active wannabe-ambassador then..
    - **IMPORTANT:** This is 8 weeks from the date this document goes live (3/22/2023)
- ***Ambassadors vote on your new role by reviewing your contributions:**
    1. **#1 Reddit:** Provide a link to your Reddit profile for review
        1. Posts, comments, overall contribution quality
    2. **#2 Content Submission:** Create an original piece of content explaining what [Retroactive Public Goods Funding](https://app.optimism.io/retropgf) is and how it fits into Optimism‚Äôs [Vision](https://www.optimism.io/vision). 
        1. Example Content Title: What is Retroactive Public Goods Funding?
        2. Example Outline:
            1. Set the stage by explaining the [Optimism Collective](https://app.optimism.io/announcement) and its north star: impact=profit
            2. Explain the importance of public goods within a digital society 
                1. Public goods act as a fuel for the growth of the Collective economy. Growth yields profit for the Collective and profit which funds more investment in public goods, altogether producing a virtuous cycle of impact-driven expansion.
            3. Then get into how Optimism approaches funding these very important public goods (Retro-PGF)
- **Voting** will take place in Discord Channel drop a message in Discord with the following:
    - Reddit profile link
    - Content Submission
    - How long you have been a `wannabe-ambassador`

### Step 3: `Ambassador`

‚úÖ `wannabe-ambassador` ‚Üí `ambassador-in-training` ‚Üí **`ambassador`**

1. **Minimum of 12 weeks** spent as an active `ambassador-in-training`
1. **Ambassadors vote on your new role by reviewing your contributions:**
    1. **Reddit:** Provide a link to your Reddit profile for review
        1. What is being looked at? Posts, comments, overall contribution quality
    2. **Collaborative** **Content Submission:** Create an original piece of content with another `wannabe-ambassador`, `ambassador-in-training` or `ambassador` This can also be a group (3+ creators)
        1. Example: A YouTube video where one does the voice-over explanation while the other does the visuals. If it is a group maybe the third person creates a YouTube short to capture users attention which then links to the longer form video to find out more 
        2. This collaborative piece of original content can be chosen from the list below. Creators must understand the subject matter cannot use previous content they have created
            1. Any recent Optimism announcement or release (2 months back)
            2. Retroactive Public Goods Funding [https://app.optimism.io/retropgf](https://app.optimism.io/retropgf) 
            3. Explain the Optimism Vision: [https://www.optimism.io/vision](https://www.optimism.io/vision)    
            4. Explain the purpose of the The Optimist NFT and or the AttestationStation (hint they are deeply tied together) [https://app.optimism.io/optimist-nft](https://app.optimism.io/optimist-nft) 
            5. What is the Optimism Collective? [https://community.optimism.io/docs/governance/](https://community.optimism.io/docs/governance/)
1. **Voting** will take place in Discord Channel. Drop a message in Discord with the following:
    - Reddit profile link
    - Content Submission
    - How long you have been an `ambassador-in-training`

### Content Submission Guidelines:

- **NO PRICE DISCUSSION,** EVER!! This includes speculating about price, moon references, etc. This applies for all projects and not just the OP token. Focus on impact, not profit. 
- Content can be written, audio, video, or a mix and may be on any platform. If you are an artist, then create a visual artefact to demonstrate your understanding of the subject matter.
- Content thoroughly explains the subject and makes a deeper connection to Optimism‚Äôs values and or has connected it to Optimism‚Äôs larger vision.
- Content is accurate
- Content can be as long or as short as you would like, provided you demonstrate an understanding of the subject matter and put some effort in!
- Hint: Every single prompt is connected in one or many ways to every other prompt. When you start to make those connections, you begin to realize just how grand of a vision Optimism has and why Optimism‚Äôs Ambassadors are the best of the best.

**NOTE:**

To submit non-English content there must be 2 translators available in that language to review submission.

## Things that will make you lose your Ambassador status

**Inactivity of > 4 weeks ‚Üí** To stay in the program you must stay engaged and active. We will attempt to make contact with you before we remove your role to gauge your continued interest in the program. 
**3 warnings ‚Üí** As outlined in the warnings below. 
**Any severe violations ‚Üí** Any violations outlined in the Insta-ban section below. Violations of this nature will also 

### Warnings

::: warning NOTICE
üöß **3 warnings and you will lose your ambassador role, and will not be able to reapply to the program for 3 months.**
::: 

1. **NO PRICE DISCUSSION, EVER!!**
2. **Personal attacks ‚Üí** We are all trying our bestüôÇ.. Attack the idea, not the person. If you attack someone personally, you will get a warning. 
3. **Creating low-quality/low-effort content ‚Üí** The optimistic side of life takes work. If you make low-quality content (think copy-paste any logo and the meme still works), you will get a warning. 
4. **Copying others‚Äô content and passing it off as your own ‚Üí** People work hard to create good content. If you steal their hard work in an attempt to further yourself - you will get warned. Note that you can still share others content! Just don‚Äôt pretend you made it.

### Insta-ban

::: warning NOTICE
‚ö†Ô∏è **Being an Optimism Ambassador is a privilege. If you abuse the power and reputation that comes with being in such an elite group you will lose the privilege.**
::: 

1. **Scamming your follower base ‚Üí** Example: pump and dump schemes, whether Optimism related or not. Your followers are not exit liquidity. 
2. **Impersonating a creator or team member ‚Üí** If you try to pretend to be someone else (not just posting their content, but stealing their profile photo, etc) you will get removed. 
3. **Ambassadors are told sensitive information. If you leak... üíÄ** **‚Üí** Occasionally, Ambassadors get to hear news and updates before it is public. If you leak private information given to Ambassadors, you will lose the Ambassador role and be barred from ever becoming an Ambassador again. 
4. **DOXing another community member or other [serious violations](https://gov.optimism.io/t/guidance-on-severe-violations/5729) ‚Üí** Publishing identifying information of another community member without their permission
"
ethereum-optimism/community-hub,NERD-req.md,contribute/contribution-path/NERD-req.md,"---
title: Support NERD Requirements 
lang: en-US
---

::: tip
üí° So you want to be an optimistic NERD ‚Äòey? Well your in the right place! Below are the requirements and process involved in becoming a support NERD.
:::

‚ö†Ô∏è **This document is a work in progress, and will evolve. Check back occasionally.**

First off, lets check you are doing this for the right reasons. Check your assumptions at the door please:

‚ùå¬† Being a support NERD will NOT give you eternal fame and glory.

‚úÖ¬† Being a support NERD will help the community grow in a safe and supported way.

‚úÖ¬† Being a support NERD will help Optimism continue to be the coolest and kindest community. 

## Becoming a supNERD

üöÄ Optimism support NERDs are highly values aligned with Optimism and are of course highly Optimistic! Support NERDs provide support to the Optimism Discord, helping users with questions, and pointing people in the right direction. 

The journey to become an supNERD follow the following steps:

üöÄ `wannabe-NERD` ‚Üí `NERD-in-training` ‚Üí `support-NERD`

üöÄ You should believe in the optimistic values: Open, transparent, in support of public goods (if you have not heard about our [RetroPGF, go check it out!](https://medium.com/ethereum-optimism/retroactive-public-goods-funding-33c9b7d00f0c)).

- Support NERDs are good at community building, and making the Discord feel inclusive.
- NERDs will NEVER DM USERS. Keep all support in public threads.
- Don‚Äôt spread negative energy. This does not mean that you should try to remove people asking hard questions. But don‚Äôt be a dick.
- Talk about Optimism! A tweet now and then never hurt, just make sure you are accurate.
- Try help and promote new projects on Optimism! It will also help you give better support if you play around with the dapps on Optimism so you know how they work, and where things might go wrong.

### Step 1: `wannabe-NERD`

**`wannabe-NERD`** ‚Üí `NERD-in-training` ‚Üí `support-NERD`

**To ensure that our support NERDs are only the highest quality nerds we have the following requirements before you can start a NERD trial**

1. Fill in the [wannabe-NERD form](https://forms.gle/YCirMCzagW64BNLu7).
    This helps us know all our NERDs and their languages. L2 is global after all üåçüåéüåè
    [NERDs](https://forms.gle/YCirMCzagW64BNLu7)
1. Be in the Optimism Discord for at least 2 months.
    We need to know you are serious üëÄ
1.  Be actively offering support in the Discord for at least 2 months. 
    How can you offer support:
    - Answering questions that you know the answer to.
    - Tagging the `support-nerds` to answer questions you don‚Äôt know the answer to.
        - ‚ö†Ô∏è¬†Giving bad/incorrect/misleading answers to users instead of tagging the nerds *will count against you*.
    - Reporting scams, bots or spam.
    - Keeping the discord ‚Äúclean‚Äù (channel hygiene)
        - Asking users who post questions in general to post them in `user-support`, same for developer issues in `developer-support`
        - Answering user questions **in a thread on their original message.**
            - Steps to answer messages in Discord threads (iykyk)
                1. First click on the three dots above the message
                    (don‚Äôt worry if yours does not have as many options)
                1. Click Create Thread
                1. Name the thread after the user problem 
                1. Make sure to tag the user and let them know to post any updates in the thread! 
                    
    - If you speak a second language, helping out in that language channel (if we have it) is fantastic ‚ú®
1. Read the descriptions of all the channels. This will help you know what channels are for what.
1. Read the pinned messages. They are pinned for a reason üòå
1. Read the user support docs ‚Üí
    - Let us know if you find any broken links, outdated information or if you think there is something we should add!
    - If you are reading it in any of the non-english supported translations, please let us know if you find anything wrong on [our CorwdIn](https://crowdin.com/project/optimism-help-center)! ([CrowdIn is our translation tool of choice](https://crowdin.com/project/optimism-help-center), let us know in the #translator Discord channel if you would like to become a translator. See the channel in #get-a-role).
    [Optimism](https://help.optimism.io/hc/en-us)
1. Read the developer docs (if you are technical) ‚Üí
    - Report any:
        - Incorrect/out of date information you find
        - Broken links
    [Optimism Docs | Optimism Docs](https://community.optimism.io/)
    

## Things you can do to help

- Introduce yourself! Mention your timezone, country, languages you can speak, when you will be online and what your strengths are (i.e technical, design, research, etc)
- Find other ways you can help! Translating documents, connecting resources, provide research, find helpful resources, make PRs on the docs. There is so much that can be done!

### Step 2: `NERD-in-training`

`wannabe-NERD` ‚Üí **`NERD-in-training`** ‚Üí `support-NERD`

‚úÖ So you have passed the background requirements. Congrats! Follow these steps to go from a `wannabe-NERD` to a fully fledged `support-NERD` ü§ì


1. Post proof of meeting the requirements in the `#wannabe-NERD` channel. If you speak a second language and would like to offer support in this language, please include this in your message. 
1. A `support-NERD` as well as an Optimism team member will check your contributions within the Discord to see if you have offered enough support. You will be notified either way. 
1. If you have offered enough support (three (3) months)  you will be given the `nerd-in-training` role. You will need to have the `nerd-in-training` for an additional two (2) months, during which you will need to continue offering support. 
1. After that, should your support be high enough quality an existing NERD will nominate you. 
    1. Your nomination is voted on by support-NERDs
    2. You need a majority (50%) to ratify your nomination 
    3. Then you are a `support-NERD`!

## Things that will make you lose your NERD status

**‚ö†Ô∏è Being a NERD is a privilege. If you abuse the power and reputation that comes with it you will loose the privilege.**

1. **If you scam a user, or send spam in any channel** ‚Üí This will make you loose your wannabe-NERD role and get you banned for life from ever becoming a nerd, as well as banned from the Discord. 
2. **Being rude to users** ‚Üí This will get you kicked from the NERDs, and also temp banned from the Discord for 3 days. Don‚Äôt be a dick. 
3. **Giving false/fake information** ‚Üí If you send a user bad information, or malicious information, you will loose your NERD rights and get banned (or temp banned) depending on how bad the info was. 
4. **NERDs are told sensitive information. If you leak... üíÄ** ‚Üí Occasionally NERDs get to hear news and updates before it is public. If you leak private information given to NERDs you will loose NERD role and be bared from ever becoming a NERD again. 

"
ethereum-optimism/community-hub,attestation-identity.md,contribute/contribution-path/attestation-identity.md,"---
title: Identity and Attestations
lang: en-US
---

# Citizenship, identity, reputation and attestations

This document intends to open-source the Optimism Foundation‚Äôs thinking around identity and reputation within the Collective, as it relates to Citizenship. The hope is to provide some clarity and direction for community members who are curious or eager to build things that create impact for the Collective.

## Problem summary

We need robust user and project identity within the Optimism Collective as a foundation for Citizenship.This will improve the quality of Token House elections, better support developers on their journey of building on the superchain and create a high trust ecosystem.

In our plan for how to get there, we need to avoid following known pitfalls:

- Products that on their own don‚Äôt solve a problem, don‚Äôt get adopted.
- Attestations aren‚Äôt valuable unless they are being consumed in a real use case.
- There may be a cold start or chicken-and-egg problem in bootstrapping an identity/reputation network.
- Defining the criteria for citizenship ‚Äòtop down‚Äô and issuing related attestations misses an opportunity for emergent knowledge.
- Attestations issued for their own sake are at risk of being arbitrary - i.e. not representing anything meaningful for the Optimism Collective.

## Principles

- Prioritize the things that will help Citizenship emerge organically over defining Citizenship top-down.
- Issue attestations that will be used for something right away rather than issuing attestations for every little thing that might be useful in the future.
- When aggregating data, avoid arbitrary inputs and ensure there is a way to measure effectiveness.
- Design with the expectation that what is built will attract farmers.

See the ‚ÄòAttestations Best Practices‚Äô section below for a practical guide to attestations.

## Framework

![image](../../../assets/docs/contribute/att-framework.png)

The identity stack framework helps us to see how the different elements of identity and reputation fit together.

At the data layer, we have raw blockchain transactions, attestations and other types of data. The data producers can be dApps, organizations or individuals themselves. Anyone can produce any kind of data, but those higher up in the stack (such as data aggregators) need to differentiate signal from noise.

The data interpretation layer includes algorithms, aggregations and other kinds of analytics run across the data in the data layer. Data aggregators can but don‚Äôt need to be the same entities that produce or consume the data. In fact, in the future we can imagine a large marketplace of data aggregators that compete to provide the most valuable algorithms to other entities. Anyone can aggregate data, but they must prove their worth and trustworthiness to other players. In the future, metric-based impact evaluation for Retro Funding, smart defaults in the Token House and Citizenship selection are all areas where we imagine that data interpretation will become essential.

At the identity layer we have the way that individual users and projects/teams are represented in the Optimism Collective in order to tie together all the information about them. In the past, Ethereum addresses have been used to represent users and projects, but we are seeing limitations in this approach, as Ethereum addresses often do not stay stable over the lifecycle of a user or a project. The identity layer of the stack is the narrowest point - here having multiple competing offerings could become detrimental if one person‚Äôs identity is split across multiple accounts.

Finally, the UI layer includes any interface that integrates elements of the layers below - for example an interface that represents user profiles or a website that surfaces various algorithms that compute a user‚Äôs impact in the Optimism Collective. A multitude of interfaces is valuable and provides users different ways to engage with the layers below in the context of the user journey or the problem they are trying to solve.

## Now what?

We ought to take an approach of building out vertical slices of the identity stack, rather than building out sections horizontally. For example, rather than investing into building out all the possible use cases for data interpretation, we should select specific user problems and solve them end-to-end. Each vertical slice will solve a specific problem and integrate the necessary elements of the stack. This is the classic method of building an MVP and ensures that each piece that is built serves a purpose and gets adoption. It also means that attestations will be generated when they serve a specific need as part of a user journey, rather than being arbitrary.

While we are not taking an approach of building all the layers horizontally, the Optimism Foundation will support the establishment of an opinionated identity data structure that others can build around. By forming an opinion on how individuals and projects are represented in the Collective, we will make it easier for others to contribute and interoperate. Stay tuned for more updates on this.

We recommend that others keen to build within the identity and reputation space in the Optimism Collective take an approach of solving a specific and real problem for a clearly-defined user group and consider how this relates to the various layers of the identity stack, while adopting a shared user and project identity structure.

For those seeking specific input and ideas on what the Foundation and Token House consider valuable work, please refer to the [Builder Ideas List](https://contribute.optimism.io/), and current [Delegate Mission Requests](https://gov.optimism.io/c/mission-requests/69) and [Foundation Mission Requests](https://github.com/orgs/ethereum-optimism/projects/31/views/1) - these are the channels where specific work is called for.

If you‚Äôre working on something that you think fits within this framework and is not represented in these channels, please email identity@optimism.io and we‚Äôll consider whether a Mission Grant could support this work.

## Attestations best practices

The Optimism Collective uses attestations via the [Ethereum Attestation Service](https://optimism.easscan.org/) as the mechanism for capturing important pieces of data as signed statements made by an issuer. For example, the Optimism Foundation is currently the issuer of attestations about who is a Badgeholder.

### When are attestations useful?

- Any time there is need for public/consumable and trusted data that is not available on-chain, an attestation might be useful.
- Attestations are especially valuable in cases where you need an entity to sign a claim.
- If you are generating some data which is valuable to some other person / organization / entity, by making it an attestation you can make it consumable to them and verify that you are the source of the data.
- Attestations / their content [can be made private](https://docs.attest.sh/docs/core--concepts/privacy), make sure to consider whether this would be appropriate for your use case.

### When are Attestations not useful?

- If the data in an attestation doesn‚Äôt need to be shared / consumed by anyone at all then there is probably no reason to turn it into an attestation.
- Data which can just be derived on-chain, like an account‚Äôs balance, transaction histories, etc., doesn‚Äôt need to be an attestation.

### Knowing when to generate attestations

We need to grow a rich set of attestations to build out identity in the Collective, but they must also be relevant. It is a delicate balancing act that each attestor will need to decide. Blanket issuing attestations that don‚Äôt have much value just means that we‚Äôll have to filter out more noise. Ideally, the fact that you‚Äôre issuing an attestation is already one sign that this piece of data is signal rather than noise.

- A good moment to issue an attestation is when there is already a use-case - i.e. the attestation you issue will immediately be consumed for a specific purpose and solves a real need / problem. For example, when you want attestation-gated channels in Discord.
- If there is an attestation you think might be useful to some other or future entity, gather input from that entity (if possible). Validate that this data is indeed valuable / necessary. If we‚Äôre talking about future entities, use your best judgment. It‚Äôs true that starting to issue certain attestations early (before there is a clear use case) can be valuable later, but only if the future use case manifests.
- If you‚Äôre not sure, consider the importance of the piece of information you are attesting in the context of the value chain it is part of. For example, in the context of Retro Funding, the fact a project received funding is closer to the source of value than the fact that it applied.

### Deciding on the issuer

- The issuer is perhaps the most essential component of an attestation. Trust in the issuer is what gives an attestation meaning. Someone can go around signing digital statements that people have Doctorate degrees from Harvard University, but they have no meaning unless people believe that person to be the legitimate source of truth on who has Doctorate degrees from Harvard University.
- When deciding the issuer, think about who or what is the source of truth on a piece of information. Sometimes, this might be code, and a piece of software is the optimal issuer. In this case, transparency / legitimacy of the code can be important factors in people‚Äôs trust in the attestation.
- In cases where a person or group of people are the source of truth of a piece of information, a single person‚Äôs Ethereum account or a group‚Äôs multisig might be the more appropriate issuers of the attestation.
- There may be cases where software is the best issuer, but it is impractical to make this happen. In these cases, it‚Äôs reasonable to find an individual or organization that is a legitimate authority on the attestations and is trustworthy to others. For example, for the time being an Optimism Foundation multisig is the issuer of attestations on who is a Badgeholder, but in the future it may be a smart contract that issues these attestations.
- Remember that attestations are context-dependent / intersubjective - what matters most is the long-term credibility of the issuer of an attestation - i.e. how the issuer is perceived by others.

### Creating a useful schema

- Schemas exist to make sure that similar attestations are structured in the same way and can be identified as belonging to a set. This is vital for attestation consumers.
- Before creating a new schema, check to see if a [relevant schema already exists](https://optimism.easscan.org/schemas).
- The EAS has [recommendations for schema design](https://docs.attest.sh/docs/core--concepts/schemas). Here are some of their tips:
  - **Keep it Simple:** A schema should be concise. Avoid unnecessary complexity.
  - **Be Descriptive:** Each field should have a clear purpose and name.
  - **Avoid Redundancy:** Ensure each piece of information is captured once.
  - **Plan for the Future:** Design your schema to be extendable without breaking existing attestations.
  - **Gas Efficiency:** Consider the Ethereum gas costs. Using the right data types and thinking modularly will help reduce costs.

### When to make attestations on vs. offchain

Some key points to keep in mind ([see here](https://docs.attest.sh/docs/core--concepts/onchain-vs-offchain) for a full rundown):

- Onchain attestations are easier for smart contracts to read and directly verifiable on the blockchain.
- If you need them to be completely private, offchain attestations give you more options. Sensitive data must be encrypted in onchain attestations.
- Offchain attestations can be deleted, but onchain they are immutable.
- Both kinds can be revoked, but offchain attestations require their own separate revocation management.
- Onchain attestations are associated with gas fees and transaction times, making them less scalable than offchain.

For questions about attestations that aren‚Äôt answered here, please consult the [Ethereum Attestation Service documentation](https://docs.attest.sh/).

"
ethereum-optimism/community-hub,local-optimists.md,contribute/contribution-path/local-optimists.md,"---
title: Local Optimists (coming soon‚Ñ¢Ô∏è)
lang: en-US
---

Sharing is caring, and we know you want to share the Optimism Vision with your community! 

We have heard it again and again - you want to run events with your local community. Some of you have gone ahead and run the events! And we are so proud. 

We are developing a program to better support you in bringing your local community into the Optimism Collective. If you want to run an event now or want to be informed when this program goes live, please keep an eye on this page and in our Discord. 

[Sign up to be a part of the program](https://optimismfnd.typeform.com/local-optimists) (we will message you when the program goes live!)
"
ethereum-optimism/community-hub,numbaNERDs.md,contribute/contribution-path/numbaNERDs.md,"---
title: NumbaNERDs 
lang: en-US
---

The NumbaNERDs program is designed to ensure that there is always high quality analytics and transparency around grant spending for delegates. 

As our governance grows clear and accessible data becomes ever more essential to good decision making. This program went through governance for funding. You can see more about the program in the [Governance Mission Proposal for NumbaNERDs](https://gov.optimism.io/t/ready-numbanerd-program/6086). 

To participate go to the [numbaNERD bounty board](https://app.dework.xyz/optimism-community/main-space-35638) here and follow the steps in the [""Get NumbaNERD role""](https://app.dework.xyz/optimism-community/main-space-35638?taskId=5e37c82e-9d2b-4b7c-bad9-c20e4e1f6d60) bounty. 

There is also an [analytics focused channel in the Optimism Discord](https://discord.com/channels/667044843901681675/928227180603899924) if you would like to get involved now! 
"
ethereum-optimism/community-hub,techNERDs.md,contribute/contribution-path/techNERDs.md,"---
title: TechNERDs
lang: en-US
---

The TechNERDs program is designed to improve the technical support available to developers in the Optimism Ecosystem. 

This program went through governance for funding. You can see more about the program in the [Governance Mission Proposal for TechNERDs](https://gov.optimism.io/t/ready-technerd-program/6087). 

To participate, complete the TechNERD training (as outlined below) and join the wannabe-TechNERD channel in the Optimism Discord. Start helping other developers today!

There are also a bunch of [developer focused channels in the Optimism Discord](https://discord.com/channels/667044843901681675/1080862392281481246) if you want to see what its all about. 

## TechNERD Training Curriculum

This curriculum was designed for developers with a deep technical background, as such skips over a lot of the ""basics"". A more beginner friendly version of this course may be released later if there is demand for one. 

You can also see the [Slides for the TechNERD](https://docs.google.com/presentation/d/1hyJAV39nxsGX3XOUTsRpcQoaSrYWE3qvsjT2cu8w560/edit?usp=sharing) training here. 

| Lesson | Topic | Exercise | Link |
|:-------|:------|:---------|:-----|
| 1 | Getting an RPC Endpoint | Get an RPC endpoint. You will need this for all following exercises. | [Provider Options](../../useful-tools/providers.md) |
| 2 | Run an OP Goerli Node | Most developer questions we get are about running a node. Pay special attention to any issues you face or confusion you have. This can take up to 2 weeks (depending on your internet speed) to sync. | [Run a Node](https://community.optimism.io/docs/developers/build/run-a-node/) |
| 3 | Setting up an OP Stack | The OP Stack is an incredible step towards the Superchain vision. As such you should be familiar with the standard OP Stack. | [Getting Started with the OP Stack](https://stack.optimism.io/docs/build/getting-started/)
| 4 | Setting up an explorer for your OP Stack | Make your OP Stack feel more real with its own block explorer! | [Blockscout explorer guide](https://stack.optimism.io/docs/build/explorer/)
|  5 | Deploy & bridge a standard ERC20 | As an L2, bridging is a pretty important concept. Make sure you are comfortable with the bridging process. | [Standard Bridge, Standard Token](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/standard-bridge-standard-token) | 
| 5.1 Bonus | Standard Bridge, Custom Token | This bonus exercise will give you insight into how the bridge works, and the limitations of it. | [Standard Bridge, Custom Token](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/standard-bridge-custom-token)
| 6 | Tracing Transactions | Now that you have done some cross chain transactions with your token bridging, you can use the SDK to trace that transaction. Tracing transactions is a powerful tool when helping other developers. Familiarise yourself with the SDK to get the most out of this exercise! | [Transaction Tracing with the Optimism SDK](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-trace-tx)
| 7 | Forced Withdrawal (OP Stack) | Once your OP Stack is set up and running, you can force a withdrawal. While you will most likely never have to do this, its an important concept to understand. | [Forced Withdrawal](https://stack.optimism.io/docs/security/forced-withdrawal/)
| 8 | Verify nodes are running & synced | Verify that you have set up and synced your node correctly. | [Verify your node](https://stack.optimism.io/docs/build/getting-started/#use-your-rollup)

"
ethereum-optimism/community-hub,translators.md,contribute/contribution-path/translators.md,"---
title: Translators
lang: en-US
---

At Optimism, we know that we can never truly decentralise if we do not embrace the diversity of our community. As such, we take translations seriously. 

If you can speak a second language and want to contribute to the collective, please do! 

You can [help translate our User Docs](https://crowdin.com/project/optimism-help-center) to your local language. We use [CrowdIn](https://crowdin.com/project/optimism-help-center) (you will need to make an account, but its free!).

CrowdIn translators for the Optimism Collective have previously [received RetroPGF](https://optimism.mirror.xyz/Upn_LtV2-3SviXgX_PE_LyA7YI00jQyoM1yf55ltvvI)! Find out more [about RetroPGF here](../../governance/citizens-house.md).
"
ethereum-optimism/community-hub,demo-day.md,contribute/demo-day.md,"---
title: Demo Day
lang: en-US
---

## About Demo Day

Demo day was started by the Optimism Ambassador Program as a way for users to see all the cool dApps on Optimism! It runs every Thursday at 4pm UTC.  dApps have ~15 minutes to showcase, we recommend 10 minutes to present and another 5 for questions. This can be anything from a full run through, to showing off a new feature, or promoting a special event on the dApp!


To apply to be featured in our next Demo Day, head over to the [Demo-day channel](https://discord.com/channels/667044843901681675/960493820674465883) in our Discord (it's under events). 

For further visibility projects are encouraged to add their project into our developers show and tell section here on [GitHub](https://github.com/ethereum-optimism/developers/discussions/categories/show-and-tell)


## Getting a Slot

Make sure you check all these boxes before applying for demoing, or you will not get a demo spot. These spots go fast! 

### Pre-demo check list

1. Your dApp deployed & **live on OP Mainnet** 
1. All **presenters must be in the Optimism Discord server** as the event is held as an event in the Discord Server.  Make sure to tag the team member(s) who are presenting in the demo day channel.
1. Must be **available 24 hours prior to Demo Day** to do a quick audio/video check to ensure all your settings are correct. 
1. If you have not presented in a Discord channel before, please watch this tutorial before your AV check. This makes everything faster! [Discord Basics: How To Setup Audio and Video Settings](https://www.youtube.com/watch?v=fnMKZB6zTcQ)

### Get your slot!

‚úÖ If you meet all the above criteria, then please apply for a slot in the [Demo-day channel](https://discord.com/channels/667044843901681675/960493820674465883)

**Note:** If you want to do a giveaway, lotto or prizes/rewards around your demo please make sure to let us know in advance so we can help with hype and distribution (if needed).
"
ethereum-optimism/community-hub,important-terms.md,contribute/important-terms.md,"---
title: Optimism Important Terms 
lang: en-US
---

There is a lot going on inside the Optimism Collective. This doc aims to help you understand important terms and phrases. 

If you have specific questions, [join our Office Hours in Discord](https://discord.gg/optimism) (every 2nd week). If you want more support in creating Optimism content, check out our [Ambassador Program](./contribution-path/Ambassador-req.md)! 

For press and media inquiries, reach out to marketing@optimism.io. For amplification or marketing of your project, please see [project support options](../biz/README.md#marketing-requests-ü¶∏ü¶∏).

## The Optimistic Vision

An inclusive, open source Superchain that sustainably funds Public Goods, dispelling the myth that building public goods cannot be profitable!

### The RetroPGF Flywheel

![](../../assets/docs/governance/retropgf/retropgf-fly-wheel.png)

Optimism generates revenue through transaction fees paid on OP Mainnet and other OP Chains. Part of this revenue is directed by the Optimism Collective through RetroPGF. Better public goods means more development, which creates more revenue that can be directed to public goods. Read [more about the flywheel](https://app.optimism.io/retropgf).

### The Optimism Collective

**The Optimism Collective**¬†is a new model of¬†**digital democratic governance**¬†optimized to drive rapid and sustained growth of a decentralized ecosystem. The Collective is a band of communities, companies, and citizens united by a mutually beneficial pact to adhere to the axiom of¬†**impact=profit**¬†‚Äî the principle that positive impact to the collective should be rewarded with profit to the individual.

## Brand Kit

We are currently updating our brand kit, but you can find the old [Brand Kit here](https://github.com/ethereum-optimism/brand-kit)!

## Networks & The Superchain

The Optimism ecosystem is a growing space. Here are the basic terms and concepts you need to know to understand the shape of the Superchain. 

### The Superchain

The Superchain is a **vision** for a horizontally scalable network of chains that share security, a communication layer, and the OP Stack as an open source development stack. The Superchain does not yet exist. A number of governance and technical milestones need to be achieved before we have a functioning interoperable network of chains. Because of this, it is best to talk about the Superchain as a ‚Äúvision‚Äù for something we are working towards.

As of Aug 1, 2023, OP Mainnet, Base, Public Goods Network, and Zora Network have opted into the Superchain and will automatically inherit Superchain features when it launches.

[Read more about the Superchain](https://app.optimism.io/superchain). 

### OP Chains

OP Chains are Layer 2 blockchains that run the governance-approved release of the OP Stack, and therefore will be upgraded based on decisions by Optimism‚Äôs governance and contribute sequencer revenue back to the Collective. OP Chains will automatically inherit Superchain features in the future.

The benefit of opting into the Superchain and becoming an OP Chain is that users of OP Chains will have a convenient, homogenous experience bridging between OP Chains, and the OP Chain itself will share security and a governance standard ([Law of Chains](https://gov.optimism.io/t/law-of-chains-v0-1-section-by-section-overview/6515)).

### OP Stack

The [OP Stack](https://stack.optimism.io/) is the modular, open source, MIT-licensed development stack that powers the OP Mainnet, OP Chains, and, in the future, the Superchain. The OP Stack is maintained by the Optimism Collective.

### OP Stack Fork

An **OP Stack Fork** refers to a Layer 2 blockchain that has been built using the MIT-licensed OP Stack, but is not governed by Optimism‚Äôs governance or contributing sequencer revenue back to the Collective (and therefore is not on track to become part of the Superchain). This means OP Stack Chains won‚Äôt necessarily share security or interoperability with OP Chains in the Superchain.

### OP Mainnet

OP Mainnet is a Layer 2 blockchain powered by the OP Stack. Previously known as just ‚ÄúOptimism,‚Äù OP Mainnet is where it all started, and the first chain to commit to the Superchain vision.

## OP Token

The OP token is a governance token and should be discussed as such. Use ‚ÄúOP‚Äù instead of ‚Äú$OP.‚Äù  The use of the $ is prohibited in connection with ‚ÄúOP.‚Äù Content that refers to OP incorrectly will be removed off of Optimism platforms and will not be eligible for promotion. This means that, when talking about OP:

- Do not discuss the token price or speculate on the price - it has nothing to do with what we are here for. 
- Do not reference the OP token as an investment, including attempts at ‚Äúpumping‚Äù the price, encouraging purchases, speculating on how the network may result in returns on investments, or discussing how to buy or sell OP. 
- Token grants are made in OP - they are allocations of governance authority, not cash - and they should not be converted to USD, nor referred to in USD amounts.

"
ethereum-optimism/community-hub,technical-contributions.md,contribute/technical-contributions.md,"---
title: Technical Contributions to the Optimism Collective
lang: en-US
---


## Code contributions

The Optimism codebase is maintained in a monorepo at [https://github.com/ethereum-optimism/optimism](https://github.com/ethereum-optimism/optimism). It's a [collection of packages](https://github.com/ethereum-optimism/optimism#directory-structure) all requiring different skills to maintain and evolve ranging from NodeJS and TypeScript, Solidity and EVM, Go and Geth to Docker and Kubernetes. The following are good entry points into using your coding skills to help us build Optimism:

- Reporting issues. For security issues see [Security policy](https://github.com/ethereum-optimism/.github/blob/master/SECURITY.md).
- Participate in the [Bug Bounty programme](https://immunefi.com/bounty/optimism/).
- Fixing and responding to existing issues. You can start off with those tagged [""good first issue""](https://github.com/ethereum-optimism/optimism/contribute) which are meant as introductory issues for external contributors.
  Contributions are rewarded with a cool [GitPOAP](https://www.gitpoap.io/gp/1035).
- Work on open [bounties on Gitcoin](https://gitcoin.co/ethereum-optimism).

::: tip
Following the guidelines on [Contributing](https://github.com/ethereum-optimism/optimism/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/ethereum-optimism/.github/blob/master/CODE_OF_CONDUCT.md) in all your interactions with the project will ensure your contributions are processed by the team.
:::

"
ethereum-optimism/community-hub,developers,developers,"
"
ethereum-optimism/community-hub,README.md,developers/README.md,"---
title: Developer docs
lang: en-US
---

Welcome to the OP Mainnet developer docs!

Whether you're just looking to [deploy a basic contract](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/getting-started) or you're ready to [build a cross-chain app](./bridge/messaging.md), you'll be able to find everything you need to start building on OP Mainnet within this section.

If you're looking for third-party tools that make building on OP Mainnet easier, check out the [Tools for Developers](../useful-tools) section.

## Where should I start?

### Just getting started with OP Mainnet?

If you're brand new to OP Mainnet, we recommend checking out the [guide to deploying a basic contract](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/getting-started).
It'll get you familiar with the core steps required to get a contract deployed to the network.
Luckily, OP Mainnet is [EVM equivalent](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306), so it's 100% the same as deploying a contract to Ethereum.

If you're a bit more familiar with OP Mainnet and Ethereum, you can try walking through one of the various [tutorials](https://github.com/ethereum-optimism/optimism-tutorial) put together by the Optimism community.
They'll help you get a headstart when building your first Optimistic project.

### Ready to deploy a contract?

If you're looking to deploy your contracts to OP Mainnet or OP Goerli, take a look at the [getting started tutorial](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/getting-started#development-stacks).
It contains sample configuration files for deploying your contracts from common frameworks like Hardhat, Truffle, and Brownie.

You might also want to check out our guides for [running a local development environment](./build/dev-node.md) or [running your own OP Mainnet node](./build/run-a-node.md).
These guides are designed to help you feel totally confident in your OP Mainnet deployment.

### Want to explore the cross-chain frontier?

We've got detailed guides for that.
If you want to bridge a token from Ethereum to OP Mainnet (or vice versa!), you should learn more about our [Standard Token Bridge](./bridge/standard-bridge.md).
The Standard Token Bridge makes the process of moving tokens between chains as easy as possible.

If you're looking for something more advanced, we recommend reading through our page on [sending data between L1 and L2](./bridge/messaging.md).
Contracts on one chain can trigger contract functions on the other chain, it's pretty cool!
We even dogfood the same infrastructure and use it under the hood of the Standard Token Bridge.

## Still don't know where to look?

If you can't find the content you're looking for you've got a few options to get extra help.
We recommend first searching through this documentation (search bar at the top right).
If you've already done this and come up short, you can try [asking us a question in Discord](https://discord-gateway.optimism.io), [checking the Help Center](https://help.optimism.io/hc/en-us), or [making an issue on GitHub](https://github.com/ethereum-optimism/community-hub/issues).

"
ethereum-optimism/community-hub,bedrock,developers/bedrock,"
"
ethereum-optimism/community-hub,README.md,developers/bedrock/README.md,"---
title: Bedrock Explainer 
lang: en-US
meta:
    - name: og:image
      content: https://dev.optimism.io/content/images/size/w2000/2022/12/bedrock-BLUE.jpg
---

![Bedrock](https://dev.optimism.io/content/images/size/w2000/2022/12/bedrock-BLUE.jpg)

Bedrock is the name of the first ever official release of the OP Stack, which is a set of free and open-source modular components that work together to power blockchains such as OP Mainnet.

- To understand what is in the Bedrock release, keep reading.
- To develop on OP Mainnet, which upgraded its infrastructure to the Bedrock release, read the docs.
- To contribute to the OP Stack, see the contribution guidelines on the Optimism monorepo.

## Summary of Improvements

Bedrock improves on its predecessor by reducing transaction fees using optimized batch [compression](#optimized-data-compression) and Ethereum as a data availability layer; shortening delays of including L1 transactions in rollups by handling L1 re-orgs more gracefully; enabling modular proof systems through code re-use; and improving node performance by removing technical debt.

### Lower fees

In addition, Bedrock implements an optimized data [compression](#optimized-data-compression) strategy to minimize data costs. We are currently benchmarking the impact of this change, but we expect it to reduce fees significantly.

Bedrock also removes all L1 execution gas, reducing L1 data fees to the theoretical minimum. This reduces fees by an additional 10% over the previous version of the protocol.

### Shorter deposit times

Bedrock introduces support for L1 re-orgs in the node software, which significantly reduces the amount of time users need to wait for deposits. Earlier versions of the protocol could take up to 10 minutes to confirm deposits. With Bedrock, we expect deposits to confirm within 3 minutes.

### Improved proof modularity

Bedrock abstracts the proof system from the OP Stack so that a rollup may use either a fault proof or validity proof (e.g., a zk-SNARK) to prove correct execution of inputs on the rollup. This abstraction enables systems like [Cannon](https://github.com/ethereum-optimism/cannon) to be used to prove faults in the system.

### Improved node performance

The node software performance has been significantly improved by enabling execution of several transactions in a single rollup ""block"" as opposed to the prior ""one transaction per block"" model in the previous version. This allows the cost of merkle trie updates to be amortized across multiple transactions. At current transaction volume, this reduces state growth by approximately 15GB/year.

Node performance is further improved by removing technical debt from the previous version of the protocol. This includes removing the need for a separate ""data transport layer"" node to index L1, and updating the node software to efficiently query for transaction data from L1.

### Improved Ethereum equivalence

Bedrock was designed from the ground up to be as close to Ethereum as possible. Multiple deviations from Ethereum in the previous version of the protocol have been removed, including:

1. The one-transaction-per-block model.
2. Custom opcodes to get L1 block information.
3. Separate L1/L2 fee fields in the JSON-RPC API.
4. A custom ERC20 representation of ETH balances.

Bedrock also adds support for EIP-1559, chain re-orgs, and other Ethereum features present on L1.

## Design Principles

Bedrock was built to be modular & upgradeable, to reuse existing code from Ethereum, and to be as close to 100% Ethereum-equivalent as possible.

### Modularity

Bedrock makes it easy to swap out different components in the OP Stack and add new capabilities by using well-defined interfaces and versioning schemes. This allows for a flexible architecture that can adapt to future developments in the Ethereum ecosystem.

Examples:
- Separation of [rollup node](#rollup-node) and execution client
- Modular fault proof design

### Code re-use

Bedrock uses existing Ethereum architecture and infrastructure as much as possible. This approach enables the OP Stack to inherit security and ""lindy"" benefits from the battle-tested codebases used in production on Ethereum Mainnet. You'll find examples of this throughout the design including:

Examples:
- [Minimally modified execution clients](https://op-geth.optimism.io/)
- EVM contracts instead of precompiled client code

### Ethereum equivalence

Bedrock is designed to have maximum compatibility with the existing Ethereum developer experience. A few exceptions exist due to fundamental differences between an L1 and a rollup: an altered fee model, faster block time (2s vs 12s), and a special transaction type for including L1 [deposit](#deposits) transactions.

Examples:
- Fault proof designed to prove faults of minimally modified Ethereum [execution client](#execution-client)
- Code re-use of Ethereum [execution client](#execution-client) for use by nodes in the L2 network and sequencers

## Protocol

Rollups are derived from a data availability source (generally an L1 blockchain like Ethereum). In their most common configuration, rollup protocols derive a  **""canonical L2 chain""** from two primary sources of information:

1. Transaction data posted by Sequencers to the L1 and;
2. [Deposit](#deposits) transactions posted by accounts and contracts to a bridge contract on L1.

The following are the fundamental components of the protocol:

* Deposits are _writes_ to the canonical L2 chain by directly interacting with smart contracts on the L1.
* Withdrawals are _writes_ to the canonical L2 chain that implicitly trigger interactions with contracts and accounts on the L1.
* Batches are _writes_ of data corresponding to batches on the rollup.
* Block derivation is how _reads_ of data on the L1 are interpreted to understand the canonical L2 chain.
* Proof systems define _finality_ of posted output roots on the L1 such that they may be _executed_ upon (e.g., to execute withdrawals).

### Deposits

A **deposit** is a transaction on L1 that is to be included in the rollup. [Deposits](#deposits) are _guaranteed_ by definition to be included in the [canonical L2 chain](#protocol) as a means of preventing censorship or control of the L2.

#### Arbitrary message passing from L1

A **deposited transaction** is the transaction on the rollup that is made as a part of a [deposit](#deposits). With Bedrock, [deposits](#deposits) are fully generalized Ethereum transactions. For example, an account or contract on Ethereum can ‚Äúdeposit‚Äù a contract creation.

Bedrock defines a **deposit contract** that is available on the L1: it is a smart contract that L1 accounts and contracts can interact with to write to the L2. [Deposited transactions](#arbitrary-message-passing-from-l1) on the L2 are derived from the values in the event(s) emitted by this [deposit](#deposits) contract, which include expected parameters such as from, to, and data.

For full details, see the [deposit contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#deposit-contract) section of the protocol specifications.

#### Purchasing guaranteed L2 gas on L1

Bedrock also specifies a gas burn mechanism and a fee market for [deposits](#deposits). The gas that [deposited transactions](#arbitrary-message-passing-from-l1) spend on an L2 is bought on L1 via a gas burn. This gas is purchased on a fee market and there is a hard cap on the amount of gas provided to all [deposits](#deposits) in a single L1 block. This mechanism is used to prevent denial of service attacks that could occur by writing transactions to L2 from L1 that are extremely gas-intensive on L2, but cheap on L1.

The gas provided to [deposited transactions](#arbitrary-message-passing-from-l1) is sometimes called ""guaranteed gas."" Guaranteed gas is unique in that it is paid for by burning gas on L1 and is therefore not refundable.The total amount of L1 gas that must be burned per unit of guaranteed L2 gas requested depends on the price of L2 gas reported by a EIP-1559 style fee mechanism. Furthermore, users receive a dynamic gas stipend based on the amount of L1 gas spent to compute updates to the fee mechanism.

For a deeper explanation, read the [deposits section](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#deposits) of the protocol specifications.

### Withdrawals

**Withdrawals** are cross-domain transactions that are initiated on L2 and finalized by a transaction executed on L1. Notably, withdrawals may be used by an L2 account to call an L1 contract, or to transfer ETH from an L2 account to an L1 account.

Withdrawals are initiated on L2 via a call to the **Message Passer** predeploy contract, which records the important properties of the message in its storage. Withdrawals are finalized on L1 via a call to the [OptimismPortal](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/withdrawals.md#the-optimism-portal-contract) contract, which proves the inclusion of this withdrawal message. In this way, withdrawals are different from [deposits](#deposits). Instead of relying on [block derivation](#block-derivation), withdrawal transactions must use smart contracts on L1 for finalization.

#### Two-step withdrawals

Withdrawal proof validation bugs have been the root cause of many of the biggest bridge hacks of the last few years. The Bedrock release introduces an additional step in the withdrawals‚Äô process of prior versions meant to provide an extra layer of defense against these types of bugs. In the two-step withdrawal process, a Merkle proof corresponding to the withdrawal must be submitted 7 days before the withdrawal can be finalized. This new safety mechanism gives monitoring tools a full 7 days to find and detect invalid withdrawal proofs. If the [withdrawal](#withdrawals) proof is found to be invalid, a contract fix can be deployed before funds are lost. This dramatically reduces the risk of a bridge compromise.

For full details, see the [withdrawals](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/withdrawals.md) section of the protocol specification.

### Batches

In Bedrock, a wire format is defined for messaging between the L1 and L2 (i.e., for L2 deriving blocks from L1 and for L2 to write transactions to the L1). This wire format is designed to minimize costs and software complexity for writing to the L1.

#### Optimized data compression

To optimize data compression, lists of L2 transactions called **sequencer batches** are organized into groups of objects called **channels**, each of which have a maximum size that is defined in a [configurable parameter](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/derivation.md#channel-format) that will initially be set to ~9.5Mb. These [channels](#optimized-data-compression) are expected to be compressed using a compression function and submitted to the L1.

#### Parallelized batch submission

To parallelize messages from the sequencers that are submitting [compressed](#optimized-data-compression) [channel](#optimized-data-compression) data to the L1, [channels](#optimized-data-compression) are further broken down into **channel frames**, which are chunks of [compressed](#optimized-data-compression) [channel](#optimized-data-compression) data that can fit inside of a single L1 transaction. Given [channel frames](#parallelized-batch-submission) are mutually independent and the ordering is known, the Ethereum transactions sent by the sequencer to the L1 can be sent in parallel which minimizes sequencer software complexity and allows for filling up all available space for data on the L1.

#### Minimized usage of Ethereum gas

Bedrock removes all execution gas used by the L1 system from submitting [channel](#optimized-data-compression) data to the L1 in transactions called **batcher transactions**. All validation logic that was previously happening on smart contracts on the L1 is moved into the [block derivation](#block-derivation) logic.  Instead, [batcher transactions](#minimized-usage-of-ethereum-gas) are sent to a single EOA on Ethereum referred to as the **batch inbox address**.

Batches are still subject to validity checks (i.e. they have to be encoded correctly), and so are individual transactions within the batch (e.g. signatures have to be valid). Invalid [batches](#optimized-data-compression) and invalid individual transactions within an otherwise valid batch are considered to be discarded and irrelevant to the system.

> Note: Ethereum will soon upgrade to include [EIP-4844](https://eip4844.com/), which introduces a separate fee market for writing data and an increased cap of the amount of data the Ethereum protocol is willing to store. This change is expected to further decrease the costs associated with posting data to an L1.

For a deeper explanation, read [the wire format specifications](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/derivation.md#overview).

### Block Derivation

In Bedrock, the protocol is designed to guarantee that the timing of [deposits](#deposits) on the L1 is respected with regards to the [block derivation](#block-derivation) of the [canonical L2 chain](#protocol). Doing so is a _pure function_ of data written to the L1 by sequencers, [deposits](#deposits), and L1 block attributes. To accomplish this, the protocol defines strategies for guaranteeing inclusion of deposits, handling L1 and L2 timestamps, and processing sequencing windows in a pipeline to ensure correct ordering.

#### Guaranteed inclusion of deposits

A goal of the [block derivation](#block-derivation) protocol is to define it such that there must be an L2 block every ""L2 block time"" number of seconds, and that the timestamp of L2 blocks stays in sync with the timestamps of L1 (i.e., to ensure [deposits](#deposits) are included in a logical temporal order).

In Bedrock, the concept of a **sequencing epoch** is introduced: it is a range of L2 blocks derived from a range of L1 blocks. Each [epoch](#guaranteed-inclusion-of-deposits) is identified by an **epoch number**, which is equal to the block number of the first L1 block in the sequencing window. Epochs can vary in size, subject to some constraints.

The batch derivation pipeline treats the timestamps of the L1 blocks associated with [epoch number](#guaranteed-inclusion-of-deposits) as the anchor point for determining the order of transactions on the L2. The protocol guarantees that the first L2 block of an [epoch](#guaranteed-inclusion-of-deposits) never falls behind the timestamp of the L1 block matching the [epoch](#guaranteed-inclusion-of-deposits). The first blocks of an epoch _must_ contain deposits on L1 in order to guarantee that deposits will be processed.

Note that the target configuration for the block time on L2 in the Bedrock release is 2 seconds.

#### Handling L1 and L2 timestamps

Bedrock attempts to address the problem of reconciling the timestamps on L2 with timestamps on L1 present in [deposited transactions](#arbitrary-message-passing-from-l1). It does this by allowing a short window of time for sequencing to liberally apply timestamps on L2 transactions between [epochs](#guaranteed-inclusion-of-deposits).

A **sequencing window** is a sequence of L1 blocks from which an [epoch](#guaranteed-inclusion-of-deposits) can be derived. A [sequencing window](#handling-l1-and-l2-timestamps) whose first L1 block has the number `N` contains [batcher transactions](#minimized-usage-of-ethereum-gas) for [epoch](#guaranteed-inclusion-of-deposits) `N`.

The [sequencing window](#handling-l1-and-l2-timestamps) contains blocks `[N, N + SWS)` where `SWS` is the **sequencer window size**: a fixed rollup-level configuration parameter. This parameter must be at least 2. Increasing it provides more opportunity for sequencers to order L2 transactions with respect to [deposits](#deposits), and lowering it introduces stricter windows of time for sequencers to submit batcher transactions. It is a tradeoff between creating MEV opportunity and increasing software complexity.

A protocol constant called **max sequencer drift** governs the maximum timestamp a block can have within its epoch. Having this drift allows the sequencer to maintain liveness in case of temporary problems connecting to L1. Each L2 block‚Äôs timestamp fits within the following range:

```
l1_timestamp <= l2_block.timestamp <= max(l1_timestamp + max_sequencer_drift, l1_timestamp + l2_block_time)
```

#### Block derivation pipeline

The [canonical L2 chain](#protocol) can be processed from scratch by starting with the L2 genesis state, setting the L2 chain inception as the first epoch, and then processing all sequencing windows in order to determine the correct ordering of [sequencer batches](#optimized-data-compression) and [deposits](#deposits) according to the following simplified pipeline:

| **Stage** | **Notes** |
| --- | --- |
| Read from L1 | Epochs are defined by L1 blocks. Contained within an L2 block is data pertaining to [batcher transactions](#minimized-usage-of-ethereum-gas) or [deposits](#deposits) which must be included in the [canonical L2 chain](#protocol) |
| Buffer and decode into [channels](#optimized-data-compression) | The data from L1 blocks contains unordered [channel frames](#parallelized-batch-submission), which must all be collected before reconstructing them into channels. |
| Decompress [channels](#optimized-data-compression) into [batches](#optimized-data-compression) | Since [channels](#optimized-data-compression) are [compressed](#optimized-data-compression) to minimize data fee costs on the L1, they must be decompressed. |
| Queue [batches](#optimized-data-compression) into sequential order | With the latest information from L1, [batches](#optimized-data-compression) can be validated and processed sequentially. There are some nuances to what the correct ordering is in relation to [epochs](#guaranteed-inclusion-of-deposits) and timestamps from L2, see the full specification [here](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/derivation.md#batch-queue). |
| Interpret as L2 blocks | At this point, the correct ordering of [batches](#optimized-data-compression) can be determined.<br><br>Following this, the [execution client](#execution-client) can interpret them into L2 blocks. For implementation details pertaining to [execution clients](#execution-client), see the [engine queue](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/derivation.md#engine-queue) section of the protocol specifications. |

### Fault Proofs

After a sequencer processes one or more L2 blocks, the outputs computed from executing transactions in those blocks will need to be written with L1 for trustless execution of L2-to-L1 messaging, such as [withdrawals](#withdrawals).

In Bedrock, outputs are hashed in a tree-structured form which minimizes the cost of proving any piece of data captured by the outputs. Proposers periodically submit **output roots** that are Merkle roots of the entire [canonical L2 chain](#protocol) to the L1.

Future upgrades of the OP Stack should include a specification for a variation of a fault proof with bonding included to create incentives for proposers to propose correct output roots.

For full details, read the [L2 Output Root Proposals section](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/proposals.md#l2-output-root-proposals-specification) of the protocol specifications.

## Implementation

With Bedrock, the OP Stack leans heavily into the technical separation of concerns specified by Ethereum by mirroring the separation between the Ethereum execution layer and consensus layer. Bedrock introduces separation of execution client and rollup node in this same way.

### Execution Client

An **execution client** is the system that sequencers and other kinds of node operators run to determine the state of the [canonical L2 chain](#protocol). It also performs other functions such as processing inbound transactions and communicating them peer-to-peer, and handling the state of the system to process queries against it.

With Bedrock, the OP Stack is designed to reuse [Ethereum‚Äôs own execution client specifications](https://github.com/ethereum/execution-specs) and its many implementations. In this release, Bedrock has demonstrated an extremely limited modification of go-ethereum, the most popular Ethereum client written in Go, to a [diff of less than 2000 lines of code](https://op-geth.optimism.io/).

There are two fundamental reasons for having any diff at all: handling deposited transactions, and charging transaction fees.

#### Handling deposited transactions

To represent [deposited transactions](#arbitrary-message-passing-from-l1) in the rollup, there is an additional transaction type introduced. The [execution client](#execution-client) implements this [new transaction type](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#the-deposited-transaction-type) according to the [EIP-2718 typed transactions](https://eips.ethereum.org/EIPS/eip-2718) standard.

#### Charging transaction fees

Rollups also fundamentally have two kinds of fees associated with transactions:

**Sequencer fees**

The cost of operating a sequencer is computed using the same gas table as Ethereum and with the same [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) algorithm. These fees go to the protocol for operating sequencers and fluctuate based on the congestion of the network.

**Data availability fees**

Data availability costs are associated with writing [batcher transactions](#minimized-usage-of-ethereum-gas) to the L1. These fees are intended to cover the cost that sequencers need to pay to submit [batcher transactions](#minimized-usage-of-ethereum-gas) to the L1.

In Bedrock, the data availability portion of the fee is determined based on information in a system contract on the rollup called a [GasPriceOracle](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/predeploys.md#gaspriceoracle). This contract is updated during [block derivation](#block-derivation) from the gas pricing information retrieved from the L1 block attributes that get inserted at the beginning of every [epoch](#guaranteed-inclusion-of-deposits).

Bedrock specifies that both of these fees are added up into a single `gasPrice` field when using the JSON-RPC.

### Rollup Node

Unlike Ethereum, Bedrock does not have proof-of-stake consensus. Instead, the consensus of the [canonical L2 chain](#protocol) is defined by [block derivation](#block-derivation). An [execution client](#execution-client) of the OP Stack communicates to a new component that implements [block derivation](#block-derivation) called a **rollup node**. This node communicates to the [execution client](#execution-client) using the exact same [Engine API](https://github.com/ethereum/execution-apis/tree/main/src/engine) that Ethereum uses.

The [rollup node](#rollup-node) is a stateless component responsible for deriving the state of the system by reading data and [deposits](#deposits) on the L1. In Bedrock, a [rollup node](#rollup-node) can either be used to sequence incoming transactions from users or other [rollup nodes](#rollup-node) or to verify confirmed transactions posted on the L1 by singularly relying on the L1.

The multiple uses of a rollup node are outlined below.

#### Verifying the canonical L2 chain

The simplest mode of running a [rollup node](#rollup-node) is to only follow the [canonical L2 chain](#protocol). In this mode, the [rollup node](#rollup-node) has no peers and is strictly used to read data from the L1 and to interpret it according to [block derivation](#block-derivation) protocol rules.

One purpose of this kind of node is to verify that any output roots shared by other nodes or posted on the L1 are correct according to protocol definition. Additionally, proposers intending to submit output roots to the L1 themselves can generate the output roots they need using the [optimism_outputAtBlock](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/rollup-node.md#l2-output-rpc-method) of the node which returns a 32-byte hash corresponding to the L2 output root.

For this purpose, nodes should only need to follow the finalized head. The term [""finalized""](https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/#finality) refers to the Ethereum proof-of-stake consensus (i.e. canonical and practically irreversible) ‚Äî the finalized L2 head is the head of the [canonical L2 chain](#protocol) that is derived only from finalized L1 blocks.

#### Participating in the L2 network

The most common way to use a [rollup node](#rollup-node) is to participate in a network of other [rollup nodes](#rollup-node) tracking the progression and state of an L2. In this mode, a [rollup node](#rollup-node) is both reading the data and [deposits](#deposits) it observes from the L1 and interpreting it as blocks and accepting inbound transactions from users and peers in a network of other [rollup nodes](#rollup-node).

Nodes participating in the network may make use of the safe and unsafe heads of the L2 they're syncing.

- The **safe L2 head** represents the rollup that can be constructed where every block up to and including the head can be fully derived from the reference L1 chain, before L1 has necessarily finalized (i.e., a re-org may occur on L1 still).
- The **unsafe L2 head** includes [unsafe blocks](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/glossary.md#unsafe-l2-block) that have not yet been derived from L1. These blocks either come from operating the [rollup node](#rollup-node) as a sequencer or from [unsafe sync](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/glossary.md#unsafe-sync) with the sequencer. This is also known as the ""latest"" head. The safe L2 head is always chosen over the unsafe L2 head in cases of disagreements. When disagreements occur, the unsafe portion of the chain will reorg.

For most purposes, nodes in the L2 network will refer to the unsafe L2 head for end-user applications.

#### Sequencing transactions

The third way to use a [rollup node](#rollup-node) is to sequence transactions. In this mode, a [rollup node](#rollup-node) will _create_ new blocks on top of the unsafe L2 head. Currently, there is only one sequencer per OP Stack network.

The sequencer is also responsible for posting batches to L1 for other nodes in the network to sync from.

### Batcher

The role of a sequencer is to produce [batches](#batches). To do this, a sequencer can run [rollup nodes](#rollup-node) and have separate processes which perform [batching](#batches) by reading from a trusted [rollup node](#rollup-node) they run. This warrants an additional component of the OP Stack called a [batcher](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/glossary.md#batcher) that reads transaction data from a [rollup node](#rollup-node) and interprets it into [batcher transactions](#minimized-usage-of-ethereum-gas) to be written to the L1. The batcher component is responsible for reading the unsafe L2 head of a [rollup node](#rollup-node) run by a sequencer, creating batcher transactions, and writing them to the L1.

### Standard Bridge Contracts

Bedrock also includes a pair of bridge contracts used for the most common kinds of [deposits](#deposits) called the [standard bridges](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/bridges.md#standard-bridges). These contracts wrap the [deposit](#deposits) and [withdrawal](#withdrawals) contracts to provide simple interfaces for [depositing](#deposits) and [withdrawing](#withdrawals) ETH and ERC-20 tokens.

These bridges are designed to involve a native token on one side of the bridge, and a wrapped token on the other side that can manage minting and burning. Bridging a native token involves locking the native token in a contract and then minting an equivalent amount of mintable token on the other side of the bridge.

For full details, see the [standard bridge](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/bridges.md#standard-bridges) section of the protocol specifications.

### Cannon

Although fault proof construction and verification is implemented in the [Cannon](https://github.com/ethereum-optimism/cannon) project, the fault proof game specification and integration of an output root challenger into the rollup node are part of later specification milestones.

## Further Reading

### Protocol Specification

The protocol specification defines the technical details of the OP Stack. It is the most up-to-date source of truth for the inner workings of the protocol. The protocol specification is located in [the Optimism monorepo](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/README.md).

### Bedrock Differences

For a deep dive into the differences between Bedrock and previous versions of the protocol, see the [How is Bedrock Different?](./how-is-bedrock-different.md) page.

"
ethereum-optimism/community-hub,bedrock.md,developers/bedrock/bedrock.md,"---
title: Bedrock Differences
lang: en-US
---

Bedrock is the latest major release of OP Mainnet.
Here are the major changes:

## Guide by persona

If you want to jump directly to the parts relevant to your job role, here are the parts we think will be most useful

<details>
<summary>Wallet developer</summary>

As a wallet developer you are most likely to interact with the JSON RPC, and your users want to know how much their transactions are going to cost.
Timing may also be relevant.

- [EIP-1559](#eip-1559)
- [JSON-RPC](#json-rpc)
- [Block Production](#block-production)

</details>

<details>
<summary>Dapp frontend developer</summary>

As an application developer you are probably interested in the fact Bedrock has a mempool and the changes in transaction fees. 
You might also be interested in changes in the RPC interface and block timing.

- [EIP-1559](#eip-1559)
- [Mempool](#mempool)
- [JSON-RPC](#json-rpc)
- [Block Production](#block-production)


</details>

<details>
<summary>Dapp backend (protocol) developer</summary>

As an application developer you are probably interested in the fact Bedrock has a mempool and the changes in transaction fees. 
You might also be interested in changes in the RPC interface and block timing.

- [EIP-1559](#eip-1559)
- [Mempool](#mempool)
- [JSON-RPC](#json-rpc)
- [Block Production](#block-production)

</details>

<details>
<summary>Infrastructure provider (or anybody else running a node)</summary>

To run a node you need to understand the executables required to run it. 
You might also be interested in the existence of the mempool and the changes in block timing, fees, and the JSON RPC.

- [Mempool](#mempool)
- [Block Production](#block-production)
- [Historical Data](#historical-data)
- [JSON-RPC](#json-rpc)
- [Chain Reorganizations](#chain-reorganizations)

[See here for a more detailed guide](./node-operator-guide.md) on how to run a Bedrock node.

</details>

<details>
<summary>Bridge developer</summary>

As a bridge developer you are likely most interested in deposits into OP Mainnet and withdrawals back into Ethereum L1.

- [Two-Phase Withdrawals](#two-phase-withdrawals)
- [Deposits](#deposits-from-the-underlying-l1-ethereum-goerli-etc-to-l2-op-mainnet-op-goerli-etc)

</details>

## The EVM

### Block Production

:::warning Block Time Subject to Change

Currently blocks are produced every two seconds.
However, that value may change in the future.

:::

Unlike the legacy network which mines a block for every incoming transaction, the Bedrock network will produce new blocks every two seconds. This introduces the following changes to the EVM:

- `TIMESTAMP` will return the timestamp of the block. It will update every two seconds.
- `BLOCKNUMBER` will return an actual block number. It will update every two seconds. The one-to-one mapping between blocks and transactions will no longer apply.

The Bedrock upgrade also introduces the concept of _system transactions_. System transactions are created by the `op-node`, and are used to execute deposits and update the L2's view of L1. They have the following attributes:

- Every block will contain at least one system transaction called the [L1 attributes deposited transaction](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#l1-attributes-deposited-transaction). It will always be the first transaction in the block.
- Some blocks will contain one or more [user-deposited transactions](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#user-deposited-transactions).
- All system transactions have an [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)-compatible transaction type of `0x7E`.
- All system transactions are unsigned, and set their `v`, `r`, and `s` fields to `null`.

For more information about these transactions, see the [deposited transactions specification](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md) on GitHub.

:::warning Known Issue
Some Ethereum client libraries, such as Web3j, cannot parse the `null` signature fields described above. To work around this issue, you will need to manually filter out the system transactions before passing them to the library. 
:::

### EIP-1559

As part of the Bedrock upgrade, we have upgraded the network to support [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559). In EIP-1559 the cost of a unit of gas is composed of two components:

- **Base fee**: This fee is the same for all transactions in a block. It varies between blocks based on the difference between the actual size of the blocks (which depends on the demand for block space) and the target block size. When the block uses more gas than the target block size the base fee goes up to discourage demand. When the block uses less gas than the target block size the base fee goes down to encourage demand.
- **Priority fee**: This fee is specified in the transaction itself and varies between transactions. Block proposers are expected to select the transactions that offer them the highest priority fees first.

There are some differences between Ethereum and OP Mainnet in this regard:

- ETH is not burned. Burning ETH on L2 would only lock it in the bridge forever.
- Some EIP 1559 parameters are different:

  | Parameter | OP Mainnet value | Ethereum value (for reference) |
  | - | -: | -: |
  | Block gas limit | 30,000,000 gas | 30,000,000 gas
  | Block gas target | 5,000,000 gas | 15,000,000 gas
  | EIP-1559 elasticity multiplier | 6 | 2
  | EIP-1559 denominator | 50 | 8
  | Maximum base fee increase (per block) | 10% | 12.5%
  | Maximum base fee decrease (per block) | 2% | 12.5%
  | Block time in seconds | 2 | 12

The L1 security fee, which is the majority of the transaction cost, uses the same mechanism as before the upgrade. However, the transactions to L1 are going to be submitted on a [non-contract address](#the-transaction-trail). Between that and improved compression, the L1 security fee should be reduced by about 20%.

From an application development perspective, EIP-1559 introduces the following changes:

- The `BASEFEE` opcode is now supported. The `BASEFEE` opcodes returns the base fee of the current block.
- The `eth_maxPriorityFeePerGas` and `eth_feeHistory` RPC methods are now supported. `eth_maxPriorityFeePerGas` returns a fee per gas that is an estimate of how much you can pay as a priority fee, or 'tip', to get a transaction included in the current block. `eth_feeHistory` returns a collection of historical gas information from which you can decide what to submit as your `maxFeePerGas` and/or `maxPriorityFeePerGas`.

### Removed Opcodes

One of the design goals of the Bedrock upgrade is to be maximally EVM equivalent. To reduce differences between OP Mainnet's EVM and vanilla Ethereum's EVM, we have removed the `L1BLOCKNUMBER` opcode.

### ETH Balances

The previous version of the system used an ERC20 contract called `OVM_ETH` to represent ETH balances. These balances will be migrated into the Bedrock network's state as part of the migration. To preserve backwards compatibility, the methods on the `OVM_ETH` contract will continue to work. Note, however, that the `totalSupply()` method will return zero. 

## Chain Reorganizations

Unlike the legacy network, Bedrock nodes _always_ derive blocks from L1. This means that if L1 experiences a reorg, L2 will reorganize itself to match the state of L1. Blocks that have not been submitted to L1 yet are gossipped via a peer-to-peer network, and can be reorganized if the data on L1 does not match the data gossiped over P2P.

Bedrock adopts the same vocabulary as the Beacon Chain to describe block finality. Blocks can be in one of the following states:

- `unsafe`, meaning that the block has been received via gossip but has not yet been submitted to L1. Unsafe blocks can be reorged if L1 reorgs, or the sequencer reorgs.
- `safe`, meaning that the block has been submitted to L1. Safe blocks can also be reorged if L1 reorgs.
- `finalized`, meaning that the block has reached sufficient depth to be considered final. Finalized blocks cannot be reorged.

The current `safe`, `unsafe`, and `finalized` blocks can be queried via [JSON-RPC](#json-rpc).

## Historical Data

Bedrock nodes can serve pre-Bedrock block bodies, transactions, and receipts out of the box. However, you will need to run a Legacy Geth instance to serve historical execution traces. See the [Node Operator Guide](./node-operator-guide.md) for more information about how to do this.

Note that the following legacy fields have been removed from pre-Bedrock JSON-RPC transaction responses:

- `queueOrigin`
- `l1TxOrigin`
- `l1BlockNumber`
- `l1Timestamp`
- `index`
- `queueIndex`
- `rawTransaction`

If your application needs these fields, query Legacy Geth instead of `op-geth`.

## JSON-RPC

Bedrock supports all of the standard JSON-RPC methods exposed by go-ethereum. In order to reduce differences between Bedrock and vanilla Ethereum, some legacy methods have been removed. These methods and their replacements are:

- `eth_getBlockRange`: Use `eth_getBlockByNumber` in a batch request instead.
- `rollup_getInfo`: None of the information returned by this method exists on Bedrock, so there is no replacement for this method.
- `rollup_gasPrices`: Use [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice) instead for the L2 gas price. 
  For the L1 gas price, you can call the [`GasPriceOracle`'s `l1BaseFee` function](https://explorer.optimism.io/address/0x420000000000000000000000000000000000000F#readContract#F5).
  If you want to estimate the cost of a transaction, you can [use the SDK](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas).
  
To query `op-node`'s sync status, use the `optimism_syncStatus` RPC method. This method will return the current `safe`, `unsafe`, and `finalized` as seen by the `op-node`.

## Mempool

Since the legacy network creates a block for every transaction, it processes new transactions in a first-come-first-serve manner. Bedrock, however, creates blocks on a fixed interval and therefore needs a mempool to store pending transactions until they are included in a block. To minimize MEV, Bedrock's mempool is private. To submit transactions, you will need to configure `op-geth` to forward transactions to the sequencer. This may change in the future.

The sequencer processes transactions in the mempool in order of their base and priority fees.

## Two-Phase Withdrawals

On the legacy network, funds are withdrawn as follows:

1. Users send a withdrawal message.
2. Users wait seven days for the withdrawal to be finalized.
3. Users post a withdrawal proof on L1, and claim their funds.

However, this introduces a security risk. If the withdrawal proof can be successfully forged, an attacker could withdraw funds from the bridge that they are not authorized to. This kind of attack has been exploited before - a fraudulent proof led to the loss of [$100M on Binance Smart Chain](https://www.nansen.ai/research/bnb-chains-cross-chain-bridge-exploit-explained).

To eliminate this risk, Bedrock requires users to post their withdrawal proofs upfront. Users must wait for a valid output root to be proposed so that the withdrawal proof can be validated onchain. Once the seven-day waiting period has expired, users can then finalize the withdrawal and claim their funds. The updated withdrawal flow is as follows:

1. Users send a withdrawal message.
2. Users wait for a state output to be proposed onchain. This can take up to an hour.
3. Users call `proveWithdrawalTransaction()` on the `OptimismPortal` to post and validate their proof.
4. Users wait for the withdrawal to be finalized. This takes seven days on mainnet.
5. Users call `finalizeWithdrawal()` on the `OptimismPortal` to claim their funds.

Visualized, this flow looks like this:

<div style=""text-align: center"">


![](../../../assets/docs/bedrock/two-phase-withdrawals.png)


</div>

By posting the proof upfront, it gives onchain monitoring tools enough time to detect a fraudulent withdrawal proof and attempt corrective action. 
Regular users can do this monitoring too. For example, an exchange could halt withdrawals in the event of a fraudulent proof.

Since this change fundamentally changes the way withdrawals are handled, it is **not** backwards-compatible with the old network. If you are performing withdrawals outside our standard bridge interface, you will need to update your software. The easiest way to to do this is to use our [TypeScript SDK](https://github.com/ethereum-optimism/optimism/tree/65ec61dde94ffa93342728d324fecf474d228e1f/packages/sdk), which includes two-phase withdrawals support out of the box.

For more information on two-phase withdrawals, see the withdrawals specification on [GitHub](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/withdrawals.md).

## Deposit Replayability

:::warning Breaking Change
The changes described in this section are **not** backwards-compatible with the old network. Please read this section carefully. 
:::

On the legacy network, deposits are replayable. This is no longer the case in Bedrock. Additionally, as part of the migration, all deposits on the legacy network that have not been replayed will no longer be replayable. **This means that if you have not replayed your deposit, you must do so before the migration.** This affects fewer than 100 transactions of the nearly 40 million on mainnet.

## Contracts

### L1 contracts

#### L2OutputOracle

[The `L2OutputOracle` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L2OutputOracle.sol) contains the state root of the Optimism blockchain (OP Mainnet, OP Goerli, etc.).
Once fault proofs are activated, it will be the one that receives the result of the fault proof process.

This is the contract that replaces the old State Commitment Chain.

#### OptimismPortal

[The `OptimismPortal` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol) provides [the low-level API for communications between layers](#deposits-from-the-underlying-l1-ethereum-goerli-etc-to-l2-op-mainnet-op-goerli-etc). Unless you are trying to send L2 transactions via L1 to bypass the sequencer, we strongly recommend sending messages between L1 and L2 via the L1CrossDomainMessenger and L2CrossDomainMessenger.


#### Existing interface

These contracts provide the same interface as existed pre-Bedrock so dapps don‚Äôt have to be modified to run on Bedrock.



- [L1CrossDomainMessenger](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1CrossDomainMessenger.sol):
  The `L1CrossDomainMessenger` contract is used for sending messages between the underlying L1 (Ethereum, Goerli, etc.) and L2 (OP Mainnet, OP Goerli, etc.). Those messages may or may not have assets attached to them.
- [L1StandardBridge](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol):
  The `L1StandardBridge` contract uses `L1CrossDomainMessenger` to transfer ETH and ERC-20 tokens between the underlying L1 (Ethereum, Goerli, etc.) and L2 (OP Mainnet, OP Goerli, etc.).




### L2 contracts (predeploys)


#### L1Block

[The `L1Block` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L1Block.sol) sits at address `0x4200000000000000000000000000000000000015`.
You can use [the getter functions](https://docs.soliditylang.org/en/v0.8.12/contracts.html#getter-functions) to get these parameters:

- `number`: The latest L1 block number known to L2 (the `L1BlockNumber` contract is still supported to avoid breaking existing applications)
- `timestamp`: The timestamp of the latest L1 block
- `basefee`: The base fee of the latest L1 block
- `hash`: The hash of the latest L1 block
- `sequenceNumber`: The number of the L2 block within the epoch (the epoch changes when there is a new L1 block)

Currently the L1 information is delayed by two block confirmations (~24 seconds) to minimize the impact of reorgs.

#### SequencerFeeVault

[The `SequencerFeeVault` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/SequencerFeeVault.sol) handles funding the sequencer on L1 using the ETH base fee on L2.

The fees are calculated using [EIP 1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md), the same mechanism that Ethereum uses (but with different parameter values).


#### L2ToL1MessagePasser

[The `L2ToL1MessagePasser` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol) is used internally by `L2CrossDomainMessenger` to initiate withdrawals.

Note that in Bedrock there are two contracts:

- [The legacy contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/LegacyMessagePasser.sol) at address `0x4200000000000000000000000000000000000000`
- [The new contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol) at address `0x4200000000000000000000000000000000000016`


#### Existing interface

These contracts provide the same interface as existed pre-Bedrock so dapps don‚Äôt have to be modified to run on Bedrock.


- [L1BlockNumber](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/L1BlockNumber.sol): 
  The `L1BlockNumber` contract provides the number of the latest L1 block. 
  In Bedrock it is simply a proxy to [`L1Block`](#l1block). 
- [L2CrossDomainMessenger](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2CrossDomainMessenger.sol):
  The `L2CrossDomainMessenger` contract is used to send messages from L2 (OP Mainnet, OP Goerli, etc.) to the underlying L1 (Ethereum, Goerli, etc.).
- [L2StandardBridge](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2StandardBridge.sol):
  The `L2StandardBridge` contract is used to ""attach"" assets (ETH and ERC-20 tokens) to messages that are then sent by `L2CrossDomainMessenger`.
- [WETH9](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/vendor/WETH9.sol): 
  [The WETH9 contract](https://web.archive.org/web/20221022164309/https://weth.io/) is an ERC-20 token that wraps around ETH to provide extra functionality, such as approvals.


#### Historical contracts

These are contracts that are no longer relevant, but are kept as part of the state in case there is a call in any dapp that uses them.


- [DeployerWhitelist](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/DeployerWhitelist.sol):
  The `DeployerWhitelist` contract used to manage the whitelist before [OP Mainnet moved out of beta](https://twitter.com/optimismFND/status/1471571415774023682).

- [OVM_ETH](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/LegacyERC20ETH.sol):
  The `OVM_ETH` contract used to manage users ETH balances prior to Bedrock.

## Communication between layers

In Optimism terminology ""deposit"" refers to any message going from the underlying L1 blockchain to L2, whether it has any assets attached or not.
Similarly, ""withdrawal"" refers to any message going from L2 to the underlying L1.

[See here for the messenger specs](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/messengers.md) and [here for the bridge specs](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/bridges.md).


<!--
### Gas cost changes

The gas costs for communication between layers are going to change, they will probably get lower. 
More information will be posted here once we have more exact information after we profile a test network.

-->

<!-- TODO get the figures and put them here -->

### Deposits from the underlying L1 (Ethereum, Goerli, etc.) to L2 (OP Mainnet, OP Goerli, etc.)

To create a deposit we recommend that you use the pre-Bedrock contracts [`L1StandardBridge`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol) and [`L1CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1CrossDomainMessenger.sol) also has low-level deposit functionality.

With the OptimismPortal‚Äôs `depositTransaction` function you can do from L1 anything you can do by contacting L2 directly: send transactions, send payments, create contracts, etc.
This provides an uncensorable alternative in case the sequencer is down. 
Even though the sequencer is down, verifiers (nodes that synchronize the Optimism state from L1) are still going to receive such transactions and modify the state accordingly. 
When the sequencer is back up it has to process the transactions in the same order to have a valid state.


We recommend adding a 50% buffer to whatever is returned by `estimateGas` to ensure that your deposit will not run out of gas (Note: the Optimism SDK already does this under the hood). For example, if you wish to send a deposit of ETH, you might call `eth_estimateGas` and see that the deposit is expected to consume `100,000 gas`. You should then multiply that estimated about by `1.5` and then send your transaction with a `gasLimit` of at least `150,000 gas`.


:::tip
In order to prevent Optimism networks from being DOSed via forced L1 to L2 transactions that bypass the Sequencer, a fee adjustment schedule to all L1‚ÜíL2 transactions that closely mimics EIP1559 is included with Bedrock. Like in the current network, deposit fees are paid by burning some amount of L1 gas proportional to your deposit's L2 gas limit. Unfortunately, this means that you may have cases where you estimate how much gas an L1‚ÜíL2 deposit will cost, and deposit fees increase by the time your transaction gets included in a block and executed, causing your deposit to run out of gas and revert. This is why we recommend adding a 50% buffer to your `gasLimit` to ensure your deposit will not run out of gas.
:::

Deposits that come from contracts still use [address aliasing](../build/differences.md#address-aliasing).

Deposits are faster, about a minute, because they only require five blocks for confirmation (and L1 blocks are usually 12 seconds apart).



[You can read the full deposit specifications here](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#the-deposited-transaction-type).

[You can read the full withdrawal specifications here](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/withdrawals.md)

## Behind the scenes

This section discusses some of the changes in Optimism internals.

### The transaction trail

There is no longer a CTC (canonical transaction chain) contract. Instead, L2 blocks are saved to the Ethereum blockchain using a non-contract address to minimize the L1 gas expenses. Please see the [Public Testnets](./public-testnets.md) page for more information on where to find batch submission addresses. 

[The block and transaction format is also different](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/rollup-node.md#derivation).

"
ethereum-optimism/community-hub,differences.md,developers/bedrock/differences.md,"---
title: Bedrock Differences
lang: en-US
---

Bedrock is the latest major release of OP Mainnet.
Here are the major changes:

## Guide by persona

If you want to jump directly to the parts relevant to your job role, here are the parts we think will be most useful

<details>
<summary>Wallet developer</summary>

As a wallet developer you are most likely to interact with the JSON RPC, and your users want to know how much their transactions are going to cost.
Timing may also be relevant.

- [EIP-1559](#eip-1559)
- [JSON-RPC](#json-rpc)
- [Block Production](#block-production)

</details>

<details>
<summary>Dapp frontend developer</summary>

As an application developer you are probably interested in the fact Bedrock has a mempool and the changes in transaction fees. 
You might also be interested in changes in the RPC interface and block timing.

- [EIP-1559](#eip-1559)
- [Mempool](#mempool)
- [JSON-RPC](#json-rpc)
- [Block Production](#block-production)


</details>

<details>
<summary>Dapp backend (protocol) developer</summary>

As an application developer you are probably interested in the fact Bedrock has a mempool and the changes in transaction fees. 
You might also be interested in changes in the RPC interface and block timing.

- [EIP-1559](#eip-1559)
- [Mempool](#mempool)
- [JSON-RPC](#json-rpc)
- [Block Production](#block-production)

</details>

<details>
<summary>Infrastructure provider (or anybody else running a node)</summary>

To run a node you need to understand the executables required to run it. 
You might also be interested in the existence of the mempool and the changes in block timing, fees, and the JSON RPC.

- [Mempool](#mempool)
- [Block Production](#block-production)
- [Historical Data](#historical-data)
- [JSON-RPC](#json-rpc)
- [Chain Reorganizations](#chain-reorganizations)

[See here for a more detailed guide](./node-operator-guide.md) on how to run a Bedrock node.

</details>

<details>
<summary>Bridge developer</summary>

As a bridge developer you are likely most interested in deposits into OP Mainnet and withdrawals back into Ethereum L1.

- [Two-Phase Withdrawals](#two-phase-withdrawals)
- [Deposits](#deposits-from-the-underlying-l1-ethereum-goerli-etc-to-l2-op-mainnet-op-goerli-etc)

</details>

## The EVM

### Block Production

:::warning Block Time Subject to Change

Currently blocks are produced every two seconds.
However, that value may change in the future.

:::

Unlike the legacy network which mines a block for every incoming transaction, the Bedrock network will produce new blocks every two seconds. This introduces the following changes to the EVM:

- `TIMESTAMP` will return the timestamp of the block. It will update every two seconds.
- `BLOCKNUMBER` will return an actual block number. It will update every two seconds. The one-to-one mapping between blocks and transactions will no longer apply.

The Bedrock upgrade also introduces the concept of _system transactions_. System transactions are created by the `op-node`, and are used to execute deposits and update the L2's view of L1. They have the following attributes:

- Every block will contain at least one system transaction called the [L1 attributes deposited transaction](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#l1-attributes-deposited-transaction). It will always be the first transaction in the block.
- Some blocks will contain one or more [user-deposited transactions](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#user-deposited-transactions).
- All system transactions have an [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)-compatible transaction type of `0x7E`.
- All system transactions are unsigned, and set their `v`, `r`, and `s` fields to `null`.

For more information about these transactions, see the [deposited transactions specification](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md) on GitHub.

:::warning Known Issue
Some Ethereum client libraries, such as Web3j, cannot parse the `null` signature fields described above. To work around this issue, you will need to manually filter out the system transactions before passing them to the library. 
:::

### EIP-1559

As part of the Bedrock upgrade, we have upgraded the network to support [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559). In EIP-1559 the cost of a unit of gas is composed of two components:

- **Base fee**: This fee is the same for all transactions in a block. It varies between blocks based on the difference between the actual size of the blocks (which depends on the demand for block space) and the target block size. When the block uses more gas than the target block size the base fee goes up to discourage demand. When the block uses less gas than the target block size the base fee goes down to encourage demand.
- **Priority fee**: This fee is specified in the transaction itself and varies between transactions. Block proposers are expected to select the transactions that offer them the highest priority fees first.

There are some differences between Ethereum and OP Mainnet in this regard:

- ETH is not burned. Burning ETH on L2 would only lock it in the bridge forever.
- Some EIP 1559 parameters are different:

  | Parameter | OP Mainnet value | Ethereum value (for reference) |
  | - | -: | -: |
  | Block gas limit | 30,000,000 gas | 30,000,000 gas
  | Block gas target | 5,000,000 gas | 15,000,000 gas
  | EIP-1559 elasticity multiplier | 6 | 2
  | EIP-1559 denominator | 50 | 8
  | Maximum base fee increase (per block) | 10% | 12.5%
  | Maximum base fee decrease (per block) | 2% | 12.5%
  | Block time in seconds | 2 | 12

The L1 security fee, which is the majority of the transaction cost, uses the same mechanism as before the upgrade. However, the transactions to L1 are going to be submitted on a [non-contract address](#the-transaction-trail). Between that and improved compression, the L1 security fee should be reduced by about 20%.

From an application development perspective, EIP-1559 introduces the following changes:

- The `BASEFEE` opcode is now supported. The `BASEFEE` opcodes returns the base fee of the current block.
- The `eth_maxPriorityFeePerGas` and `eth_feeHistory` RPC methods are now supported. `eth_maxPriorityFeePerGas` returns a fee per gas that is an estimate of how much you can pay as a priority fee, or 'tip', to get a transaction included in the current block. `eth_feeHistory` returns a collection of historical gas information from which you can decide what to submit as your `maxFeePerGas` and/or `maxPriorityFeePerGas`.

### Removed Opcodes

One of the design goals of the Bedrock upgrade is to be maximally EVM equivalent. To reduce differences between OP Mainnet's EVM and vanilla Ethereum's EVM, we have removed the `L1BLOCKNUMBER` opcode.

### ETH Balances

The previous version of the system used an ERC20 contract called `OVM_ETH` to represent ETH balances. These balances will be migrated into the Bedrock network's state as part of the migration. To preserve backwards compatibility, the methods on the `OVM_ETH` contract will continue to work. Note, however, that the `totalSupply()` method will return zero. 

## Chain Reorganizations

Unlike the legacy network, Bedrock nodes _always_ derive blocks from L1. This means that if L1 experiences a reorg, L2 will reorganize itself to match the state of L1. Blocks that have not been submitted to L1 yet are gossipped via a peer-to-peer network, and can be reorganized if the data on L1 does not match the data gossiped over P2P.

Bedrock adopts the same vocabulary as the Beacon Chain to describe block finality. Blocks can be in one of the following states:

- `unsafe`, meaning that the block has been received via gossip but has not yet been submitted to L1. Unsafe blocks can be reorged if L1 reorgs, or the sequencer reorgs.
- `safe`, meaning that the block has been submitted to L1. Safe blocks can also be reorged if L1 reorgs.
- `finalized`, meaning that the block has reached sufficient depth to be considered final. Finalized blocks cannot be reorged.

The current `safe`, `unsafe`, and `finalized` blocks can be queried via [JSON-RPC](#json-rpc).

## Historical Data

Bedrock nodes can serve pre-Bedrock block bodies, transactions, and receipts out of the box. However, you will need to run a Legacy Geth instance to serve historical execution traces. See the [Node Operator Guide](./node-operator-guide.md) for more information about how to do this.

Note that the following legacy fields have been removed from pre-Bedrock JSON-RPC transaction responses:

- `queueOrigin`
- `l1TxOrigin`
- `l1BlockNumber`
- `l1Timestamp`
- `index`
- `queueIndex`
- `rawTransaction`

If your application needs these fields, query Legacy Geth instead of `op-geth`.

## JSON-RPC

Bedrock supports all of the standard JSON-RPC methods exposed by go-ethereum. In order to reduce differences between Bedrock and vanilla Ethereum, some legacy methods have been removed. These methods and their replacements are:

- `eth_getBlockRange`: Use `eth_getBlockByNumber` in a batch request instead.
- `rollup_getInfo`: None of the information returned by this method exists on Bedrock, so there is no replacement for this method.
- `rollup_gasPrices`: Use [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice) instead for the L2 gas price. 
  For the L1 gas price, you can call the [`GasPriceOracle`'s `l1BaseFee` function](https://explorer.optimism.io/address/0x420000000000000000000000000000000000000F#readContract#F5).
  If you want to estimate the cost of a transaction, you can [use the SDK](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas).
  
To query `op-node`'s sync status, use the `optimism_syncStatus` RPC method. This method will return the current `safe`, `unsafe`, and `finalized` as seen by the `op-node`.

## Mempool

Since the legacy network creates a block for every transaction, it processes new transactions in a first-come-first-serve manner. Bedrock, however, creates blocks on a fixed interval and therefore needs a mempool to store pending transactions until they are included in a block. To minimize MEV, Bedrock's mempool is private. To submit transactions, you will need to configure `op-geth` to forward transactions to the sequencer. This may change in the future.

The sequencer processes transactions in the mempool in order of their base and priority fees.

## Two-Phase Withdrawals

On the legacy network, funds are withdrawn as follows:

1. Users send a withdrawal message.
2. Users wait seven days for the withdrawal to be finalized.
3. Users post a withdrawal proof on L1, and claim their funds.

However, this introduces a security risk. If the withdrawal proof can be successfully forged, an attacker could withdraw funds from the bridge that they are not authorized to. This kind of attack has been exploited before - a fraudulent proof led to the loss of [$100M on Binance Smart Chain](https://www.nansen.ai/research/bnb-chains-cross-chain-bridge-exploit-explained).

To eliminate this risk, Bedrock requires users to post their withdrawal proofs upfront. Users must wait for a valid output root to be proposed so that the withdrawal proof can be validated onchain. Once the seven-day waiting period has expired, users can then finalize the withdrawal and claim their funds. The updated withdrawal flow is as follows:

1. Users send a withdrawal message.
2. Users wait for a state output to be proposed onchain. This can take up to an hour.
3. Users call `proveWithdrawalTransaction()` on the `OptimismPortal` to post and validate their proof.
4. Users wait for the withdrawal to be finalized. This takes seven days on mainnet.
5. Users call `finalizeWithdrawal()` on the `OptimismPortal` to claim their funds.

Visualized, this flow looks like this:

<div style=""text-align: center"">


![](../../../assets/docs/bedrock/two-phase-withdrawals.png)


</div>

By posting the proof upfront, it gives onchain monitoring tools enough time to detect a fraudulent withdrawal proof and attempt corrective action. 
Regular users can do this monitoring too. For example, an exchange could halt withdrawals in the event of a fraudulent proof.

Since this change fundamentally changes the way withdrawals are handled, it is **not** backwards-compatible with the old network. If you are performing withdrawals outside our standard bridge interface, you will need to update your software. The easiest way to to do this is to use our [TypeScript SDK](https://github.com/ethereum-optimism/optimism/tree/65ec61dde94ffa93342728d324fecf474d228e1f/packages/sdk), which includes two-phase withdrawals support out of the box.

For more information on two-phase withdrawals, see the withdrawals specification on [GitHub](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/withdrawals.md).

## Deposit Replayability

:::warning Breaking Change
The changes described in this section are **not** backwards-compatible with the old network. Please read this section carefully. 
:::

On the legacy network, deposits are replayable. This is no longer the case in Bedrock. Additionally, as part of the migration, all deposits on the legacy network that have not been replayed will no longer be replayable. **This means that if you have not replayed your deposit, you must do so before the migration.** This affects fewer than 100 transactions of the nearly 40 million on mainnet.

## Contracts

### L1 contracts

#### L2OutputOracle

[The `L2OutputOracle` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L2OutputOracle.sol) contains the state root of the Optimism blockchain (OP Mainnet, OP Goerli, etc.).
Once fault proofs are activated, it will be the one that receives the result of the fault proof process.

This is the contract that replaces the old State Commitment Chain.

#### OptimismPortal

[The `OptimismPortal` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol) provides [the low-level API for communications between layers](#deposits-from-the-underlying-l1-ethereum-goerli-etc-to-l2-op-mainnet-op-goerli-etc). Unless you are trying to send L2 transactions via L1 to bypass the sequencer, we strongly recommend sending messages between L1 and L2 via the L1CrossDomainMessenger and L2CrossDomainMessenger.


#### Existing interface

These contracts provide the same interface as existed pre-Bedrock so dapps don‚Äôt have to be modified to run on Bedrock.



- [L1CrossDomainMessenger](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1CrossDomainMessenger.sol):
  The `L1CrossDomainMessenger` contract is used for sending messages between the underlying L1 (Ethereum, Goerli, etc.) and L2 (OP Mainnet, OP Goerli, etc.). Those messages may or may not have assets attached to them.
- [L1StandardBridge](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol):
  The `L1StandardBridge` contract uses `L1CrossDomainMessenger` to transfer ETH and ERC-20 tokens between the underlying L1 (Ethereum, Goerli, etc.) and L2 (OP Mainnet, OP Goerli, etc.).




### L2 contracts (predeploys)


#### L1Block

[The `L1Block` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L1Block.sol) sits at address `0x4200000000000000000000000000000000000015`.
You can use [the getter functions](https://docs.soliditylang.org/en/v0.8.12/contracts.html#getter-functions) to get these parameters:

- `number`: The latest L1 block number known to L2 (the `L1BlockNumber` contract is still supported to avoid breaking existing applications)
- `timestamp`: The timestamp of the latest L1 block
- `basefee`: The base fee of the latest L1 block
- `hash`: The hash of the latest L1 block
- `sequenceNumber`: The number of the L2 block within the epoch (the epoch changes when there is a new L1 block)

Currently the L1 information is delayed by two block confirmations (~24 seconds) to minimize the impact of reorgs.

#### SequencerFeeVault

[The `SequencerFeeVault` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/SequencerFeeVault.sol) handles funding the sequencer on L1 using the ETH base fee on L2.

The fees are calculated using [EIP 1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md), the same mechanism that Ethereum uses (but with different parameter values).


#### L2ToL1MessagePasser

[The `L2ToL1MessagePasser` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol) is used internally by `L2CrossDomainMessenger` to initiate withdrawals.

Note that in Bedrock there are two contracts:

- [The legacy contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/LegacyMessagePasser.sol) at address `0x4200000000000000000000000000000000000000`
- [The new contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol) at address `0x4200000000000000000000000000000000000016`


#### Existing interface

These contracts provide the same interface as existed pre-Bedrock so dapps don‚Äôt have to be modified to run on Bedrock.


- [L1BlockNumber](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/L1BlockNumber.sol): 
  The `L1BlockNumber` contract provides the number of the latest L1 block. 
  In Bedrock it is simply a proxy to [`L1Block`](#l1block). 
- [L2CrossDomainMessenger](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2CrossDomainMessenger.sol):
  The `L2CrossDomainMessenger` contract is used to send messages from L2 (OP Mainnet, OP Goerli, etc.) to the underlying L1 (Ethereum, Goerli, etc.).
- [L2StandardBridge](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2StandardBridge.sol):
  The `L2StandardBridge` contract is used to ""attach"" assets (ETH and ERC-20 tokens) to messages that are then sent by `L2CrossDomainMessenger`.
- [WETH9](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/vendor/WETH9.sol): 
  [The WETH9 contract](https://web.archive.org/web/20221022164309/https://weth.io/) is an ERC-20 token that wraps around ETH to provide extra functionality, such as approvals.


#### Historical contracts

These are contracts that are no longer relevant, but are kept as part of the state in case there is a call in any dapp that uses them.


- [DeployerWhitelist](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/DeployerWhitelist.sol):
  The `DeployerWhitelist` contract used to manage the whitelist before [OP Mainnet moved out of beta](https://twitter.com/optimismFND/status/1471571415774023682).

- [OVM_ETH](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/LegacyERC20ETH.sol):
  The `OVM_ETH` contract used to manage users ETH balances prior to Bedrock.

## Communication between layers

In Optimism terminology ""deposit"" refers to any message going from the underlying L1 blockchain to L2, whether it has any assets attached or not.
Similarly, ""withdrawal"" refers to any message going from L2 to the underlying L1.

[See here for the messenger specs](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/messengers.md) and [here for the bridge specs](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/bridges.md).


<!--
### Gas cost changes

The gas costs for communication between layers are going to change, they will probably get lower. 
More information will be posted here once we have more exact information after we profile a test network.

-->

<!-- TODO get the figures and put them here -->

### Deposits from the underlying L1 (Ethereum, Goerli, etc.) to L2 (OP Mainnet, OP Goerli, etc.)

To create a deposit we recommend that you use the pre-Bedrock contracts [`L1StandardBridge`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol) and [`L1CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1CrossDomainMessenger.sol) also has low-level deposit functionality.

With the OptimismPortal‚Äôs `depositTransaction` function you can do from L1 anything you can do by contacting L2 directly: send transactions, send payments, create contracts, etc.
This provides an uncensorable alternative in case the sequencer is down. 
Even though the sequencer is down, verifiers (nodes that synchronize the Optimism state from L1) are still going to receive such transactions and modify the state accordingly. 
When the sequencer is back up it has to process the transactions in the same order to have a valid state.


We recommend adding a 50% buffer to whatever is returned by `estimateGas` to ensure that your deposit will not run out of gas (Note: the Optimism SDK already does this under the hood). For example, if you wish to send a deposit of ETH, you might call `eth_estimateGas` and see that the deposit is expected to consume `100,000 gas`. You should then multiply that estimated about by `1.5` and then send your transaction with a `gasLimit` of at least `150,000 gas`.


:::tip
In order to prevent Optimism networks from being DOSed via forced L1 to L2 transactions that bypass the Sequencer, a fee adjustment schedule to all L1‚ÜíL2 transactions that closely mimics EIP1559 is included with Bedrock. Like in the current network, deposit fees are paid by burning some amount of L1 gas proportional to your deposit's L2 gas limit. Unfortunately, this means that you may have cases where you estimate how much gas an L1‚ÜíL2 deposit will cost, and deposit fees increase by the time your transaction gets included in a block and executed, causing your deposit to run out of gas and revert. This is why we recommend adding a 50% buffer to your `gasLimit` to ensure your deposit will not run out of gas.
:::

Deposits that come from contracts still use [address aliasing](../build/differences.md#address-aliasing).

Deposits are faster, about a minute, because they only require five blocks for confirmation (and L1 blocks are usually 12 seconds apart).



[You can read the full deposit specifications here](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#the-deposited-transaction-type).

[You can read the full withdrawal specifications here](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/withdrawals.md)

## Behind the scenes

This section discusses some of the changes in Optimism internals.

### The transaction trail

There is no longer a CTC (canonical transaction chain) contract. Instead, L2 blocks are saved to the Ethereum blockchain using a non-contract address to minimize the L1 gas expenses. Please see the [Public Testnets](./public-testnets.md) page for more information on where to find batch submission addresses. 

[The block and transaction format is also different](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/rollup-node.md#derivation).

"
ethereum-optimism/community-hub,explainer.md,developers/bedrock/explainer.md,"---
title: Bedrock Explainer 
lang: en-US
meta:
    - name: og:image
      content: https://dev.optimism.io/content/images/size/w2000/2022/12/bedrock-BLUE.jpg
---

![Bedrock](https://dev.optimism.io/content/images/size/w2000/2022/12/bedrock-BLUE.jpg)

Bedrock is the name of the first ever official release of the OP Stack, which is a set of free and open-source modular components that work together to power blockchains such as OP Mainnet.

- To understand what is in the Bedrock release, keep reading.
- To develop on OP Mainnet, which upgraded its infrastructure to the Bedrock release, read the docs.
- To contribute to the OP Stack, see the contribution guidelines on the Optimism monorepo.

## Summary of Improvements

Bedrock improves on its predecessor by reducing transaction fees using optimized batch [compression](#optimized-data-compression) and Ethereum as a data availability layer; shortening delays of including L1 transactions in rollups by handling L1 re-orgs more gracefully; enabling modular proof systems through code re-use; and improving node performance by removing technical debt.

### Lower fees

In addition, Bedrock implements an optimized data [compression](#optimized-data-compression) strategy to minimize data costs. We are currently benchmarking the impact of this change, but we expect it to reduce fees significantly.

Bedrock also removes all L1 execution gas, reducing L1 data fees to the theoretical minimum. This reduces fees by an additional 10% over the previous version of the protocol.

### Shorter deposit times

Bedrock introduces support for L1 re-orgs in the node software, which significantly reduces the amount of time users need to wait for deposits. Earlier versions of the protocol could take up to 10 minutes to confirm deposits. With Bedrock, we expect deposits to confirm within 3 minutes.

### Improved proof modularity

Bedrock abstracts the proof system from the OP Stack so that a rollup may use either a fault proof or validity proof (e.g., a zk-SNARK) to prove correct execution of inputs on the rollup. This abstraction enables systems like [Cannon](https://github.com/ethereum-optimism/cannon) to be used to prove faults in the system.

### Improved node performance

The node software performance has been significantly improved by enabling execution of several transactions in a single rollup ""block"" as opposed to the prior ""one transaction per block"" model in the previous version. This allows the cost of merkle trie updates to be amortized across multiple transactions. At current transaction volume, this reduces state growth by approximately 15GB/year.

Node performance is further improved by removing technical debt from the previous version of the protocol. This includes removing the need for a separate ""data transport layer"" node to index L1, and updating the node software to efficiently query for transaction data from L1.

### Improved Ethereum equivalence

Bedrock was designed from the ground up to be as close to Ethereum as possible. Multiple deviations from Ethereum in the previous version of the protocol have been removed, including:

1. The one-transaction-per-block model.
2. Custom opcodes to get L1 block information.
3. Separate L1/L2 fee fields in the JSON-RPC API.
4. A custom ERC20 representation of ETH balances.

Bedrock also adds support for EIP-1559, chain re-orgs, and other Ethereum features present on L1.

## Design Principles

Bedrock was built to be modular & upgradeable, to reuse existing code from Ethereum, and to be as close to 100% Ethereum-equivalent as possible.

### Modularity

Bedrock makes it easy to swap out different components in the OP Stack and add new capabilities by using well-defined interfaces and versioning schemes. This allows for a flexible architecture that can adapt to future developments in the Ethereum ecosystem.

Examples:
- Separation of [rollup node](#rollup-node) and execution client
- Modular fault proof design

### Code re-use

Bedrock uses existing Ethereum architecture and infrastructure as much as possible. This approach enables the OP Stack to inherit security and ""lindy"" benefits from the battle-tested codebases used in production on Ethereum Mainnet. You'll find examples of this throughout the design including:

Examples:
- [Minimally modified execution clients](https://op-geth.optimism.io/)
- EVM contracts instead of precompiled client code

### Ethereum equivalence

Bedrock is designed to have maximum compatibility with the existing Ethereum developer experience. A few exceptions exist due to fundamental differences between an L1 and a rollup: an altered fee model, faster block time (2s vs 12s), and a special transaction type for including L1 [deposit](#deposits) transactions.

Examples:
- Fault proof designed to prove faults of minimally modified Ethereum [execution client](#execution-client)
- Code re-use of Ethereum [execution client](#execution-client) for use by nodes in the L2 network and sequencers

## Protocol

Rollups are derived from a data availability source (generally an L1 blockchain like Ethereum). In their most common configuration, rollup protocols derive a  **""canonical L2 chain""** from two primary sources of information:

1. Transaction data posted by Sequencers to the L1 and;
2. [Deposit](#deposits) transactions posted by accounts and contracts to a bridge contract on L1.

The following are the fundamental components of the protocol:

* Deposits are _writes_ to the canonical L2 chain by directly interacting with smart contracts on the L1.
* Withdrawals are _writes_ to the canonical L2 chain that implicitly trigger interactions with contracts and accounts on the L1.
* Batches are _writes_ of data corresponding to batches on the rollup.
* Block derivation is how _reads_ of data on the L1 are interpreted to understand the canonical L2 chain.
* Proof systems define _finality_ of posted output roots on the L1 such that they may be _executed_ upon (e.g., to execute withdrawals).

### Deposits

A **deposit** is a transaction on L1 that is to be included in the rollup. [Deposits](#deposits) are _guaranteed_ by definition to be included in the [canonical L2 chain](#protocol) as a means of preventing censorship or control of the L2.

#### Arbitrary message passing from L1

A **deposited transaction** is the transaction on the rollup that is made as a part of a [deposit](#deposits). With Bedrock, [deposits](#deposits) are fully generalized Ethereum transactions. For example, an account or contract on Ethereum can ‚Äúdeposit‚Äù a contract creation.

Bedrock defines a **deposit contract** that is available on the L1: it is a smart contract that L1 accounts and contracts can interact with to write to the L2. [Deposited transactions](#arbitrary-message-passing-from-l1) on the L2 are derived from the values in the event(s) emitted by this [deposit](#deposits) contract, which include expected parameters such as from, to, and data.

For full details, see the [deposit contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#deposit-contract) section of the protocol specifications.

#### Purchasing guaranteed L2 gas on L1

Bedrock also specifies a gas burn mechanism and a fee market for [deposits](#deposits). The gas that [deposited transactions](#arbitrary-message-passing-from-l1) spend on an L2 is bought on L1 via a gas burn. This gas is purchased on a fee market and there is a hard cap on the amount of gas provided to all [deposits](#deposits) in a single L1 block. This mechanism is used to prevent denial of service attacks that could occur by writing transactions to L2 from L1 that are extremely gas-intensive on L2, but cheap on L1.

The gas provided to [deposited transactions](#arbitrary-message-passing-from-l1) is sometimes called ""guaranteed gas."" Guaranteed gas is unique in that it is paid for by burning gas on L1 and is therefore not refundable.The total amount of L1 gas that must be burned per unit of guaranteed L2 gas requested depends on the price of L2 gas reported by a EIP-1559 style fee mechanism. Furthermore, users receive a dynamic gas stipend based on the amount of L1 gas spent to compute updates to the fee mechanism.

For a deeper explanation, read the [deposits section](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#deposits) of the protocol specifications.

### Withdrawals

**Withdrawals** are cross-domain transactions that are initiated on L2 and finalized by a transaction executed on L1. Notably, withdrawals may be used by an L2 account to call an L1 contract, or to transfer ETH from an L2 account to an L1 account.

Withdrawals are initiated on L2 via a call to the **Message Passer** predeploy contract, which records the important properties of the message in its storage. Withdrawals are finalized on L1 via a call to the [OptimismPortal](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/withdrawals.md#the-optimism-portal-contract) contract, which proves the inclusion of this withdrawal message. In this way, withdrawals are different from [deposits](#deposits). Instead of relying on [block derivation](#block-derivation), withdrawal transactions must use smart contracts on L1 for finalization.

#### Two-step withdrawals

Withdrawal proof validation bugs have been the root cause of many of the biggest bridge hacks of the last few years. The Bedrock release introduces an additional step in the withdrawals‚Äô process of prior versions meant to provide an extra layer of defense against these types of bugs. In the two-step withdrawal process, a Merkle proof corresponding to the withdrawal must be submitted 7 days before the withdrawal can be finalized. This new safety mechanism gives monitoring tools a full 7 days to find and detect invalid withdrawal proofs. If the [withdrawal](#withdrawals) proof is found to be invalid, a contract fix can be deployed before funds are lost. This dramatically reduces the risk of a bridge compromise.

For full details, see the [withdrawals](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/withdrawals.md) section of the protocol specification.

### Batches

In Bedrock, a wire format is defined for messaging between the L1 and L2 (i.e., for L2 deriving blocks from L1 and for L2 to write transactions to the L1). This wire format is designed to minimize costs and software complexity for writing to the L1.

#### Optimized data compression

To optimize data compression, lists of L2 transactions called **sequencer batches** are organized into groups of objects called **channels**, each of which have a maximum size that is defined in a [configurable parameter](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/derivation.md#channel-format) that will initially be set to ~9.5Mb. These [channels](#optimized-data-compression) are expected to be compressed using a compression function and submitted to the L1.

#### Parallelized batch submission

To parallelize messages from the sequencers that are submitting [compressed](#optimized-data-compression) [channel](#optimized-data-compression) data to the L1, [channels](#optimized-data-compression) are further broken down into **channel frames**, which are chunks of [compressed](#optimized-data-compression) [channel](#optimized-data-compression) data that can fit inside of a single L1 transaction. Given [channel frames](#parallelized-batch-submission) are mutually independent and the ordering is known, the Ethereum transactions sent by the sequencer to the L1 can be sent in parallel which minimizes sequencer software complexity and allows for filling up all available space for data on the L1.

#### Minimized usage of Ethereum gas

Bedrock removes all execution gas used by the L1 system from submitting [channel](#optimized-data-compression) data to the L1 in transactions called **batcher transactions**. All validation logic that was previously happening on smart contracts on the L1 is moved into the [block derivation](#block-derivation) logic.  Instead, [batcher transactions](#minimized-usage-of-ethereum-gas) are sent to a single EOA on Ethereum referred to as the **batch inbox address**.

Batches are still subject to validity checks (i.e. they have to be encoded correctly), and so are individual transactions within the batch (e.g. signatures have to be valid). Invalid [batches](#optimized-data-compression) and invalid individual transactions within an otherwise valid batch are considered to be discarded and irrelevant to the system.

> Note: Ethereum will soon upgrade to include [EIP-4844](https://eip4844.com/), which introduces a separate fee market for writing data and an increased cap of the amount of data the Ethereum protocol is willing to store. This change is expected to further decrease the costs associated with posting data to an L1.

For a deeper explanation, read [the wire format specifications](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/derivation.md#overview).

### Block Derivation

In Bedrock, the protocol is designed to guarantee that the timing of [deposits](#deposits) on the L1 is respected with regards to the [block derivation](#block-derivation) of the [canonical L2 chain](#protocol). Doing so is a _pure function_ of data written to the L1 by sequencers, [deposits](#deposits), and L1 block attributes. To accomplish this, the protocol defines strategies for guaranteeing inclusion of deposits, handling L1 and L2 timestamps, and processing sequencing windows in a pipeline to ensure correct ordering.

#### Guaranteed inclusion of deposits

A goal of the [block derivation](#block-derivation) protocol is to define it such that there must be an L2 block every ""L2 block time"" number of seconds, and that the timestamp of L2 blocks stays in sync with the timestamps of L1 (i.e., to ensure [deposits](#deposits) are included in a logical temporal order).

In Bedrock, the concept of a **sequencing epoch** is introduced: it is a range of L2 blocks derived from a range of L1 blocks. Each [epoch](#guaranteed-inclusion-of-deposits) is identified by an **epoch number**, which is equal to the block number of the first L1 block in the sequencing window. Epochs can vary in size, subject to some constraints.

The batch derivation pipeline treats the timestamps of the L1 blocks associated with [epoch number](#guaranteed-inclusion-of-deposits) as the anchor point for determining the order of transactions on the L2. The protocol guarantees that the first L2 block of an [epoch](#guaranteed-inclusion-of-deposits) never falls behind the timestamp of the L1 block matching the [epoch](#guaranteed-inclusion-of-deposits). The first blocks of an epoch _must_ contain deposits on L1 in order to guarantee that deposits will be processed.

Note that the target configuration for the block time on L2 in the Bedrock release is 2 seconds.

#### Handling L1 and L2 timestamps

Bedrock attempts to address the problem of reconciling the timestamps on L2 with timestamps on L1 present in [deposited transactions](#arbitrary-message-passing-from-l1). It does this by allowing a short window of time for sequencing to liberally apply timestamps on L2 transactions between [epochs](#guaranteed-inclusion-of-deposits).

A **sequencing window** is a sequence of L1 blocks from which an [epoch](#guaranteed-inclusion-of-deposits) can be derived. A [sequencing window](#handling-l1-and-l2-timestamps) whose first L1 block has the number `N` contains [batcher transactions](#minimized-usage-of-ethereum-gas) for [epoch](#guaranteed-inclusion-of-deposits) `N`.

The [sequencing window](#handling-l1-and-l2-timestamps) contains blocks `[N, N + SWS)` where `SWS` is the **sequencer window size**: a fixed rollup-level configuration parameter. This parameter must be at least 2. Increasing it provides more opportunity for sequencers to order L2 transactions with respect to [deposits](#deposits), and lowering it introduces stricter windows of time for sequencers to submit batcher transactions. It is a tradeoff between creating MEV opportunity and increasing software complexity.

A protocol constant called **max sequencer drift** governs the maximum timestamp a block can have within its epoch. Having this drift allows the sequencer to maintain liveness in case of temporary problems connecting to L1. Each L2 block‚Äôs timestamp fits within the following range:

```
l1_timestamp <= l2_block.timestamp <= max(l1_timestamp + max_sequencer_drift, l1_timestamp + l2_block_time)
```

#### Block derivation pipeline

The [canonical L2 chain](#protocol) can be processed from scratch by starting with the L2 genesis state, setting the L2 chain inception as the first epoch, and then processing all sequencing windows in order to determine the correct ordering of [sequencer batches](#optimized-data-compression) and [deposits](#deposits) according to the following simplified pipeline:

| **Stage** | **Notes** |
| --- | --- |
| Read from L1 | Epochs are defined by L1 blocks. Contained within an L2 block is data pertaining to [batcher transactions](#minimized-usage-of-ethereum-gas) or [deposits](#deposits) which must be included in the [canonical L2 chain](#protocol) |
| Buffer and decode into [channels](#optimized-data-compression) | The data from L1 blocks contains unordered [channel frames](#parallelized-batch-submission), which must all be collected before reconstructing them into channels. |
| Decompress [channels](#optimized-data-compression) into [batches](#optimized-data-compression) | Since [channels](#optimized-data-compression) are [compressed](#optimized-data-compression) to minimize data fee costs on the L1, they must be decompressed. |
| Queue [batches](#optimized-data-compression) into sequential order | With the latest information from L1, [batches](#optimized-data-compression) can be validated and processed sequentially. There are some nuances to what the correct ordering is in relation to [epochs](#guaranteed-inclusion-of-deposits) and timestamps from L2, see the full specification [here](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/derivation.md#batch-queue). |
| Interpret as L2 blocks | At this point, the correct ordering of [batches](#optimized-data-compression) can be determined.<br><br>Following this, the [execution client](#execution-client) can interpret them into L2 blocks. For implementation details pertaining to [execution clients](#execution-client), see the [engine queue](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/derivation.md#engine-queue) section of the protocol specifications. |

### Fault Proofs

After a sequencer processes one or more L2 blocks, the outputs computed from executing transactions in those blocks will need to be written with L1 for trustless execution of L2-to-L1 messaging, such as [withdrawals](#withdrawals).

In Bedrock, outputs are hashed in a tree-structured form which minimizes the cost of proving any piece of data captured by the outputs. Proposers periodically submit **output roots** that are Merkle roots of the entire [canonical L2 chain](#protocol) to the L1.

Future upgrades of the OP Stack should include a specification for a variation of a fault proof with bonding included to create incentives for proposers to propose correct output roots.

For full details, read the [L2 Output Root Proposals section](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/proposals.md#l2-output-root-proposals-specification) of the protocol specifications.

## Implementation

With Bedrock, the OP Stack leans heavily into the technical separation of concerns specified by Ethereum by mirroring the separation between the Ethereum execution layer and consensus layer. Bedrock introduces separation of execution client and rollup node in this same way.

### Execution Client

An **execution client** is the system that sequencers and other kinds of node operators run to determine the state of the [canonical L2 chain](#protocol). It also performs other functions such as processing inbound transactions and communicating them peer-to-peer, and handling the state of the system to process queries against it.

With Bedrock, the OP Stack is designed to reuse [Ethereum‚Äôs own execution client specifications](https://github.com/ethereum/execution-specs) and its many implementations. In this release, Bedrock has demonstrated an extremely limited modification of go-ethereum, the most popular Ethereum client written in Go, to a [diff of less than 2000 lines of code](https://op-geth.optimism.io/).

There are two fundamental reasons for having any diff at all: handling deposited transactions, and charging transaction fees.

#### Handling deposited transactions

To represent [deposited transactions](#arbitrary-message-passing-from-l1) in the rollup, there is an additional transaction type introduced. The [execution client](#execution-client) implements this [new transaction type](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#the-deposited-transaction-type) according to the [EIP-2718 typed transactions](https://eips.ethereum.org/EIPS/eip-2718) standard.

#### Charging transaction fees

Rollups also fundamentally have two kinds of fees associated with transactions:

**Sequencer fees**

The cost of operating a sequencer is computed using the same gas table as Ethereum and with the same [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) algorithm. These fees go to the protocol for operating sequencers and fluctuate based on the congestion of the network.

**Data availability fees**

Data availability costs are associated with writing [batcher transactions](#minimized-usage-of-ethereum-gas) to the L1. These fees are intended to cover the cost that sequencers need to pay to submit [batcher transactions](#minimized-usage-of-ethereum-gas) to the L1.

In Bedrock, the data availability portion of the fee is determined based on information in a system contract on the rollup called a [GasPriceOracle](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/predeploys.md#gaspriceoracle). This contract is updated during [block derivation](#block-derivation) from the gas pricing information retrieved from the L1 block attributes that get inserted at the beginning of every [epoch](#guaranteed-inclusion-of-deposits).

Bedrock specifies that both of these fees are added up into a single `gasPrice` field when using the JSON-RPC.

### Rollup Node

Unlike Ethereum, Bedrock does not have proof-of-stake consensus. Instead, the consensus of the [canonical L2 chain](#protocol) is defined by [block derivation](#block-derivation). An [execution client](#execution-client) of the OP Stack communicates to a new component that implements [block derivation](#block-derivation) called a **rollup node**. This node communicates to the [execution client](#execution-client) using the exact same [Engine API](https://github.com/ethereum/execution-apis/tree/main/src/engine) that Ethereum uses.

The [rollup node](#rollup-node) is a stateless component responsible for deriving the state of the system by reading data and [deposits](#deposits) on the L1. In Bedrock, a [rollup node](#rollup-node) can either be used to sequence incoming transactions from users or other [rollup nodes](#rollup-node) or to verify confirmed transactions posted on the L1 by singularly relying on the L1.

The multiple uses of a rollup node are outlined below.

#### Verifying the canonical L2 chain

The simplest mode of running a [rollup node](#rollup-node) is to only follow the [canonical L2 chain](#protocol). In this mode, the [rollup node](#rollup-node) has no peers and is strictly used to read data from the L1 and to interpret it according to [block derivation](#block-derivation) protocol rules.

One purpose of this kind of node is to verify that any output roots shared by other nodes or posted on the L1 are correct according to protocol definition. Additionally, proposers intending to submit output roots to the L1 themselves can generate the output roots they need using the [optimism_outputAtBlock](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/rollup-node.md#l2-output-rpc-method) of the node which returns a 32-byte hash corresponding to the L2 output root.

For this purpose, nodes should only need to follow the finalized head. The term [""finalized""](https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/#finality) refers to the Ethereum proof-of-stake consensus (i.e. canonical and practically irreversible) ‚Äî the finalized L2 head is the head of the [canonical L2 chain](#protocol) that is derived only from finalized L1 blocks.

#### Participating in the L2 network

The most common way to use a [rollup node](#rollup-node) is to participate in a network of other [rollup nodes](#rollup-node) tracking the progression and state of an L2. In this mode, a [rollup node](#rollup-node) is both reading the data and [deposits](#deposits) it observes from the L1 and interpreting it as blocks and accepting inbound transactions from users and peers in a network of other [rollup nodes](#rollup-node).

Nodes participating in the network may make use of the safe and unsafe heads of the L2 they're syncing.

- The **safe L2 head** represents the rollup that can be constructed where every block up to and including the head can be fully derived from the reference L1 chain, before L1 has necessarily finalized (i.e., a re-org may occur on L1 still).
- The **unsafe L2 head** includes [unsafe blocks](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/glossary.md#unsafe-l2-block) that have not yet been derived from L1. These blocks either come from operating the [rollup node](#rollup-node) as a sequencer or from [unsafe sync](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/glossary.md#unsafe-sync) with the sequencer. This is also known as the ""latest"" head. The safe L2 head is always chosen over the unsafe L2 head in cases of disagreements. When disagreements occur, the unsafe portion of the chain will reorg.

For most purposes, nodes in the L2 network will refer to the unsafe L2 head for end-user applications.

#### Sequencing transactions

The third way to use a [rollup node](#rollup-node) is to sequence transactions. In this mode, a [rollup node](#rollup-node) will _create_ new blocks on top of the unsafe L2 head. Currently, there is only one sequencer per OP Stack network.

The sequencer is also responsible for posting batches to L1 for other nodes in the network to sync from.

### Batcher

The role of a sequencer is to produce [batches](#batches). To do this, a sequencer can run [rollup nodes](#rollup-node) and have separate processes which perform [batching](#batches) by reading from a trusted [rollup node](#rollup-node) they run. This warrants an additional component of the OP Stack called a [batcher](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/glossary.md#batcher) that reads transaction data from a [rollup node](#rollup-node) and interprets it into [batcher transactions](#minimized-usage-of-ethereum-gas) to be written to the L1. The batcher component is responsible for reading the unsafe L2 head of a [rollup node](#rollup-node) run by a sequencer, creating batcher transactions, and writing them to the L1.

### Standard Bridge Contracts

Bedrock also includes a pair of bridge contracts used for the most common kinds of [deposits](#deposits) called the [standard bridges](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/bridges.md#standard-bridges). These contracts wrap the [deposit](#deposits) and [withdrawal](#withdrawals) contracts to provide simple interfaces for [depositing](#deposits) and [withdrawing](#withdrawals) ETH and ERC-20 tokens.

These bridges are designed to involve a native token on one side of the bridge, and a wrapped token on the other side that can manage minting and burning. Bridging a native token involves locking the native token in a contract and then minting an equivalent amount of mintable token on the other side of the bridge.

For full details, see the [standard bridge](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/bridges.md#standard-bridges) section of the protocol specifications.

### Cannon

Although fault proof construction and verification is implemented in the [Cannon](https://github.com/ethereum-optimism/cannon) project, the fault proof game specification and integration of an output root challenger into the rollup node are part of later specification milestones.

## Further Reading

### Protocol Specification

The protocol specification defines the technical details of the OP Stack. It is the most up-to-date source of truth for the inner workings of the protocol. The protocol specification is located in [the Optimism monorepo](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/README.md).

### Bedrock Differences

For a deep dive into the differences between Bedrock and previous versions of the protocol, see the [How is Bedrock Different?](./how-is-bedrock-different.md) page.

"
ethereum-optimism/community-hub,how-is-bedrock-different.md,developers/bedrock/how-is-bedrock-different.md,"---
title: Bedrock Differences
lang: en-US
---

Bedrock is the latest major release of OP Mainnet.
Here are the major changes:

## Guide by persona

If you want to jump directly to the parts relevant to your job role, here are the parts we think will be most useful

<details>
<summary>Wallet developer</summary>

As a wallet developer you are most likely to interact with the JSON RPC, and your users want to know how much their transactions are going to cost.
Timing may also be relevant.

- [EIP-1559](#eip-1559)
- [JSON-RPC](#json-rpc)
- [Block Production](#block-production)

</details>

<details>
<summary>Dapp frontend developer</summary>

As an application developer you are probably interested in the fact Bedrock has a mempool and the changes in transaction fees. 
You might also be interested in changes in the RPC interface and block timing.

- [EIP-1559](#eip-1559)
- [Mempool](#mempool)
- [JSON-RPC](#json-rpc)
- [Block Production](#block-production)


</details>

<details>
<summary>Dapp backend (protocol) developer</summary>

As an application developer you are probably interested in the fact Bedrock has a mempool and the changes in transaction fees. 
You might also be interested in changes in the RPC interface and block timing.

- [EIP-1559](#eip-1559)
- [Mempool](#mempool)
- [JSON-RPC](#json-rpc)
- [Block Production](#block-production)

</details>

<details>
<summary>Infrastructure provider (or anybody else running a node)</summary>

To run a node you need to understand the executables required to run it. 
You might also be interested in the existence of the mempool and the changes in block timing, fees, and the JSON RPC.

- [Mempool](#mempool)
- [Block Production](#block-production)
- [Historical Data](#historical-data)
- [JSON-RPC](#json-rpc)
- [Chain Reorganizations](#chain-reorganizations)

[See here for a more detailed guide](./node-operator-guide.md) on how to run a Bedrock node.

</details>

<details>
<summary>Bridge developer</summary>

As a bridge developer you are likely most interested in deposits into OP Mainnet and withdrawals back into Ethereum L1.

- [Two-Phase Withdrawals](#two-phase-withdrawals)
- [Deposits](#deposits-from-the-underlying-l1-ethereum-goerli-etc-to-l2-op-mainnet-op-goerli-etc)

</details>

## The EVM

### Block Production

:::warning Block Time Subject to Change

Currently blocks are produced every two seconds.
However, that value may change in the future.

:::

Unlike the legacy network which mines a block for every incoming transaction, the Bedrock network will produce new blocks every two seconds. This introduces the following changes to the EVM:

- `TIMESTAMP` will return the timestamp of the block. It will update every two seconds.
- `BLOCKNUMBER` will return an actual block number. It will update every two seconds. The one-to-one mapping between blocks and transactions will no longer apply.

The Bedrock upgrade also introduces the concept of _system transactions_. System transactions are created by the `op-node`, and are used to execute deposits and update the L2's view of L1. They have the following attributes:

- Every block will contain at least one system transaction called the [L1 attributes deposited transaction](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#l1-attributes-deposited-transaction). It will always be the first transaction in the block.
- Some blocks will contain one or more [user-deposited transactions](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#user-deposited-transactions).
- All system transactions have an [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)-compatible transaction type of `0x7E`.
- All system transactions are unsigned, and set their `v`, `r`, and `s` fields to `null`.

For more information about these transactions, see the [deposited transactions specification](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md) on GitHub.

:::warning Known Issue
Some Ethereum client libraries, such as Web3j, cannot parse the `null` signature fields described above. To work around this issue, you will need to manually filter out the system transactions before passing them to the library. 
:::

### EIP-1559

As part of the Bedrock upgrade, we have upgraded the network to support [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559). In EIP-1559 the cost of a unit of gas is composed of two components:

- **Base fee**: This fee is the same for all transactions in a block. It varies between blocks based on the difference between the actual size of the blocks (which depends on the demand for block space) and the target block size. When the block uses more gas than the target block size the base fee goes up to discourage demand. When the block uses less gas than the target block size the base fee goes down to encourage demand.
- **Priority fee**: This fee is specified in the transaction itself and varies between transactions. Block proposers are expected to select the transactions that offer them the highest priority fees first.

There are some differences between Ethereum and OP Mainnet in this regard:

- ETH is not burned. Burning ETH on L2 would only lock it in the bridge forever.
- Some EIP 1559 parameters are different:

  | Parameter | OP Mainnet value | Ethereum value (for reference) |
  | - | -: | -: |
  | Block gas limit | 30,000,000 gas | 30,000,000 gas
  | Block gas target | 5,000,000 gas | 15,000,000 gas
  | EIP-1559 elasticity multiplier | 6 | 2
  | EIP-1559 denominator | 50 | 8
  | Maximum base fee increase (per block) | 10% | 12.5%
  | Maximum base fee decrease (per block) | 2% | 12.5%
  | Block time in seconds | 2 | 12

The L1 security fee, which is the majority of the transaction cost, uses the same mechanism as before the upgrade. However, the transactions to L1 are going to be submitted on a [non-contract address](#the-transaction-trail). Between that and improved compression, the L1 security fee should be reduced by about 20%.

From an application development perspective, EIP-1559 introduces the following changes:

- The `BASEFEE` opcode is now supported. The `BASEFEE` opcodes returns the base fee of the current block.
- The `eth_maxPriorityFeePerGas` and `eth_feeHistory` RPC methods are now supported. `eth_maxPriorityFeePerGas` returns a fee per gas that is an estimate of how much you can pay as a priority fee, or 'tip', to get a transaction included in the current block. `eth_feeHistory` returns a collection of historical gas information from which you can decide what to submit as your `maxFeePerGas` and/or `maxPriorityFeePerGas`.

### Removed Opcodes

One of the design goals of the Bedrock upgrade is to be maximally EVM equivalent. To reduce differences between OP Mainnet's EVM and vanilla Ethereum's EVM, we have removed the `L1BLOCKNUMBER` opcode.

### ETH Balances

The previous version of the system used an ERC20 contract called `OVM_ETH` to represent ETH balances. These balances will be migrated into the Bedrock network's state as part of the migration. To preserve backwards compatibility, the methods on the `OVM_ETH` contract will continue to work. Note, however, that the `totalSupply()` method will return zero. 

## Chain Reorganizations

Unlike the legacy network, Bedrock nodes _always_ derive blocks from L1. This means that if L1 experiences a reorg, L2 will reorganize itself to match the state of L1. Blocks that have not been submitted to L1 yet are gossipped via a peer-to-peer network, and can be reorganized if the data on L1 does not match the data gossiped over P2P.

Bedrock adopts the same vocabulary as the Beacon Chain to describe block finality. Blocks can be in one of the following states:

- `unsafe`, meaning that the block has been received via gossip but has not yet been submitted to L1. Unsafe blocks can be reorged if L1 reorgs, or the sequencer reorgs.
- `safe`, meaning that the block has been submitted to L1. Safe blocks can also be reorged if L1 reorgs.
- `finalized`, meaning that the block has reached sufficient depth to be considered final. Finalized blocks cannot be reorged.

The current `safe`, `unsafe`, and `finalized` blocks can be queried via [JSON-RPC](#json-rpc).

## Historical Data

Bedrock nodes can serve pre-Bedrock block bodies, transactions, and receipts out of the box. However, you will need to run a Legacy Geth instance to serve historical execution traces. See the [Node Operator Guide](./node-operator-guide.md) for more information about how to do this.

Note that the following legacy fields have been removed from pre-Bedrock JSON-RPC transaction responses:

- `queueOrigin`
- `l1TxOrigin`
- `l1BlockNumber`
- `l1Timestamp`
- `index`
- `queueIndex`
- `rawTransaction`

If your application needs these fields, query Legacy Geth instead of `op-geth`.

## JSON-RPC

Bedrock supports all of the standard JSON-RPC methods exposed by go-ethereum. In order to reduce differences between Bedrock and vanilla Ethereum, some legacy methods have been removed. These methods and their replacements are:

- `eth_getBlockRange`: Use `eth_getBlockByNumber` in a batch request instead.
- `rollup_getInfo`: None of the information returned by this method exists on Bedrock, so there is no replacement for this method.
- `rollup_gasPrices`: Use [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice) instead for the L2 gas price. 
  For the L1 gas price, you can call the [`GasPriceOracle`'s `l1BaseFee` function](https://explorer.optimism.io/address/0x420000000000000000000000000000000000000F#readContract#F5).
  If you want to estimate the cost of a transaction, you can [use the SDK](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas).
  
To query `op-node`'s sync status, use the `optimism_syncStatus` RPC method. This method will return the current `safe`, `unsafe`, and `finalized` as seen by the `op-node`.

## Mempool

Since the legacy network creates a block for every transaction, it processes new transactions in a first-come-first-serve manner. Bedrock, however, creates blocks on a fixed interval and therefore needs a mempool to store pending transactions until they are included in a block. To minimize MEV, Bedrock's mempool is private. To submit transactions, you will need to configure `op-geth` to forward transactions to the sequencer. This may change in the future.

The sequencer processes transactions in the mempool in order of their base and priority fees.

## Two-Phase Withdrawals

On the legacy network, funds are withdrawn as follows:

1. Users send a withdrawal message.
2. Users wait seven days for the withdrawal to be finalized.
3. Users post a withdrawal proof on L1, and claim their funds.

However, this introduces a security risk. If the withdrawal proof can be successfully forged, an attacker could withdraw funds from the bridge that they are not authorized to. This kind of attack has been exploited before - a fraudulent proof led to the loss of [$100M on Binance Smart Chain](https://www.nansen.ai/research/bnb-chains-cross-chain-bridge-exploit-explained).

To eliminate this risk, Bedrock requires users to post their withdrawal proofs upfront. Users must wait for a valid output root to be proposed so that the withdrawal proof can be validated onchain. Once the seven-day waiting period has expired, users can then finalize the withdrawal and claim their funds. The updated withdrawal flow is as follows:

1. Users send a withdrawal message.
2. Users wait for a state output to be proposed onchain. This can take up to an hour.
3. Users call `proveWithdrawalTransaction()` on the `OptimismPortal` to post and validate their proof.
4. Users wait for the withdrawal to be finalized. This takes seven days on mainnet.
5. Users call `finalizeWithdrawal()` on the `OptimismPortal` to claim their funds.

Visualized, this flow looks like this:

<div style=""text-align: center"">


![](../../../assets/docs/bedrock/two-phase-withdrawals.png)


</div>

By posting the proof upfront, it gives onchain monitoring tools enough time to detect a fraudulent withdrawal proof and attempt corrective action. 
Regular users can do this monitoring too. For example, an exchange could halt withdrawals in the event of a fraudulent proof.

Since this change fundamentally changes the way withdrawals are handled, it is **not** backwards-compatible with the old network. If you are performing withdrawals outside our standard bridge interface, you will need to update your software. The easiest way to to do this is to use our [TypeScript SDK](https://github.com/ethereum-optimism/optimism/tree/65ec61dde94ffa93342728d324fecf474d228e1f/packages/sdk), which includes two-phase withdrawals support out of the box.

For more information on two-phase withdrawals, see the withdrawals specification on [GitHub](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/withdrawals.md).

## Deposit Replayability

:::warning Breaking Change
The changes described in this section are **not** backwards-compatible with the old network. Please read this section carefully. 
:::

On the legacy network, deposits are replayable. This is no longer the case in Bedrock. Additionally, as part of the migration, all deposits on the legacy network that have not been replayed will no longer be replayable. **This means that if you have not replayed your deposit, you must do so before the migration.** This affects fewer than 100 transactions of the nearly 40 million on mainnet.

## Contracts

### L1 contracts

#### L2OutputOracle

[The `L2OutputOracle` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L2OutputOracle.sol) contains the state root of the Optimism blockchain (OP Mainnet, OP Goerli, etc.).
Once fault proofs are activated, it will be the one that receives the result of the fault proof process.

This is the contract that replaces the old State Commitment Chain.

#### OptimismPortal

[The `OptimismPortal` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol) provides [the low-level API for communications between layers](#deposits-from-the-underlying-l1-ethereum-goerli-etc-to-l2-op-mainnet-op-goerli-etc). Unless you are trying to send L2 transactions via L1 to bypass the sequencer, we strongly recommend sending messages between L1 and L2 via the L1CrossDomainMessenger and L2CrossDomainMessenger.


#### Existing interface

These contracts provide the same interface as existed pre-Bedrock so dapps don‚Äôt have to be modified to run on Bedrock.



- [L1CrossDomainMessenger](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1CrossDomainMessenger.sol):
  The `L1CrossDomainMessenger` contract is used for sending messages between the underlying L1 (Ethereum, Goerli, etc.) and L2 (OP Mainnet, OP Goerli, etc.). Those messages may or may not have assets attached to them.
- [L1StandardBridge](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol):
  The `L1StandardBridge` contract uses `L1CrossDomainMessenger` to transfer ETH and ERC-20 tokens between the underlying L1 (Ethereum, Goerli, etc.) and L2 (OP Mainnet, OP Goerli, etc.).




### L2 contracts (predeploys)


#### L1Block

[The `L1Block` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L1Block.sol) sits at address `0x4200000000000000000000000000000000000015`.
You can use [the getter functions](https://docs.soliditylang.org/en/v0.8.12/contracts.html#getter-functions) to get these parameters:

- `number`: The latest L1 block number known to L2 (the `L1BlockNumber` contract is still supported to avoid breaking existing applications)
- `timestamp`: The timestamp of the latest L1 block
- `basefee`: The base fee of the latest L1 block
- `hash`: The hash of the latest L1 block
- `sequenceNumber`: The number of the L2 block within the epoch (the epoch changes when there is a new L1 block)

Currently the L1 information is delayed by two block confirmations (~24 seconds) to minimize the impact of reorgs.

#### SequencerFeeVault

[The `SequencerFeeVault` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/SequencerFeeVault.sol) handles funding the sequencer on L1 using the ETH base fee on L2.

The fees are calculated using [EIP 1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md), the same mechanism that Ethereum uses (but with different parameter values).


#### L2ToL1MessagePasser

[The `L2ToL1MessagePasser` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol) is used internally by `L2CrossDomainMessenger` to initiate withdrawals.

Note that in Bedrock there are two contracts:

- [The legacy contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/LegacyMessagePasser.sol) at address `0x4200000000000000000000000000000000000000`
- [The new contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol) at address `0x4200000000000000000000000000000000000016`


#### Existing interface

These contracts provide the same interface as existed pre-Bedrock so dapps don‚Äôt have to be modified to run on Bedrock.


- [L1BlockNumber](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/L1BlockNumber.sol): 
  The `L1BlockNumber` contract provides the number of the latest L1 block. 
  In Bedrock it is simply a proxy to [`L1Block`](#l1block). 
- [L2CrossDomainMessenger](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2CrossDomainMessenger.sol):
  The `L2CrossDomainMessenger` contract is used to send messages from L2 (OP Mainnet, OP Goerli, etc.) to the underlying L1 (Ethereum, Goerli, etc.).
- [L2StandardBridge](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2StandardBridge.sol):
  The `L2StandardBridge` contract is used to ""attach"" assets (ETH and ERC-20 tokens) to messages that are then sent by `L2CrossDomainMessenger`.
- [WETH9](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/vendor/WETH9.sol): 
  [The WETH9 contract](https://web.archive.org/web/20221022164309/https://weth.io/) is an ERC-20 token that wraps around ETH to provide extra functionality, such as approvals.


#### Historical contracts

These are contracts that are no longer relevant, but are kept as part of the state in case there is a call in any dapp that uses them.


- [DeployerWhitelist](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/DeployerWhitelist.sol):
  The `DeployerWhitelist` contract used to manage the whitelist before [OP Mainnet moved out of beta](https://twitter.com/optimismFND/status/1471571415774023682).

- [OVM_ETH](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/LegacyERC20ETH.sol):
  The `OVM_ETH` contract used to manage users ETH balances prior to Bedrock.

## Communication between layers

In Optimism terminology ""deposit"" refers to any message going from the underlying L1 blockchain to L2, whether it has any assets attached or not.
Similarly, ""withdrawal"" refers to any message going from L2 to the underlying L1.

[See here for the messenger specs](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/messengers.md) and [here for the bridge specs](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/bridges.md).


<!--
### Gas cost changes

The gas costs for communication between layers are going to change, they will probably get lower. 
More information will be posted here once we have more exact information after we profile a test network.

-->

<!-- TODO get the figures and put them here -->

### Deposits from the underlying L1 (Ethereum, Goerli, etc.) to L2 (OP Mainnet, OP Goerli, etc.)

To create a deposit we recommend that you use the pre-Bedrock contracts [`L1StandardBridge`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol) and [`L1CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1CrossDomainMessenger.sol) also has low-level deposit functionality.

With the OptimismPortal‚Äôs `depositTransaction` function you can do from L1 anything you can do by contacting L2 directly: send transactions, send payments, create contracts, etc.
This provides an uncensorable alternative in case the sequencer is down. 
Even though the sequencer is down, verifiers (nodes that synchronize the Optimism state from L1) are still going to receive such transactions and modify the state accordingly. 
When the sequencer is back up it has to process the transactions in the same order to have a valid state.


We recommend adding a 50% buffer to whatever is returned by `estimateGas` to ensure that your deposit will not run out of gas (Note: the Optimism SDK already does this under the hood). For example, if you wish to send a deposit of ETH, you might call `eth_estimateGas` and see that the deposit is expected to consume `100,000 gas`. You should then multiply that estimated about by `1.5` and then send your transaction with a `gasLimit` of at least `150,000 gas`.


:::tip
In order to prevent Optimism networks from being DOSed via forced L1 to L2 transactions that bypass the Sequencer, a fee adjustment schedule to all L1‚ÜíL2 transactions that closely mimics EIP1559 is included with Bedrock. Like in the current network, deposit fees are paid by burning some amount of L1 gas proportional to your deposit's L2 gas limit. Unfortunately, this means that you may have cases where you estimate how much gas an L1‚ÜíL2 deposit will cost, and deposit fees increase by the time your transaction gets included in a block and executed, causing your deposit to run out of gas and revert. This is why we recommend adding a 50% buffer to your `gasLimit` to ensure your deposit will not run out of gas.
:::

Deposits that come from contracts still use [address aliasing](../build/differences.md#address-aliasing).

Deposits are faster, about a minute, because they only require five blocks for confirmation (and L1 blocks are usually 12 seconds apart).



[You can read the full deposit specifications here](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#the-deposited-transaction-type).

[You can read the full withdrawal specifications here](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/withdrawals.md)

## Behind the scenes

This section discusses some of the changes in Optimism internals.

### The transaction trail

There is no longer a CTC (canonical transaction chain) contract. Instead, L2 blocks are saved to the Ethereum blockchain using a non-contract address to minimize the L1 gas expenses. Please see the [Public Testnets](./public-testnets.md) page for more information on where to find batch submission addresses. 

[The block and transaction format is also different](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/rollup-node.md#derivation).

"
ethereum-optimism/community-hub,metrics.md,developers/bedrock/metrics.md,"---
title: Metrics
lang: en-US
---

The Bedrock `op-node` exposes a variety of metrics to help observe the health of the system and debug issues. Metrics are formatted for use with Prometheus, and exposed via a metrics endpoint. The default metrics endpoint is `http://localhost:7300/metrics`.

To enable metrics, pass the `--metrics.enabled` flag to the `op-node`. You can customize the metrics port and address via the `--metrics.port` and `--metrics.addr` flags, respectively.

## Important Metrics

To monitor the health of your node, you should monitor the following metrics:
 
- `op_node_default_refs_number`: This metric represents the `op-node`'s current L1/L2 reference block number for different sync types. If it stops increasing, it means that the node is not syncing. If it goes backwards, it means your node is reorging.
- `op_node_default_peer_count`: This metric represents how many peers the `op-node` is connected to. Without peers, the `op-node` cannot sync unsafe blocks and your node will lag behind the sequencer as it will fall back to syncing purely from L1.
- `op_node_default_rpc_client_request_duration_seconds`: This metrics measures the latency of RPC requests initiated by the `op-node`. This metric is important when debugging sync performance, as it will reveal which specific RPC calls are slowing down sync. This metric exposes one timeseries per RPC method. The most important RPC methods to monitor are:
  - `engine_forkChoiceUpdatedV1`, `engine_getPayloadV1`, and `engine_newPayloadV1`: These methods are used to execute blocks on `op-geth`. If these methods are slow, it means that sync time is bottlenecked by either `op-geth` itself or your connection to it.
  - `eth_getBlockByHash`, `eth_getTransactionReceipt`, and `eth_getBlockByNumber`: These methods are used by the `op-node` to fetch transaction data from L1. If these methods are slow, it means that sync time is bottlenecked by your L1 RPC.

## Available Metrics

A complete list of available metrics is below:

|                       METRIC                        |                                           DESCRIPTION                                            |    LABELS    |   TYPE    |
|-----------------------------------------------------|--------------------------------------------------------------------------------------------------|--------------|-----------|
| op_node_default_info                                | Pseudo-metric tracking version and config info                                                   | version      | gauge     |
| op_node_default_up                                  | 1 if the op node has finished starting up                                                        |              | gauge     |
| op_node_default_rpc_server_requests_total           | Total requests to the RPC server                                                                 | method       | counter   |
| op_node_default_rpc_server_request_duration_seconds | Histogram of RPC server request durations                                                        | method       | histogram |
| op_node_default_rpc_client_requests_total           | Total RPC requests initiated by the opnode's RPC client                                          | method       | counter   |
| op_node_default_rpc_client_request_duration_seconds | Histogram of RPC client request durations                                                        | method       | histogram |
| op_node_default_rpc_client_responses_total          | Total RPC request responses received by the opnode's RPC client                                  | method,error | counter   |
| op_node_default_l1_source_cache_size                | L1 Source cache cache size                                                                       | type         | gauge     |
| op_node_default_l1_source_cache_get                 | L1 Source cache lookups, hitting or not                                                          | type,hit     | counter   |
| op_node_default_l1_source_cache_add                 | L1 Source cache additions, evicting previous values or not                                       | type,evicted | counter   |
| op_node_default_l2_source_cache_size                | L2 Source cache cache size                                                                       | type         | gauge     |
| op_node_default_l2_source_cache_get                 | L2 Source cache lookups, hitting or not                                                          | type,hit     | counter   |
| op_node_default_l2_source_cache_add                 | L2 Source cache additions, evicting previous values or not                                       | type,evicted | counter   |
| op_node_default_derivation_idle                     | 1 if the derivation pipeline is idle                                                             |              | gauge     |
| op_node_default_pipeline_resets_total               | Count of derivation pipeline resets events                                                       |              | counter   |
| op_node_default_last_pipeline_resets_unix           | Timestamp of last derivation pipeline resets event                                               |              | gauge     |
| op_node_default_unsafe_payloads_total               | Count of unsafe payloads events                                                                  |              | counter   |
| op_node_default_last_unsafe_payloads_unix           | Timestamp of last unsafe payloads event                                                          |              | gauge     |
| op_node_default_derivation_errors_total             | Count of derivation errors events                                                                |              | counter   |
| op_node_default_last_derivation_errors_unix         | Timestamp of last derivation errors event                                                        |              | gauge     |
| op_node_default_sequencing_errors_total             | Count of sequencing errors events                                                                |              | counter   |
| op_node_default_last_sequencing_errors_unix         | Timestamp of last sequencing errors event                                                        |              | gauge     |
| op_node_default_publishing_errors_total             | Count of p2p publishing errors events                                                            |              | counter   |
| op_node_default_last_publishing_errors_unix         | Timestamp of last p2p publishing errors event                                                    |              | gauge     |
| op_node_default_unsafe_payloads_buffer_len          | Number of buffered L2 unsafe payloads                                                            |              | gauge     |
| op_node_default_unsafe_payloads_buffer_mem_size     | Total estimated memory size of buffered L2 unsafe payloads                                       |              | gauge     |
| op_node_default_refs_number                         | Gauge representing the different L1/L2 reference block numbers                                   | layer,type   | gauge     |
| op_node_default_refs_time                           | Gauge representing the different L1/L2 reference block timestamps                                | layer,type   | gauge     |
| op_node_default_refs_hash                           | Gauge representing the different L1/L2 reference block hashes truncated to float values          | layer,type   | gauge     |
| op_node_default_refs_seqnr                          | Gauge representing the different L2 reference sequence numbers                                   | type         | gauge     |
| op_node_default_refs_latency                        | Gauge representing the different L1/L2 reference block timestamps minus current time, in seconds | layer,type   | gauge     |
| op_node_default_l1_reorg_depth                      | Histogram of L1 Reorg Depths                                                                     |              | histogram |
| op_node_default_transactions_sequenced_total        | Count of total transactions sequenced                                                            |              | gauge     |
| op_node_default_p2p_peer_count                      | Count of currently connected p2p peers                                                           |              | gauge     |
| op_node_default_p2p_stream_count                    | Count of currently connected p2p streams                                                         |              | gauge     |
| op_node_default_p2p_gossip_events_total             | Count of gossip events by type                                                                   | type         | counter   |
| op_node_default_p2p_bandwidth_bytes_total           | P2P bandwidth by direction                                                                       | direction    | gauge     |
| op_node_default_sequencer_building_diff_seconds     | Histogram of Sequencer building time, minus block time                                           |              | histogram |
| op_node_default_sequencer_building_diff_total       | Number of sequencer block building jobs                                                          |              | counter   |
| op_node_default_sequencer_sealing_seconds           | Histogram of Sequencer block sealing time                                                        |              | histogram |
| op_node_default_sequencer_sealing_total             | Number of sequencer block sealing jobs                                                           |              | counter   |

"
ethereum-optimism/community-hub,node-operator-guide.md,developers/bedrock/node-operator-guide.md,"---
title: Node Operator Guide
lang: en-US
---


This document provides an overview of how to deploy an OP node. To learn more about how Bedrock itself works and its motivations, please see [the specs on GitHub](https://github.com/ethereum-optimism/optimism/tree/65ec61dde94ffa93342728d324fecf474d228e1f/specs). If you want to skip ahead to building and running a node from source, please see [Building a Node from Source](../nodes/intro.md) 

## Deployment Overview

A Bedrock deployment consists of two core components: 

1. The Rollup Node, which is responsible for deriving blocks from L1 and passing them to the Execution engine. It also participates in a peer-to-peer network that synchronizes unsubmitted blocks as the sequencer creates them. We refer to this component as `op-node`.
2. The Execution Engine, which is responsible for executing the blocks it receives from the rollup node and storing state. It also exposes standard JSON-RPC methods to query blockchain data and submit transactions to the network. We refer to this component as `op-geth`, since our Execution Engine is [a minimal fork](https://op-geth.optimism.io/) of `go-ethereum`.

The Rollup Node and Execution Engine communicate with each other over JSON-RPC via the Engine API. This is similar to how regular Ethereum networks are deployed. The Rollup Node functions as Optimism's consensus client, and the Execution Engine as its execution client.

For OP Mainnet and OP Goerli (but not OP Sepolia), you may also need to run a third component called Legacy Geth. Legacy Geth is used to serve execution traces for transactions prior to the Bedrock upgrade, which we refer to as ""historical transactions"". When the Rollup Node encounters an RPC call that requires historical execution traces, it will forward the request to Legacy Geth. Note, however, that unlike our previous networks requests for historical _data_ will be served by the Execution Engine directly. This distinction will be clarified later on in this document.

The architecture of a typical Bedrock deployment looks like this:

<div style=""text-align: center"">
    <img width=""400"" src=""../../../assets/docs/bedrock/bedrock-deployment.png"">
</div>

## System Requirements

We recommend the following minimum system requirements to run Bedrock:

- `op-node`: Minimum 2CPUs, 4GB RAM. No storage is necessary.
- `op-geth`: Minimum 4 CPUs, 8GB RAM. At least 40GB of storage is required for OP Goerli or OP Sepolia. At least 600GB of storage is required for mainnet. Storage must be SSD. Requirements are significantly higher for archive nodes.

## Getting the Software

`op-geth` and `op-node` are available as Docker images. Consult the [documentation](./public-testnets.md) for the network you are participating in to get the correct image tag.

Legacy Geth uses version `0.5.31` of our old `l2geth` image.

You can also compile `op-geth` and `op-node` from source.

## Node Configuration

:::warning
Always run `op-node` and `op-geth` in a one-to-one configuration. Don't run multiple `op-geth` instances behind one `op-node`, or vice versa.
:::

To configure your node, you will need to do the following:

1. Configure `op-node` to point to the correct L1, `op-geth`, and L2 network.
2. Initialize `op-geth` with the correct network parameters.
3. Configure `op-geth` to properly communicate with the Rollup Node.
4. Optionally, configure Legacy Geth.

### Configuring op-geth

:::tip
Even though the Docker image for the Execution Engine is called `op-geth`, the actually binary is still called `geth` in order to minimize differences between `op-geth` and `go-ethereum`.
:::

We'll start with `op-geth`'s configuration because it is more complex. As mentioned before, `op-geth` is a minimal fork of `go-ethereum`. As a result, it stores its state in a database that requires initialization. Initialization is done one of two ways, depending on which network you're deploying:

1. **With a Genesis File:** This is for OP Sepolia, and other testnets or deployments that are not migrated from a legacy network. In this case, you'll download the [genesis file](https://networks.optimism.io/op-sepolia/genesis.json) and initialize the data directory via `geth init`.
2. **With a Data Directory:** This is used for networks that are migrated from a legacy network. This would include OP Mainnet and OP Goerli. In this case, you'll download a preconfigured data directory and extract it. No further initialization is necessary in this case, because the data directory contains the network's genesis information. 

Regardless of how `op-geth` is initialized, you'll need to ensure that you have sufficient disk space available to store the network's data. As of this writing, the mainnet data directory is ~100GB for a full node and ~1TB for an archival node. The OP Goerli data directory is ~40GB for a full node.

Instructions for each initialization method are below. If you're spinning up an OP Mainnet or OP Goerli node, use the [Initialization via Data Directory](#initialization-via-data-directory) path. If you're spinning up an OP Sepolia node, use the [Initialization via Genesis File](#initialization-via-genesis-file) path.

#### Initialization via Genesis File

`op-geth` uses JSON files to encode a network's genesis information. Unlike OP Mainnet and OP Goerli, the genesis for OP Sepolia is not currently included in the `op-geth` binary. For networks that are initialized in this way, you'll receive a URL to the genesis JSON. You'll need to download the genesis JSON, then run the following command to initialize the data directory:

```bash
#!/bin/sh
FILE=/$DATADIR/genesis.json
OP_GETH_GENESIS_URL=https://networks.optimism.io/op-sepolia/genesis.json

if [ ! -s $FILE ]; then
  apk add curl
  curl $OP_GETH_GENESIS_URL -o $FILE
  geth init --datadir /db $FILE
else
  echo ""Genesis file already exists. Skipping initialization.""
fi
```

::: danger OP Sepolia CLI Flag Requirements

- `op-node` requires: `--network=op-sepolia`
- `op-geth` requires: `--beta.op-network=op-sepolia`
- Do not set: `--rollup.historicalrpc` or `rollup.historicalrpctimeout`
:::

#### Initialization via Data Directory

To initialize `op-geth` with a preconfigured data directory, simply download and extract the data directory to a place of your choosing. The data directory is exported as a tar file. An example command to do this is below:

```bash
curl -o <path to data directory> -sL <URL to data directory>
tar -xvf <path to data directory>
```

#### Configuration

Once `op-geth` is initialized, it can be configured via CLI flags. `op-geth` accepts all the [standard `go-ethereum` flags](https://geth.ethereum.org/docs/interface/command-line-options) as well as a few extra flags that are specific to Optimism. These flags are:

- `--rollup.historicalrpc`: Enables the historical RPC endpoint. This endpoint is used to fetch historical execution data from Legacy Geth. This flag is only necessary for upgraded networks.
- `--rollup.sequencerhttp`: HTTP endpoint of the sequencer. `op-geth` will route `eth_sendRawTransaction` calls to this URL. Bedrock does not currently have a public mempool, so this is required if you want your node to support transaction submission. Consult the documentation for the network you are participating in to get the correct URL.
- `--rollup.disabletxpoolgossip`: Disables transaction pool gossiping. While not required, it's useful to set this to `true` since transaction pool gossip is currently unsupported.

To communicate with `op-node` and enable the Engine API, you'll also need to generate a JWT secret file and enable Geth's authenticated RPC endpoint.

To generate the JWT secret, run the following:

```bash
openssl rand -hex 32 > jwt.txt
```

Then, specify the following flags:

- `--authrpc.addr`: Sets the address `op-geth`'s authenticated RPC should listen on.
- `--authrpc.port`: Sets the port `op-geth`'s authenticated RPC should listen on. The default value is `8551`.
- `--authrpc.jwtsecret`: Sets the path to a JWT secret file you generated above.
- `--syncmode=full`: This prevents Geth from attempting to snap sync. Snap sync is currently unsupported, but will be enabled shortly after the mainnet upgrade.
- `--maxpeers=0`: This prevents Geth from peering with other Geth nodes. Execution-layer peering is currently unsupported, but will be added as part of enabling snap sync.
- `--nodiscover`: This disables Geth's peer discovery mechanism. Execution-layer discovery is currently unsupported, but will be added as part of enabling snap sync.

#### Optional op-geth Configuration

You may also want to specify the following flags based on your configuration:

- `--authrpc.vhosts`: Whitelists which hosts (as defined in the `Host` header) are allowed to access the authenticated RPC endpoint. This is useful if you're running `op-geth` on containerized infrastructure. The default value is `localhost`.
- `--http.vhosts`: Whitelists which hosts (as defined in the `Host` header) are allowed to access the unauthenticated RPC endpoint. This is useful if you're running `op-geth` on containerized infrastructure. The default value is `localhost`.
- `--http`, `--http.addr`, and `--http.port`: Enables the unauthenticated RPC endpoint, configures its address, and configures its port. You'll almost certainly want to specify these, since they will enable Geth's JSON-RPC endpoint.
- `--ws`, `--ws.addr`, and `--ws.port`: Enables the WebSocket API.
- `--verbosity`: Configures Geth's log level. This is a number between 0 and 5, with 5 being the most verbose. Defaults to 3.

#### Working Base Configuration

A valid command that runs `op-geth` and enables RPC over HTTP and WebSockets looks like:

```bash
geth \
  --ws \
  --ws.port=8546 \
  --ws.addr=localhost \
  --ws.origins=""*"" \
  --http \
  --http.port=8545 \
  --http.addr=localhost \
  --http.vhosts=""*"" \
  --http.corsdomain=""*"" \
  --authrpc.addr=localhost \
  --authrpc.jwtsecret=/var/secrets/jwt.txt \
  --authrpc.port=8551 \
  --authrpc.vhosts=""*"" \
  --datadir=/data \
  --verbosity=3 \
  --rollup.disabletxpoolgossip=true \
  --rollup.sequencerhttp=https://mainnet-sequencer.optimism.io/ \
  --nodiscover \
  --syncmode=full \
  --maxpeers=0
```

Consult [Geth's documentation](https://geth.ethereum.org/docs/) for more information on customizing `op-geth`'s behavior.

### Configuring op-node

`op-node` is a standalone, statically linked binary. It stores no state, and requires no initialization. It consumes configuration parameters either via the command line or environment variables. For some networks, the Rollup Node also requires a configuration file (called `rollup.json` or the ""rollup config"") that configures network-specific genesis parameters. For official networks like OP Goerli, OP Sepolia, and OP Mainnet, the genesis config is hardcoded in the `op-node` software and can be specified via a `--network` flag.

A minimal valid configuration for a rollup node on our `op sepolia` testnet looks like this:

```bash
op-node --l1=<sepolia RPC url> \
        --l2=<op-geth authenticated RPC url> \
        --network=sepolia \
        --rpc.addr=127.0.0.1 \
        --rpc.port=9545 \
        --l2.jwt-secret=<path to JWT secret>
```

You can manually specify a path to a rollup config with the `--rollup.config` flag. This is used for testnets or internal deployments that are not migrated from a legacy network.

Each of the above flags can also be defined via an environment variable. Run `op-node --help` to see a list of all available flags and environment variables.

#### Configuring Peer-to-Peer Networking

Unlike the previous system, the `op-node` participates in a peer-to-peer network. This network is used to distribute blocks that have not been submitted to L1 yet. The `op-node` will automatically discover and connect to peers using a hardcoded set of bootnodes. You can also manually specify peers to connect to via the `--p2p.static` flag.

For best results, run `op-node` with a static IP address that is accessible from the public Internet. For Kubernetes deployments, this can be achieved by configuring a dedicated `Ingress` with an external IP, and using the `--p2p.advertise.ip` flag to specify the IP address of the load balancer when advertising IP addresses to peers.

The default port for the peer-to-peer network is `9003`. You will need to open this port on your firewall to receive unsubmitted blocks. For your node to be discoverable, this port must be accessible via both TCP and UDP protocols.

### Legacy Geth

If you are running a node for an upgraded network like OP Mainnet or OP Goerli (but not OP Sepolia), you will also need to run Legacy Geth in order to serve historical execution traces. Fundamentally, Legacy Geth is our old `l2geth` binary running against a preconfigured data directory. To configure Legacy Geth, follow the instructions above for using a preconfigured data directory, then execute the following command:

:::danger
It is imperative that you specify the `USING_OVM=true` environment variable in the command below. Failing to specify this will cause `l2geth` to return invalid execution traces, or panic at startup.
:::

```bash
USING_OVM=true \
  ETH1_SYNC_SERVICE_ENABLE=false \
  RPC_API=eth,rollup,net,web3,debug \
  RPC_ADDR=0.0.0.0 \
  RPC_CORS_DOMAIN=* \
  RPC_ENABLE=true \
  RPC_PORT=8545 \
  RPC_VHOSTS=* \
  geth --datadir <path to data directory>
```

This command is the minimum required to run Legacy Geth and expose a functioning RPC endpoint. As before, `l2geth` takes all standard `go-ethereum` flags so you can customize the configuration as needed.

As mentioned above, don't forget to specify `--rollup.historicalrpc` on `op-geth` to properly route requests for historical execution to Legacy Geth.

Since Legacy Geth is read-only, it is safe to run multiple Legacy Geth nodes behind a load balancer.

#### Historical Execution vs. Historical Data Routing

Only requests for historical execution will be routed to Legacy Geth. 
Everything else will be served by `op-geth` directly.
The term _historical execution_ refers to RPC methods that need to execute transactions prior to bedrock (not just read data from the database):

- `eth_call`
- `eth_estimateGas`
- `debug_traceBlockByNumber`
- `debug_traceBlockByHash`
- `debug_traceCall`
- `debug_traceTransaction`

If you do not need these RPC methods for historical data, then you do not need to run Legacy Geth at all.


## Troubleshooting

### 401 Unauthorized: Signature Invalid

If you see a log that looks like this in `op-node`:

```
WARN [12-13|15:53:20.263] Derivation process temporary error       attempts=80 err=""stage 0 failed resetting: temp: failed to find the L2 Heads to start from: failed to fetch current L2 forkchoice state: failed to find the finalized L2 block: failed to determine L2BlockRef of finalized, could not get payload: 401 Unauthorized: signature is invalid
```

It means that the `op-node` is unable to authenticate with `op-geth`'s authenticated RPC using the JWT secret. To fix:

1. Check that the JWT secret is correct in both services.
2. Check that `op-geth`'s authenticated RPC is enabled, and that the URL is correct.

### 403 Forbidden: Invalid Host Specified

If you see a log that looks like this in `op-node`:

```
{""err"":""403 Forbidden: invalid host specified\n"",""lvl"":""error"",""msg"":""error getting latest header"",""t"":""2022-12-13T22:29:18.932833159Z""}
```

It means that you have not whitelisted `op-node`'s host with `op-geth`. To fix:

1. Make sure that the `--authrpc.vhosts` parameter in `op-geth` is either set to the correct host, or `*`.
2. Check that `op-geth`'s authenticated RPC is enabled, and that the URL is correct.

### Failed to Load P2P Config

If you see a log that looks like this in `op-node`:

```
CRIT [12-13|13:46:21.386] Application failed                       message=""failed to load p2p config: failed to load p2p discovery options: failed to open discovery db: mkdir /p2p: permission denied""
```

It means that the `op-node` does not have write access to the P2P discovery or peerstore directories. To fix:

1. Make sure that the `op-node` has write access to the P2P directory. By default, this is `/p2p`.
2. Set the P2P directory to somewhere the `op-node` can access via the `--p2p.discovery.path` and `--p2p.peerstore.path` parameters.
3. Set the discovery path to `memory` to disable persistence via the `--p2p.discovery.path` and `--p2p.peerstore.path` parameters.

### Wrong Chain

If you see a log that looks like this in `op-node`:

```
{""attempts"":183,""err"":""stage 0 failed resetting: temp: failed to find the L2 Heads to start from: wrong chain L1: genesis: 0x4104895a540d87127ff11eef0d51d8f63ce00a6fc211db751a45a4b3a61a9c83:8106656, got 0x12e2c18a3ac50f74d3dd3c0ed7cb751cc924c2985de3dfed44080e683954f1dd:8106656"",""lvl"":""warn"",""msg"":""Derivation process temporary error"",""t"":""2022-12-13T23:31:37.855253213Z""}
```

It means that the `op-node` is pointing to the wrong chain. To fix:

1. Verify that the `op-node`'s L1 URL is pointing to the correct L1 for the given network.
2. Verify that the `op-node`'s rollup config/`--network` parameter is set to the correct network.
3. Verify that the `op-node`'s L2 URL is pointing to the correct instance of `op-geth`, and that `op-geth` is properly initialized for the given network.

## Further Reading

Now that you've got your node up and running, check out the [Upgrade Guide](./upgrade-guide.md) for what to expect when we upgrade our official testnet and mainnet.

"
ethereum-optimism/community-hub,public-testnets.md,developers/bedrock/public-testnets.md,"<script>
export default {
  mounted () {
    window.location.href=""/docs/useful-tools/networks/#optimism-goerli""
  }
}
</script>
"
ethereum-optimism/community-hub,upgrade-guide.md,developers/bedrock/upgrade-guide.md,"<script>
export default {
  mounted () {
    window.location.href=""https://oplabs.notion.site/Bedrock-Mission-Control-EXTERNAL-fca344b1f799447cb1bcf3aae62157c5""
  }
}
</script>

"
ethereum-optimism/community-hub,wallet-upgrade.md,developers/bedrock/wallet-upgrade.md,"---
title: Wallet upgrade guide
lang: en-US
---

The Bedrock release introduces a few changes that affect wallets.

- Some of the JSON RPC methods have changed.
- A transaction can now be in one of three statuses.
- Transaction fees have to acount for EIP 1559 support. 


## JSON RPC

These methods have been removed:

- `eth_getBlockRange`: Use `eth_getBlockByNumber` in a batch request instead.
- `rollup_getInfo`: None of the information returned by this method exists on Bedrock, so there is no replacement for this method.
- `rollup_gasPrices`: Use [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice) instead for the L2 gas price. 
  For the L1 gas price, you can call the [`GasPriceOracle`'s `l1BaseFee` function](https://optimistic.etherscan.io/address/0x420000000000000000000000000000000000000F#readContract#F5).
  If you want to estimate the cost of a transaction, you can [use the SDK](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas).


## Transaction status

We use the same vocabulary as the Beacon Chain to describe block finality. 
Blocks (and the transactions within them) can be in one of the following states:

- `unsafe`, meaning that the block has been received via gossip but has not yet been submitted to L1. Unsafe blocks can be reorged if L1 reorgs, or the sequencer reorgs.
- `safe`, meaning that the block has been submitted to L1. Safe blocks can also be reorged if L1 reorgs.
- `finalized`, meaning that the block has reached sufficient depth to be considered final. Finalized blocks cannot be reorged.

To get the status of a specific block, use [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) with the ""block number"" `finalized`.
If the last finalized block is the same or greater than the block with the transaction whose status you need, then it is finalized.
If not, use [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) with the ""block number"" `safe`. If that block is the same or after the one with the transaction, then it is `safe` (highly unlikely to be reorganized, but it could happen). Otherwise, it is `unsafe`.


## Transaction fees

In OP Mainnet (and most other OP Stack chain) transaction fees include both an [L1 data fee](../build/transaction-fees.md#estimating-the-l1-data-fee) and an [L2 execution fee](../build/transaction-fees.md#the-l2-execution-fee). 
To display the entire estimated cost of a transaction to your users we recommend you [use the SDK](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas) or [@eth-optimism/fee-estimation](https://github.com/ethereum-optimism/optimism/tree/develop/packages/fee-estimation) if you need to optimize for JS performance. 

In Bedrock we support [EIP 1559](https://eips.ethereum.org/EIPS/eip-1559).
Therefore, the L2 execution fee is composed of two components: a fixed (per-block) base fee and a user selected priority fee.


### Base fee

[The EIP 1559 parameters](./differences.md#eip-1559) have different values in OP Mainnet (and most other OP Stack chain) than those on L1 Ethereum.
As a result, in every block the base fee can be between 98% and 110% of the previous value. 
As blocks are produced every two seconds, the base fee can be between 54% and 1,745% of the value a minute earlier.
If it takes the user fourteen seconds to approve the transaction in the wallet, the base fee can almost double in that time.

The base fee specified in the transaction is not necessarily the base fee that the user will pay, *it is merely an upper limit to that amount*.
In most cases, it makes sense to specify a much higher base fee than the current value, to ensure acceptance. 

For example, as I'm writing this, ETH is about $2000, and a cent is about 5000 gwei. 
Assuming 20% of a cent is an acceptable base fee for a transaction, and that the transaction is a big 5,000,000 gas one (at the target block size), this gives us a base fee of 200,000 wei. 
That would be the value to put in the transaction, even though the L2 base fee (as I'm writing this) is 2,420 wei. 

::: info Up to date information

You can get the current L2 base fee [in the gas tracker dashboard](https://optimism.io/gas-tracker). We recommend setting your `Max Fee` to _at least_ 0.1 gwei. This value will get your user's transaction included in the next block 98% of the time.

:::


### Priority fee

In contrast to the base fee, the priority fee in the transaction is the amount that the user pays, and therefore it makes sense to keep it as low as possible.
For OP Chains, you can set the `Max Priority Fee` to as low as 0.0001 gwei.

Note that on OP Mainnet the priority fee tends to be very low. 
As I am writing this, a priority fee of 500 wei is sufficient ([see here](https://optimism.io/gas-tracker) to get the current values).





"
ethereum-optimism/community-hub,bridge,developers/bridge,"
"
ethereum-optimism/community-hub,basics.md,developers/bridge/basics.md,"---
title: Bridging basics
lang: en-US
---

Although OP Mainnet is an L2 (and therefore fundamentally connected to Ethereum), it's also a separate blockchain system.
App developers commonly need to move data and assets between OP Mainnet and Ethereum.
We call the process of moving data and assets between the two networks ""bridging"".

## Sending tokens

For the most common usecase, moving tokens around, we've created the [Standard Token Bridge](./standard-bridge.md).
The Standard Token Bridge is a simple smart contract with the functionality you need to move tokens between OP Mainnet and Ethereum.
It also allows you to easily create L2 representations of existing tokens on Ethereum.

## Sending data

If the Standard Token Bridge doesn't fully cover your usecase, you can also [send arbitrary data between L1 and L2](./messaging.md).
You can use this functionality to have a contract on Ethereum trigger a contract function on OP Mainnet and vice versa.
We've made this process as easy as possible by giving developers a simple API for triggering a cross-chain function call.
We even [use this API under the hood](https://github.com/ethereum-optimism/optimism/blob/a21cec6d3d00c9d7ed100c0257d4b966b034620f/packages/contracts/contracts/L1/messaging/L1StandardBridge.sol#L202) inside the Standard Token Bridge.

"
ethereum-optimism/community-hub,comm-strategies.md,developers/bridge/comm-strategies.md,"---
title: Communication Strategies
lang: en-US
---

Dapps' inter-layer communication strategies are based on trade-offs between several parameters:

- Speed
- Cost
- Trust assumptions

An issue related to both speed and decentralization is the L2 state.
This state is vulnerable to fault challenges until the fault challenge period (currently one week) passes.
If you want to do something that relies on the L2 state prior to that point, you should [run a replica](../build/run-a-node.md) yourself to make sure the state you use is correct.



## Fully centralized

If your dapp has a centralized always on server, the easiest solution is to just have two providers, one connected to Ethereum (L1) and the other to OP Mainnet (L2).

| Parameter         | Evaluation |
| - | - |
| Speed             | Fastest
| Cost              | Cheapest
| Trust assumption  | Centralized


### Using the client (please don't)

The client (typically a browser with a wallet) can also connect to both Ethereum and OP Mainnet, but it isn't a great mechanism for inter-layer communication.
You know what the code in the server is, because you wrote it.
You know what the code in the client is *supposed to be*, but it is possible for users to run a different client that pretends to be the legitimate one. 
The only time that you can trust the client for inter-layer communication is when it is in the best interest of the user running the client not to lie.
And even then, you shouldn't because a hacker can cause a user to run malware.


## Fully decentralized

If you want to keep the same decentralization promises as OP Mainnet and Ethereum, you can [rely on our messaging infrastructure](messaging.md).
You are already trusting Optimism to run the chain, and the messaging infrastructure goes through the same development process.

### Messages from L1 to L2

If you want L1 code to either tell L2 code to do something, or update L2 code with some information, you just need to [issue a single L1 transaction](messaging.md#for-ethereum-l1-to-op-mainnet-l2-transactions).

| Parameter         | Evaluation |
| - | - |
| Speed             | About one minute
| Cost              | Cheapish (requires an L1 transaction)
| Trust assumption  | Same as using OP Mainnet

### Messages from L2 to L1

Sending messages from L2 to L1 is [a lot harder](messaging.md#for-op-mainnet-l2-to-ethereum-l1-transactions). 
It requires three transactions:

1. An initiating transaction on L2, which is pretty cheap.
1. After the state root is posted to L1, a proving transaction of L1, which includes [a merkle proof](https://medium.com/crypto-0-nite/merkle-proofs-explained-6dd429623dc5). 
   This transaction is expensive because merkle proof verification is expensive.
1. After the fault challenge period passes, a claiming transaction on L1, which runs the actual transaction on L1.

| Parameter         | Evaluation |
| - | - |
| Speed             | >7 days 
| Cost              | Expensive
| Trust Assumption  | Almost as good as using OP Mainnet, however someone needs to run the proof and claim transactions on L1 (your server can do that for better user experience)


## Incentivized communication

You can also use incentives, for example using a mechanism such as [UMA's](../../useful-tools/oracles/#universal-market-access-uma).
This is similar to the way optimistic rollups work - honest relays get paid, dishonest ones get slashed.
However,  this mechanism is only truly decentralized if there are enough relayers to make sure there will always be an honest one.
Otherwise, it's similar to centralized communications, just with a few extra relayers that can take over.

"
ethereum-optimism/community-hub,messaging.md,developers/bridge/messaging.md,"---
title: Sending data between L1 and L2
lang: en-US
---

Apps on OP Mainnet can be made to interact with apps on Ethereum via a process called ""bridging"".
In a nutshell, **contracts on OP Mainnet can trigger contract functions on Ethereum, and vice versa**.
With just a little bit of elbow grease, you too can create contracts that bridge the gap between Layer 1 and Layer 2!


::: tip 
[See here for a step by step tutorial](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-comm)
:::

<details>

<summary><b>Understanding contract calls</b></summary>

To understand the process of creating bridges between contracts on Layer 1 and Layer 2, you should first have a basic understanding of the way contracts on *Ethereum* communicate with one another.
If you're a smart contract developer, you might be familiar with stuff like this:

```solidity
contract MyContract {
    function doSomething(uint256 myFunctionParam) public {
        // ... some sort of code goes here
    }
}

contract MyOtherContract {
    function doTheThing(address myContractAddress, uint256 myFunctionParam) public {
        MyContract(myContractAddress).doSomething(myFunctionParam);
    }
}
```

Here, `MyOtherContract.doTheThing` triggers a ""call"" to `MyContract.doSomething`.
A ""call"" is defined by a few key input parameters, mainly a `target address` and some `calldata`.
In this specific example, the `target address` is going to be the address of our instance of `MyContract`.
The `calldata`, on the other hand, depends on the function we're trying to call.
Solidity uses an encoding scheme called [Contract ABI](https://docs.soliditylang.org/en/v0.8.4/abi-spec.html) to both [select which function to call](https://docs.soliditylang.org/en/v0.8.4/abi-spec.html#function-selector) and to [encode function input arguments](https://docs.soliditylang.org/en/v0.8.4/abi-spec.html#argument-encoding).

Solidity gives us some useful tools to perform this same encoding manually.
For the sake of learning, let's take a look at how we can duplicate the same code with a manual encoding:

```solidity
contract MyContract {
    function doSomething(uint256 myFunctionParam) public {
        // ... some sort of code goes here
    }
}

contract MyOtherContract {
    function doTheThing(address myContractAddress, uint256 myFunctionParam) public {
        myContractAddress.call(
            abi.encodeWithSignature(
                ""doSomething(uint256)"",
                myFunctionParam
            )
        );
    }
}
```

Here we're using the [low-level ""call"" function](https://docs.soliditylang.org/en/v0.8.4/units-and-global-variables.html#members-of-address-types) and one of the [ABI encoding functions built into Solidity](https://docs.soliditylang.org/en/v0.8.4/units-and-global-variables.html#abi-encoding-and-decoding-functions).
Although these two code snippets look a bit different, they're actually functionally identical.

</details>

## Communication basics between layers

At a high level, this process is pretty similar to the same process for two contracts on Ethereum (with a few caveats).
**Communication between L1 and L2 is enabled by two special smart contracts called the ""messengers""**.
Each layer has its own messenger contract which serves to abstract away some lower-level communication details, a lot like how HTTP libraries abstract away physical network connections.

We won't get into *too* much detail about these contracts here ‚Äî the only thing you really need to know about is the `sendMessage` function attached to each messenger:

```solidity
function sendMessage(
    address _target,
    bytes memory _message,
    uint32 _gasLimit
) public;
```

It's the same as that `call` function used for contract messaging within L1 Ethereums.
We have an extra `_gasLimit` field here, but `call` has that too.
This is basically equivalent to:

```solidity
address(_target).call{gas: _gasLimit}(_message);
```

Except, of course, that we're calling a contract on a completely different network.

We're glossing over a lot of the technical details that make this whole thing work under the hood.
Point is, it works.
Want to call a contract on OP Mainnet from a contract on Ethereum?
It's dead simple:

```solidity
// Pretend this is on L2
contract MyOptimisticContract {
    function doSomething(uint256 myFunctionParam) public {
        // ... some sort of code goes here
    }
}

// And pretend this is on L1
contract MyOtherContract {
    function doTheThing(address myOptimisticContractAddress, uint256 myFunctionParam) public {
        ovmL1CrossDomainMessenger.sendMessage(
            myOptimisticContractAddress,
            abi.encodeWithSignature(
                ""doSomething(uint256)"",
                myFunctionParam
            ),
            1000000 // use whatever gas limit you want
        )
    }
}
```

::: tip Using the messenger contracts
Our messenger contracts, the [`L1CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/src/L1/L1CrossDomainMessenger.sol) and [`L2CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/src/L2/L2CrossDomainMessenger.sol), always come pre-deployed to each of our networks.
You can find the exact addresses of these contracts on our various deployments [inside of the Optimism monorepo](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/deployments).
:::

## Communication speed

Unlike calls between contracts on the same blockchain, calls between Ethereum and OP Mainnet are *not* instantaneous.
The exact speed of a cross-chain transaction depends on the direction in which the transaction is sent.

### For Ethereum (L1) to OP Mainnet (L2) transactions

Transactions sent from L1 to L2 take approximately a minute to get from Ethereum to OP Mainnet, or from Goerli to OP Goerli.
This is because L2 nodes wait for five block confirmations on Ethereum before executing an L1 to L2 transaction, to reduce the chance of a chain reorg.

### For OP Mainnet (L2) to Ethereum (L1) transactions

L2 to L1 transactions have to wait two periods:

1. The time until the state root is written to L1.
   You can estimate this time by looking at how often transactions happen to the State Commitment Chain (on both [mainnet](https://etherscan.io/address/0xBe5dAb4A2e9cd0F27300dB4aB94BeE3A233AEB19) and [goerli](https://goerli.etherscan.io/address/0xE6Dfba0953616Bacab0c9A8ecb3a9BBa77FC15c0)).

   It is necessary to provide a Merkle proof of the message on L1 after the state root is written.
   The fault challenge period starts *after* that proof transaction becomes part of the L1 chain.

1. The [fault challenge period](#understanding-the-challenge-period), which is a few seconds on goerli and seven days on mainnet.
   This waiting period is a core part of the security mechanism designed to keep funds on Optimism secure and cannot be circumvented.
   After this waiting period, any user can ""finalize"" the transaction by triggering a second transaction on Ethereum that sends the message to the target L1 contract.

## Accessing `msg.sender`

Contracts frequently make use of `msg.sender` to make decisions based on the calling account.
For example, many contracts will use the [Ownable](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol) pattern to selectively restrict access to certain functions.
Because messages are essentially shuttled between L1 and L2 by the messenger contracts, **the `msg.sender` you'll see when receiving one of these messages will be the messenger contract** corresponding to the layer you're on.

In order to get around this, we added a `xDomainMessageSender` function to each messenger:

```solidity
function xDomainMessageSender() public returns (address);
```

If your contract has been called by one of the messenger contracts, you can use this function to see who's *actually* sending this message.
Here's how you might implement an `onlyOwner` modifier on L2:

```solidity
modifier onlyOwner() {
    require(
        msg.sender == address(ovmL2CrossDomainMessenger)
        && ovmL2CrossDomainMessenger.xDomainMessageSender() == owner
    );
    _;
}
```

## Fees for sending data between L1 and L2

### For L1 ‚áí L2 transactions

The majority of the cost of an L1 to L2 transaction comes from sending a transaction on Ethereum.
You send a transaction to the [`L1CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/src/L1/L1CrossDomainMessenger.sol)
contract, which then sends a call to the [`CanonicalTransactionChain`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L1/rollup/CanonicalTransactionChain.sol).
This cost is ultimately determined by gas prices on Ethereum when you're sending the cross-chain transaction.

An L1 to L2 message is expected to trigger contract execution on L2, and that contract execution costs gas.
The first 1.92 million gas on L2 is free.
The vast majority of L1 to L2 calls spend less than the 1.92 million, so nothing further is required.

If you think that your call might spend more than that on L2, you can specify a higher gas limit.
However, to prevent denial of service attacks, we have to impose a cost on gas limits higher than 1.92 million.
This cost is one unit of L1 gas for every 32 units of L2 gas requested beyond the free amount.

For example, if you specify a 2.0 million gas limit in the call to `L1CrossDomainMessenger`, it will be processed this way:

| Amount | Action  |
| ------ | ------- |
| free gas: 1.92 million   | Nothing, this gas is provided on L2 for free |
| excess gas required: 80,000 | 2,500 gas is spent on the L1 portion of the gas fee and in return 80,000 extra gas is provided to the L2 transaction. This is inline with the 1:32 ratio of gas. |

This gas burn happens on L1 when the L1 contract calls `L1CrossDomainMessenger`.
This is before the message has been sent to the L2, and as such there is no way to know how much L2 gas will actually be used.
Therefore, the amount burned is based *only* on the gas limit specified in the L1 call.

For example, if the call above with a gas limit of two million only takes ten thousand gas on L2, the 2,500 gas on L1 is still burned.
There is no refund.

The parameters in the explanation above were 1.92 million and 32 at the time of writing, but they may change in the future.
To see the present values, [go to Etherscan](https://etherscan.io/address/0x5E4e65926BA27467555EB562121fac00D24E9dD2#readContract) and expand `enqueueL2GasPrepaid` for the free L2 gas amount and `l2GasDiscountDivisor` for the exchange rate at which L1 gas is burned for additional L2 gas.


### Fees for L2 ‚áí L1 transactions

Each message from L2 to L1 requires three transactions:

1. An L2 transaction that *initiates* the transaction, which is priced the same as any other transaction made on OP Mainnet.

1. An L1 transaction that *proves* the transaction.
   This transaction can only be submitted after the state root is submitted to L1.
   This transaction is expensive because it includes verifying a [Merkle trie](https://eth.wiki/fundamentals/patricia-tree) inclusion proof.

1. An L1 transaction that *finalizes* the transaction. 
   This transaction can only be submitted after the transaction challenge period (7 days on mainnet) has passed. 

The total cost of an L2 to L1 transaction is therefore the combined cost of the L2 initialization transaction and the two L1 transactions.
The L1 proof and finalization transactions are typically significantly more expensive than the L2 initialization transaction.

## Understanding the challenge period

One of the most important things to understand about L1 ‚áî L2 interaction is that **mainnet messages sent from Layer 2 to Layer 1 cannot be relayed for at least one week**.
This means that any messages you send from Layer 2 will only be received on Layer 1 after this one week period has elapsed.
We call this period of time the ""challenge period"" because it is the time during which a transaction can be challenged with a [fault proof](../../protocol/2-rollup-protocol.md#fault-proofs).

Optimistic Rollups are ""optimistic"" because they're based around the idea of publishing the *result* of a transaction to Ethereum without actually executing the transaction on Ethereum.
In the ""optimistic"" case, this transaction result is correct and we can completely avoid the need to perform complicated (and expensive) logic on Ethereum.
Cheap transactions, yay!

However, we still need some way to prevent incorrect transaction results from being published in place of correct ones.
Here's where the ""fault proof"" comes into play.
Whenever a transaction result is published, it's considered ""pending"" for a period of time known as the challenge period.
During this period of time, anyone may re-execute the transaction *on Ethereum* in an attempt to demonstrate that the published result was incorrect.

If someone is able prove that a transaction result is faulty, then the result is scrubbed from existence and anyone can publish another result in its place (hopefully the correct one this time, financial punishments make faulty results *very* costly for their publishers).
Once the window for a given transaction result has fully passed without a challenge the result can be considered fully valid (or else someone would've challenged it).

Anyway, the point here is that **you don't want to be making decisions about Layer 2 transaction results from inside a smart contract on Layer 1 until this challenge period has elapsed**.
Otherwise you might be making decisions based on an invalid transaction result.
As a result, L2 ‚áí L1 messages sent using the standard messenger contracts cannot be relayed until they've waited out the full challenge period.

::: tip On the length of the challenge period
We've set the challenge period to be exactly seven days on the OP Mainnet.
We believe this is a reasonable balance between security and usability, with an emphasis on increased security to start. Testnet messages sent from Layer 2 to Layer 1 have a much shorter period of 5 minutes to prove and 1 minute to withdraw.

We're open to changing the length of the window as long as we feel this can be done without significantly reducing the security of the system.
If you're strongly opinionated about this, we recommend [opening an issue on GitHub](https://github.com/ethereum-optimism/optimism/issues) explaining your position.
We *will* hear you out!
:::

"
ethereum-optimism/community-hub,standard-bridge.md,developers/bridge/standard-bridge.md,"---
title: Using the Standard Bridge
lang: en-US
---

Certain interactions, like transferring ETH and ERC20 tokens between the two networks, are common enough that we've built the ""Standard Bridge"" to make moving these assets between L1 and L2 as easy as possible.

The standard bridge functionality provides a method for an ERC20 token to be deposited and locked on L1 in exchange of the same amount of an equivalent token on L2. This process is known as ""bridging a token"", e.g. depositing 100 USDC on L1 in exchange for 100 USDC on L2 and also the reverse - withdrawing 100 USDC on L2 in exchange for the same amount on L1. In addition to bridging tokens the standard bridge is also used for ETH.

The Standard Bridge is composed of two main contracts the [`L1StandardBridge`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol) (for Layer 1) and the [`L2StandardBridge`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2StandardBridge.sol) (for Layer 2). The contract addresses can be found [here](../../useful-tools/networks/#contract-addresses).

Here we'll go over the basics of using this bridge to move ERC20 assets between Layer 1 and Layer 2.

::: tip 
[See here for a step by step tutorial](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-erc20)
:::

## Deposits

::: warning NOTICE
We're working hard to get more smart contract wallet software deployed and tested on OP Mainnet.
However, as a safety measure, **we currently block smart contract wallets from calling the `depositETH` and `depositERC20` functions**.
If you want to deposit using a smart contract wallet and you know what you're doing, you can use the `depositETHTo` and `depositERC20To` functions instead.
:::

### Depositing ERC20s

ERC20 deposits into L2 can be triggered via the `depositERC20` and `depositERC20To` functions on the [`L1StandardBridge`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol#L145-L205).
You **must** approve the Standard Token Bridge to use the amount of tokens that you want to deposit or the deposit will fail.

Note that the bridge does *not* support certain ERC-20 configurations:

- [Fee on transfer tokens](https://github.com/d-xo/weird-erc20#fee-on-transfer)
- [Tokens that modify balances without emitting a Transfer event](https://github.com/d-xo/weird-erc20#balance-modifications-outside-of-transfers-rebasingairdrops)

::: danger Use the standard bridge contract only with standard bridge tokens
The standard bridge can only be used with tokens that have a properly configured ERC-20 version on OP Mainnet.
If you send any other type of token to the standard bridge directly (not using the user interface or the API), it gets stuck there and you lose that value.

Note that if you use the [OP Mainnet bridge UI](https://app.optimism.io/bridge), or the [Optimism SDK](../../sdk/js-client.md) it automatically chooses the correct bridge contract, so this problem does not happen.

There are two ways to check if a token can use the standard bridge:

1. Look in [the token list](https://static.optimism.io/optimism.tokenlist.json). 
   If a token can use the standard bridge, then the `""chainId"": 10` entry will have the standard L2 bridge address, `0x4200..0010`. For example, this entry shows that on OP Mainnet `0xBTC` can use the standard bridge.

   ```json
       {
      ""chainId"": 10,
      ""address"": ""0xe0BB0D3DE8c10976511e5030cA403dBf4c25165B"",
      ""name"": ""0xBitcoin"",
      ""symbol"": ""0xBTC"",
      ""decimals"": 8,
      ""logoURI"": ""https://ethereum-optimism.github.io/data/0xBTC/logo.png"",
      ""extensions"": {
        ""optimismBridgeAddress"": ""0x4200000000000000000000000000000000000010""
      }
    },
   ```

   If the token exists in the token list but does not use the standard bridge, the `extensions.optimismBridgeAddress` value is different. For example, this entry shows that on OP Mainnet `DAI` uses a different bridge:

   ```json
       {
      ""chainId"": 10,
      ""address"": ""0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1"",
      ""name"": ""Dai stable coin"",
      ""symbol"": ""DAI"",
      ""decimals"": 18,
      ""logoURI"": ""https://ethereum-optimism.github.io/data/DAI/logo.svg"",
      ""extensions"": {
        ""optimismBridgeAddress"": ""0x467194771dAe2967Aef3ECbEDD3Bf9a310C76C65""
      }
    },
   ```

1. You can ""ask"" the L2 token contract by calling it. 
   ERC-20 tokens that can use the standard bridge not only if they:
   - Have an `l2Bridge` method
   - That method returns `0x4200...0010`. 

   For example, [this link](https://optimistic.etherscan.io/address/0xe0bb0d3de8c10976511e5030ca403dbf4c25165b#readContract#F5) can be used to see that `0xBTC` uses the standard bridge.

   Note that you cannot query the L1 token contract the same way.
   L2 contracts know the identity of their L1 counterpart, but L1 contracts only need to implement the standard ERC-20 methods.

:::


### Depositing ETH

ETH deposits into L2 can be triggered via the `depositETH` and `depositETHTo` functions on the [`L1StandardBridge`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol#L110-L143).
ETH deposits can alternatively be triggered by sending ETH directly to the `L1StandardBridge`.
Once your deposit is detected and finalized on OP Mainnet, your account will be funded with the corresponding amount of ETH on L2.

### Depositing USDC

USDC issued by Circle will be native to OP Mainnet and can be considered the official form of USDC for the ecosystem. Over time, native USDC liquidity may grow and replace the currently circulating bridged USDC liquidity that comes from Ethereum.

::: danger USDC.e vs USDC

These are different token contracts. If you're using `depositERC20` or `depositERC20To` make sure you're bridging to the correct destination address. Mixing up the mapping will result in your assets being stuck in the bridge.
:::

| Token Symbol  | Description | Token Address |
| - | - | - |
| `USDC.e`	| Bridged USDC from Ethereum   | [0x7f5c764cbc14f9669b88837ca1490cca17c31607](https://optimistic.etherscan.io/token/0x7f5c764cbc14f9669b88837ca1490cca17c31607) |
| `USDC`	| Native USDC issued by Circle   | [0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85](https://optimistic.etherscan.io/token/0x0b2c639c533813f4aa9d7837caf62653d097ff85) |

## Withdrawals

### Withdrawing ERC20s

ERC20 withdrawals can be triggered via the `withdraw` or `withdrawTo` functions on the [`L2StandardBridge`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2StandardBridge.sol).
If you'd like to see this contracts in action, you should check out the [L1 ‚áî L2 deposit-and-withdraw example](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-erc20).

### Withdrawing ETH

Unlike on L1, we do not have a separate function on L2 for withdrawing ETH.
Instead, you can use the `withdraw` or `withdrawTo` functions on the [`L2StandardBridge`](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2StandardBridge.sol) and use the address `0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000` as the L2 token address.

## Adding an ERC20 token to the Standard Bridge

::: tip
To add your token to the standard bridge, see the guide [Adding an ERC20 token to the Standard Bridge](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/standard-bridge-standard-token).
:::

## The Superchain token list

The Standard bridge allows a one-to-many mapping between L1 and L2 tokens, meaning that there can be many OP Mainnet implementations of an L1 token.
However there is always a one-to-one mapping between L1 and L2 tokens in the [Superchain token list](https://github.com/ethereum-optimism/ethereum-optimism.github.io/blob/master/optimism.tokenlist.json).
The Superchain token list is used as the source of truth for the [OP Mainnet bridge UI](https://app.optimism.io/bridge/deposit) which is the main portal for moving assets between Layer 1 and Layer 2.

If you want to have your token added to the Superchain token list, you must make a pull request against the [Superchain token list repository](https://github.com/ethereum-optimism/ethereum-optimism.github.io#adding-a-token-to-the-list).
You'll need the addresses for both the L1 and L2 tokens, as well as a logo for the token.
If you're looking for an example to follow, take a look at [this simple pull request that adds a token to the token list](https://github.com/ethereum-optimism/ethereum-optimism.github.io/pull/319/files).

"
ethereum-optimism/community-hub,build,developers/build,"
"
ethereum-optimism/community-hub,cheap-dapp.md,developers/build/cheap-dapp.md,"---
title: Making OP Mainnet Dapps Even Cheaper
lang: en-US
---

The cost of using a decentralized application in OP Mainnet is much lower than the cost of the equivalent application on L1 Ethereum.
[See here](https://l2fees.info/) for the current values.
However, with proper optimization, we can make our decentralized applications even cheaper.
Here are some strategies.


## Background

This is a basic introduction into some of the concepts you need to understand to fully optimise your contracts in the OP Mainnet environment.

### What are the transaction fees?

The cost of an L2 transaction on OP Mainnet is composed of two components:

- L2 execution fee, which is proportional to the gas actually used in processing the transaction.
   
- L1 data fee, which is proportional to:
  - The gas cost of writing the transaction's data to L1 (roughly equal to the transaction's length)
  - The cost of gas on L1.
    The cost of gas on L1 can be extremely volatile. 
  
To view the current gas costs as a user, [see here](https://optimism.io/gas-tracker). To retrieve them programatically, [see here](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas).

For a more in depth look at how transaction fees are calculated see our [fee documentation](transaction-fees.md).

### Optimization tradeoffs

In almost all cases, the L1 data fee is the vast majority of the transaction's cost.
The L2 execution fee is, comparatively speaking, negligible.
This means that the optimization tradeoffs are very different in OP Mainnet than they are in Ethereum.

Transaction call data is *expensive*.
The cost of writing a byte to L1 is approximately 16 gas.
At a cost of 45 gwei per L1 gas unit, writing one byte to L1 on OP Mainnet costs 720 gwei, or 720,000 units of L2 gas (at the non-congested price of 0.001 gwei per L2 gas unit).

In comparison, onchain processing and storage are cheap.
The worst case for writing to storage (previously uninitialized storage) is a cost of [22100 L2 gas per EVM word, which contains 32 bytes of data](https://www.evm.codes/#55), which averages out to less than 700 L2 gas / byte.
At a cost of 45 gwei per L1 gas unit, this means it is cheaper to write a whole kilobyte to storage, rather than add one byte to the transaction call data. 

## Modify the [ABI (application binary interface)](https://docs.soliditylang.org/en/latest/abi-spec.html)

[The standard ABI](https://docs.soliditylang.org/en/latest/abi-spec.html) was designed with L1 tradeoffs in mind. 
It uses four byte function selectors and pads values to a 32 byte size. 
Neither is optimal when using OP Mainnet.

It is much more efficient to [create a shorter ABI with just the required bytes, and decode it onchain](https://ethereum.org/en/developers/tutorials/short-abi/).
All of your [`view`](https://docs.soliditylang.org/en/latest/contracts.html#view-functions) and [`pure`](https://docs.soliditylang.org/en/latest/contracts.html#pure-functions) functions can use the standard ABI at no cost.


## Use smaller values when possible

Your modified ABI is not going to pad values, so the less bytes you use the better.
For example, it is standard to use `uint256` for amounts.
This means that the highest number we can represent is 2<sup>256</sup>-1, or about 1.2*10<sup>77</sup>. 
When storing ETH balances, for example, using `uint256` is overkill as there are only [120 million ETH](https://ycharts.com/indicators/ethereum_supply). Thus, we can safely store ETH balances in `uint88` which is just eleven bytes.

Go through your contracts and identify any values that will never reach 32 bytes and reduce them to logical sizes. You can do this same process for ints, bytes and [other Solidity data types](https://docs.soliditylang.org/en/develop/types.html#types).


"
ethereum-optimism/community-hub,dev-node.md,developers/build/dev-node.md,"---
title: Running a local development environment
lang: en-US
---

## What is this?

A development environment is a local installation of the entire OP Mainnet system.
Our default development environment includes both L1 and L2 development nodes.
Running the OP Mainnet environment locally is a great way to test your code and see how your contracts will behave on OP Mainnet before you graduate to a testnet deployment (and eventually a mainnet deployment).

Alternatively, you can get a hosted development node from [any of these providers](../../useful-tools/providers.md).


## Do I need this?

We generally recommend using the local development environment if your application falls into one of the following categories:

1. **You're building contracts on both OP Mainnet and Ethereum that need to interact with one another.** The local development environment is a great way to quickly test interactions between L1 and L2. The OP Mainnet and test networks have a communication delay between L1 and L2 that can make testing slow during the early stages of development.

2. **You're building an application that might be subject to one of the few [differences between Ethereum and OP Mainnet](./differences.md).** Although OP Mainnet is [EVM equivalent](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306), it's not exactly the same as Ethereum. If you're building an application that might be subject to one of these differences, you should use the local development environment to double check that everything is running as expected. You might otherwise have unexpected issues when you move to testnet. We strongly recommend reviewing these differences carefully to see if you might fall into this category.

However, not everyone will need to use the local development environment.
OP Mainnet is [EVM equivalent](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306), which means that OP Mainnet looks almost exactly like Ethereum under the hood.
If you don't fall into one of the above categories, you can probably get away with simply relying on existing testing tools like Truffle or Hardhat.
If you don't know whether or not you should be using the development environment, feel free to hop into the [Optimism discord](https://discord-gateway.optimism.io).
Someone nice will help you out!


## How to do it

The Optimism monorepo includes [a devnode setup you can use](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/meta/devnet.md).

### Installation 

1. First, make sure these components are installed.
Note that the command line directions were verified under Ubuntu 20.04 LTS.
Other OSes or versions may use different tools.

- The command line utilities `make` and `jq`.

  ```sh
  sudo apt install -y make jq
  ```

- [Go programming language](https://go.dev/)  

  ```sh
  sudo apt update
  wget https://go.dev/dl/go1.20.linux-amd64.tar.gz
  tar xvzf go1.20.linux-amd64.tar.gz
  sudo cp go/bin/go /usr/bin/go
  sudo mv go /usr/lib
  echo export GOROOT=/usr/lib/go >> ~/.bashrc
  ```

- [Docker (the engine version is enough)](https://docs.docker.com/engine/install/#server)

  The latest version of docker uses `docker compose` instead of a separate `docker-compose` executable.
  To process scripts that use `docker-compose`, run these commands:

  ```sh  
  echo docker compose '$*' | sudo tee /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose 
  ```

- The Optimism monorepo.

  ```sh
  git clone https://github.com/ethereum-optimism/optimism.git
  cd optimism
  ```


### Additional information

- To start, run (in the root directory of the monorepo) `make devnet-up`.  
  The first time it runs it will be relatively slow because it needs to download the images, after that it will be faster.

- To stop, run (in the root directory of the monorepo) `make devnet-down`.

- To clean everything, run (in the root directory of the monorepo) `make devnet-clean`.

- [The monorepo includes the L1 contract addresses](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/deploy-config/devnetL1.json).
  The L2 contract addresses are, of course, the standard ones.

- There are some differences between the development node and the real world (a.k.a. Ethereum mainnet and OP Mainnet):

  | Parameter | Real-world | Devnode |
  | - | -: | -: |
  | L1 chain ID |  1 | 900 
  | L2 chain ID | 10 | 901
  | Time between L1 blocks (in seconds) | 12 | 3

- Test ETH:
  
  - Address: `0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266`
  - Private key: `ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80`
"
ethereum-optimism/community-hub,differences.md,developers/build/differences.md,"---
title: Differences between Ethereum and OP Mainnet
lang: en-US
---

It's important to note that there are various minor discrepancies between the behavior of OP Mainnet and Ethereum.
You should be aware of these descrepancies when building apps on top of OP Mainnet.

## Opcode Differences

| Opcode  | Solidity equivalent | Behavior |
| - | - | - |
| `COINBASE`	| `block.coinbase`   | Undefined |
| `DIFFICULTY` | `block.difficulty` | Random value. As this value is set by the sequencer, it is not as reliably random as the L1 equivalent. [You can use an oracle for randomness](../../useful-tools/oracles.md#verifiable-randomness-function-vrf). |
| `NUMBER`     | `block.number`     | L2 block number
| `TIMESTAMP`  | `block.timestamp`  | Timestamp of the L2 block
| `ORIGIN`     | `tx.origin`        | If the transaction is an L1 ‚áí L2 transaction, then `tx.origin` is set to the [aliased address](#address-aliasing) of the address that triggered the L1 ‚áí L2 transaction. Otherwise, this opcode behaves normally. |
| `CALLER`     | `msg.sender`      | If the transaction is an L1 ‚áí L2 transaction, and this is the initial call (rather than an internal transaction from one contract to another), the same [address aliasing](#address-aliasing) behavior applies.
| [`PUSH0`](https://www.evm.codes/#5f?fork=shanghai)      | N/A               | Opcode not supported yet (will be added in a hardfork)

::: tip `tx.origin == msg.sender`

On L1 Ethereum `tx.origin` is equal to `msg.sender` only when the smart contract was called directly from an externally owned account (EOA).
However, on OP Mainnet `tx.origin` is the origin *on OP Mainnet*.
It could be an EOA.
However, in the case of messages from L1, it is possible for a message from a smart contract on L1 to appear on L2 with `tx.origin == msg.sender`.
This is unlikely to make a significant difference, because an L1 smart contract cannot directly manipulate the L2 state.
However, there could be edge cases we did not think about where this matters.

:::

### Accessing L1 information

If you need the equivalent information from the latest L1 block, you can get it from [the `L1Block` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L1Block.sol).
This contract is a predeploy at address [`0x4200000000000000000000000000000000000015`](https://goerli-optimism.etherscan.io/address/0x4200000000000000000000000000000000000015).
You can use [the getter functions](https://docs.soliditylang.org/en/v0.8.12/contracts.html#getter-functions) to get these parameters:

- `number`: The latest L1 block number known to L2
- `timestamp`: The timestamp of the latest L1 block
- `basefee`: The base fee of the latest L1 block
- `hash`: The hash of the latest L1 block
- `sequenceNumber`: The number of the L2 block within the epoch (the epoch changes when there is a new L1 block)

### Address Aliasing

<details>

Because of the behavior of the `CREATE` opcode, it is possible for a user to create a contract on L1 and on L2 that share the same address but have different bytecode.
This can break trust assumptions, because one contract may be trusted and another be untrusted (see below).
To prevent this problem the behavior of the `ORIGIN` and `CALLER` opcodes (`tx.origin` and `msg.sender`) differs slightly between L1 and L2.

The value of `tx.origin` is determined as follows:


| Call source                        | `tx.origin`                                |
| ---------------------------------- | ------------------------------------------ | 
| L2 user (Externally Owned Account) | The user's address (same as in Ethereum)   |
| L1 user (Externally Owned Account) | The user's address (same as in Ethereum)   |
| L1 contract (using `CanonicalTransactionChain.enqueue`) | `L1_contract_address + 0x1111000000000000000000000000000000001111` |


The value of `msg.sender` at the top-level (the very first contract being called) is always equal to `tx.origin`.
Therefore, if the value of `tx.origin` is affected by the rules defined above, the top-level value of `msg.sender` will also be impacted.

Note that in general, [`tx.origin` should *not* be used for authorization](https://docs.soliditylang.org/en/latest/security-considerations.html#tx-origin). 
However, that is a separate issue from address aliasing because address aliasing also affects `msg.sender`.



#### Why is address aliasing an issue?


The problem with two identical source addresses (the L1 contract and the L2 contract) is that we extend trust based on the address.
It is possible that we will want to trust one of the contracts, but not the other.

1. Helena Hacker forks [Uniswap](https://uniswap.org/) to create her own exchange (on L2), called Hackswap.

   **Note:** There are actually multiple contracts in Uniswap, so this explanation is a bit simplified.
   [See here if you want additional details](https://ethereum.org/en/developers/tutorials/uniswap-v2-annotated-code/).

1. Helena Hacker provides Hackswap with liquidity that appears to allow for profitable arbitrage opportunities.
   For example, she can make it so that you can spend 1 [DAI](https://www.coindesk.com/price/dai/)to buy 1.1 [USDT](https://www.coindesk.com/price/tether/).
   Both of those coins are supposed to be worth exactly $1. 

1. Nimrod Naive knows that if something looks too good to be true it probably is.
   However, he checks the Hackswap contract's bytecode and verifies it is 100% identical to Uniswap.
   He decides this means the contract can be trusted to behave exactly as Uniswap does.

1. Nimrod approves an allowance of 1000 DAI for the Hackswap contract.
   Nimrod expects to call the swap function on Hackswap and receive back nearly 1100 USDT.


1. Before Nimrod's swap transaction is sent to the blockchain, Helena Hacker sends a transaction from an L1 contract with the same address as Hackswap.
   This transaction transfers 1000 DAI from Nimrod's address to Helena Hacker's address.
   If this transaction were to come from the same address as Hackswap on L2, it would be able to transfer the 1000 DAI because of the allowance Nimrod *had* to give Hackswap in the previous step to swap tokens.
   
   Nimrod, despite his naivete, is protected because OP Mainnet modified the transaction's `tx.origin` (which is also the initial `msg.sender`).
   That transaction comes from a *different* address, one that does not have the allowance.

**Note:** It is simple to create two different contracts on the same address in different chains. 
But it is nearly impossible to create two that are different by a specified amount, so Helena Hacker can't do that.

</details>



## Transactions

### Transaction costs

[Transaction costs on OP Mainnet](./transaction-fees.md) include an [L2 execution fee](./transaction-fees.md#the-l2-execution-fee) and an [L1 data fee](./transaction-fees.md#the-l1-data-fee). 

#### EIP-1559

The L2 execution fee is calculated using [EIP-1559](https://notes.ethereum.org/@vbuterin/eip-1559-faq). The cost of a unit of gas is composed of two components:

- **Base fee**: This fee is the same for all transactions in a block. It varies between blocks based on the difference between the actual size of the blocks (which depends on the demand for block space) and the target block size. When the block uses more gas than the target block size the base fee goes up to discourage demand. When the block uses less gas than the target block size the base fee goes down to encourage demand.
- **Priority fee**: This fee is specified in the transaction itself and varies between transactions. Block proposers are expected to select the transactions that offer them the highest priority fees first.

The EIP-1559 parameters are different:

  | Parameter | OP Mainnet value | Ethereum value (for reference) |
  | - | -: | -: |
  | Block gas limit | 30,000,000 gas | 30,000,000 gas
  | Block gas target | 5,000,000 gas | 15,000,000 gas
  | EIP-1559 elasticity multiplier | 6 | 2
  | EIP-1559 denominator | 50 | 8
  | Maximum base fee increase (per block) | 10% | 12.5%
  | Maximum base fee decrease (per block) | 2% | 12.5%
  | Block time in seconds | 2 | 12



### Transaction pool (a.k.a. mempool)

As in L1 Ethereum, transactions are stored in a pool until they can be included in a block.
To minimize MEV, Bedrock's mempool is private. 
To submit transactions, you will need to configure `op-geth` to forward transactions to the sequencer. This may change in the future.

The sequencer processes transactions in the mempool in order of their base and priority fees.


## Blocks

There are several differences in the way blocks are produced between L1 Ethereum and OP Mainnet.


| Parameter           | L1 Ethereum | Optimism Bedrock |
| - | -: | -: |
| Time between blocks | 12 seconds<sup>1</sup>  | 2 seconds |
| Block target size   | 15,000,000 gas | 5,000,000 gas |
| Block maximum size  | 30,000,000 gas | 30,000,000 gas | 

(1) This is the ideal. 
    If any blocks are missed it could be an integer multiple such as 24 seconds, 36 seconds, etc.

**Note:** The L1 Ethereum parameter values are taken from [ethereum.org](https://ethereum.org/en/developers/docs/blocks/#block-time).


## Network specifications

### JSON-RPC differences

OP Mainnet uses the same [JSON-RPC API](https://eth.wiki/json-rpc/API) as Ethereum.
Some additional OP Mainnet specific methods have been introduced.
See the full list of [custom JSON-RPC methods](./json-rpc.md) for more information.


## Contract addresses

The addresses in which various infrastructure contracts are installed are different between L1 Ethereum and OP Mainnet.
For example, [WETH9](https://github.com/gnosis/canonical-weth/blob/master/contracts/WETH9.sol) is installed on L1 Ethereum on [address `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2`](https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2). 
On OP Mainnet the same contract is installed on [address `0x4200000000000000000000000000000000000006`](https://explorer.optimism.io/address/0x4200000000000000000000000000000000000006).

"
ethereum-optimism/community-hub,json-rpc.md,developers/build/json-rpc.md,"---
title: JSON-RPC API
lang: en-US
---


There are several OP Mainnet components with an RPC API:

## Rollup node (op-node)


[*Rollup node*](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/rollup-node.md) refers to the component in the protocol specifications. 
The OP Mainnet implementation is called *op-node*.

The `op-node` component implements several RPC methods:

### `optimism_outputAtBlock`

Get the output root at a specific block.
This method is documented in [the specifications](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/rollup-node.md#output-method-api).

```sh
curl -X POST -H ""Content-Type: application/json"" --data  \
   '{""jsonrpc"":""2.0"",""method"":""optimism_outputAtBlock"",""params"":[""<block_number>""],""id"":1}' \
   http://localhost:9545
```

Sample output:

```json
{
   ""jsonrpc"":""2.0"",
   ""id"":1,
   ""result"":[
      ""0x0000000000000000000000000000000000000000000000000000000000000000"",
      ""0xabe711e34c1387c8c56d0def8ce77e454d6a0bfd26cef2396626202238442421""
   ]
}
```

### `optimism_syncStatus`

Get the synchronization status.

```sh
curl -X POST -H ""Content-Type: application/json"" --data \
    '{""jsonrpc"":""2.0"",""method"":""optimism_syncStatus"",""params"":[],""id"":1}'  \
    http://localhost:9545
```

Sample output:

```json
{
  ""jsonrpc"": ""2.0"",
  ""id"": 1,
  ""result"": {
    ""current_l1"": {
      ""hash"": ""0x5adcfcbd1c2fcf9e06bfdaa8414a4586f84e11f487396abca940299eb0ed2da5"",
      ""number"": 7569281,
      ""parentHash"": ""0xfd022ca8a8c4e0f3bfd67081c18551840ea0717cc01d9a94601e1e41e92616d3"",
      ""timestamp"": 1662862860
    },
    ""head_l1"": {
      ""hash"": ""0x5c12fde5ea79aefe4b52c0c8cc0e0eb33a2ccb423cb3cd9c9132e18ad42e89b6"",
      ""number"": 8042823,
      ""parentHash"": ""0x74818f8ecaa932431bf9523e929dcfa11ab382c752529d8271a24810884a2551"",
      ""timestamp"": 1669735356
    },
    ""safe_l1"": {
      ""hash"": ""0x0000000000000000000000000000000000000000000000000000000000000000"",
      ""number"": 0,
      ""parentHash"": ""0x0000000000000000000000000000000000000000000000000000000000000000"",
      ""timestamp"": 0
    },
    ""finalized_l1"": {
      ""hash"": ""0x0000000000000000000000000000000000000000000000000000000000000000"",
      ""number"": 0,
      ""parentHash"": ""0x0000000000000000000000000000000000000000000000000000000000000000"",
      ""timestamp"": 0
    },
    ""unsafe_l2"": {
      ""hash"": ""0x1cad05886ec0e2cda728674e00eadcbb9245ff34c0bfd86c866673a615c1c43a"",
      ""number"": 1752,
      ""parentHash"": ""0x0115dbbd26aaf9563d7e3cad65bad41926d94b2643ccb080f71e394c2c3d62a3"",
      ""timestamp"": 1662861300,
      ""l1origin"": {
        ""hash"": ""0x43fe1601041056e9a2a5dabaa20715518ae0058abf67a69f5ebdd53b1f6ff02f"",
        ""number"": 7569162
      },
      ""sequenceNumber"": 0
    },
    ""safe_l2"": {
      ""hash"": ""0x1cad05886ec0e2cda728674e00eadcbb9245ff34c0bfd86c866673a615c1c43a"",
      ""number"": 1752,
      ""parentHash"": ""0x0115dbbd26aaf9563d7e3cad65bad41926d94b2643ccb080f71e394c2c3d62a3"",
      ""timestamp"": 1662861300,
      ""l1origin"": {
        ""hash"": ""0x43fe1601041056e9a2a5dabaa20715518ae0058abf67a69f5ebdd53b1f6ff02f"",
        ""number"": 7569162
      },
      ""sequenceNumber"": 0
    },
    ""finalized_l2"": {
      ""hash"": ""0x6758307d692d4f2f6650acd3762674749a0c1cc2530b9b481845d0f8ee1bd456"",
      ""number"": 0,
      ""parentHash"": ""0x0000000000000000000000000000000000000000000000000000000000000000"",
      ""timestamp"": 1662857796,
      ""l1origin"": {
        ""hash"": ""0xb0bbb79a00fb8485185b1bedfac386812d662e1cddba77b67a26e1ed9ba8f0ec"",
        ""number"": 7568910
      },
      ""sequenceNumber"": 0
    }
  }
}
```

### `optimism_rollupConfig`

Get the rollup configuration parameters.

```sh
curl -X POST -H ""Content-Type: application/json"" --data \
    '{""jsonrpc"":""2.0"",""method"":""optimism_rollupConfig"",""params"":[],""id"":1}'  \
    http://localhost:9545
```

Sample output:

```json
{
   ""jsonrpc"":""2.0"",
   ""id"":1,
   ""result"":{
      ""genesis"":{
         ""l1"":{
            ""hash"":""0xb0bbb79a00fb8485185b1bedfac386812d662e1cddba77b67a26e1ed9ba8f0ec"",
            ""number"":7568910
         },
         ""l2"":{
            ""hash"":""0x6758307d692d4f2f6650acd3762674749a0c1cc2530b9b481845d0f8ee1bd456"",
            ""number"":0
         },
         ""l2_time"":1662857796
      },
      ""block_time"":2,
      ""max_sequencer_drift"":120,
      ""seq_window_size"":120,
      ""channel_timeout"":30,
      ""l1_chain_id"":5,
      ""l2_chain_id"":28528,
      ""p2p_sequencer_address"":""0x59dc8e68a80833cc8a9592d532fed42374c8b5dc"",
      ""fee_recipient_address"":""0xdffc6a1c238ff9504b055ad7efeee0148f2d62bd"",
      ""batch_inbox_address"":""0xfeb2acb903f95fb5f5497157c0727a7d16e3fd16"",
      ""batch_sender_address"":""0x4ff79526ea1d492a3db2aa210d7318ff13f2012c"",
      ""deposit_contract_address"":""0xa581ca3353db73115c4625ffc7adf5db379434a8""
   }
}
```

### `optimism_version`

Get the software version.

```sh
curl -X POST -H ""Content-Type: application/json"" --data \
    '{""jsonrpc"":""2.0"",""method"":""optimism_version"",""params"":[],""id"":1}' \
    http://localhost:9545
```

Sample output:

```json
{
   ""jsonrpc"":""2.0"",
   ""id"":1,
   ""result"":""v0.0.0-""
}
```

### Peer to peer synchronization

Optionally, the rollup node can provide [peer to peer synchronization](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/rollup-node-p2p.md) to provide pending L2 blocks to other rollup nodes.


## Execution engine (op-geth)


[*Execution engine*](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/rollup-node.md) refers to the component in the protocol specifications. 
The OP Mainnet implementation is called *op-geth*.

The execution engine's RPC interface is identical to [the upstream Geth RPC interface](https://geth.ethereum.org/docs/rpc/server). This includes the ability to provide [snap sync](https://github.com/ethereum/devp2p/blob/master/caps/snap.md) functionality to other execution engines.

The responses are nearly identical too, except we also include the L1 gas usage and price information.

## Legacy geth

The legacy geth provides information about the blockchain prior to Bedrock.
It implements the read-only methods of [the interface used by L1 execution engines](https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/execution-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=false&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false).
It does not implement `eth_sendTransaction` and `eth_sendRawTransaction`, because they don't make sense in a read-only copy.

"
ethereum-optimism/community-hub,run-a-node.md,developers/build/run-a-node.md,"<script>
export default {
  mounted () {
    window.location.href=""/docs/developers/nodes/intro""
  }
}
</script>

"
ethereum-optimism/community-hub,system-contracts.md,developers/build/system-contracts.md,"---
title: Interacting with OP Mainnet contracts
lang: en-US
---

OP Mainnet is composed, in part, of a series of smart contracts on both L1 (Ethereum) and L2 (OP Mainnet).
You may want to interact with these contracts for any number of reasons, including:

- Sending messages between L1 and L2
- Sending tokens between L1 and L2
- Querying information about the current [L1 data fee](./transaction-fees.md#the-l1-data-fee)
- And lots more!

On this page we'll show you how to work with these contracts directly from other contracts and how to work with them from the client side.

## Finding contract addresses

You'll need to find the address of the particular contract that you want to interact with before you can actually interact with it.
Check out the [Networks and Connection Details page](../../useful-tools/networks.md) for links to the contract addresses for each network.
You can also find the addresses for all networks in the [deployments folder](https://github.com/ethereum-optimism/optimism/tree/master/packages/contracts/deployments) of the [`contracts` package](https://github.com/ethereum-optimism/optimism/tree/master/packages/contracts).

## Interacting from another contract

All you need to interact with the OP Mainnet system contracts from another contract is an address and an interface.
You can follow [the instructions above](#finding-contract-addresses) to find the address of the contract you want to interact with.
Now you simply need to import the appropriate contracts.

### Installing via NPM or Yarn

We export a package [`@eth-optimism/contracts`](https://www.npmjs.com/package/@eth-optimism/contracts?activeTab=readme) that makes it easy to use the OP Mainnet contracts within NPM or Yarn based projects.
Install the package as follows:

```
npm install @eth-optimism/contracts
```

### Importing contracts

Simply import the desired contract or interface from the `@eth-optimism/contracts` package:

```solidity
import { SomeOptimismContract } from ""@eth-optimism/contracts/path/to/SomeOptimismContract.sol"";
```

Please note that `path/to/SomeOptimismContract` is the path to the contract [within this folder](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts/contracts).
For example, if you wanted to import the [`L1CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L1/messaging/L1CrossDomainMessenger.sol) contract, you would use the following import:

```solidity
import { L1CrossDomainMessenger } from ""@eth-optimism/contracts/L1/messaging/L1CrossDomainMessenger.sol"";
```

### Getting L2 contract addresses

Addresses of system contracts on the L2 side of the network are the same on every network.
We provide these addresses as constants within the [`Lib_PredeployAddresses`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/libraries/constants/Lib_PredeployAddresses.sol) contract.

## Interacting from the client side

Just like when interacting from another contract, we've created a few packages that make it easy to interact with the OP Mainnet system contracts from the client side.

### Installing via NPM or Yarn

You can use the [`@eth-optimism/contracts`](https://www.npmjs.com/package/@eth-optimism/contracts?activeTab=readme) package to interact with the OP Mainnet system contracts from a JavaScript or TypeScript based project.
Install the package as follows:

```
npm install @eth-optimism/contracts
```

### Getting contract artifacts, interfaces, and ABIs

You can get the compiler artifact, bytecode, and ABI for any OP Mainnet contract as follows:

```ts
import { getContractDefinition } from '@eth-optimism/contracts'

const artifact = getContractDefinition('SomeOptimismContract')
const abi = artifact.abi
const bytecode = artifact.bytecode
const deployedBytecode = artifact.deployedBytecode
```

Similarly, you can also get [ethers Interface objects](https://docs.ethers.io/v5/api/utils/abi/interface/) for any contract:

```ts
import { getContractInterface } from '@eth-optimism/contracts'

const iface = getContractInterface('SomeOptimismContract')
```

### Getting L2 contract addresses

You can get the address of any L2 contract as follows:

```ts
import { predeploys } from '@eth-optimism/contracts'

const address = predeploys.CONTRACT_NAME_GOES_HERE
```

"
ethereum-optimism/community-hub,testing-dapps.md,developers/build/testing-dapps.md,"---
title: Testing Decentralized Applications for OP Mainnet
lang: en-US
---

For the most part running applications on OP Mainnet is identical to running them on Ethereum, so the testing is identical too.
In this article you learn the best practices for OP Mainnet testing where there are differences.


## Unit tests and single layer integration tests

The vast majority of tests do not involve any OP Mainnet-specific features.
In those cases, while you *could* test everything on OP Mainnet or a test network, that would normally be inefficient.
Most Ethereum development stacks include features that make testing easier, which normal Ethereum clients, such as geth (and our modified version, `op-geth`) don't support.
Therefore, it is a good idea to run the majority of tests, which do not rely on OP Mainnet-specific features, in the development stack.
It is a lot faster.

Ideally you would want to be able to run some tests on an OP test network, either a [local development environment](dev-node.md) or [the test network](../../useful-tools/networks.md#op-goerli).
This would be a much slower process, but it would let you identify cases where [the equivalence between OP Mainnet and Ethereum breaks down](differences.md) (or the equivalence between Ethereum itself and the development stack, for that matter).

## Multilayer integration tests

Some dapps need OP Mainnet-specific features that aren't available as part of the development stack.
For example, if your decentralized application relies on [inter-domain communication](../bridge/messaging.md), the effort of developing a stub to let you debug it in a development stack is probably greater than the hassle of having the automated test go to [a local development environment](dev-node.md) each time.


## Integration with other products

In many cases a decentralized application requires the services of other contracts. 
For example, [Perpetual v. 2](https://support.perp.com/hc/en-us/articles/5748372509081-Perpetual-Uniswap) cannot function without [Uniswap v. 3](https://uniswap.org/blog/uniswap-v3).

If that is the case you can use [mainnet forking](https://hardhat.org/hardhat-network/guides/mainnet-forking.html). 
It works with OP Mainnet. 
Alternatively, you can connect to our [test network](../../useful-tools/networks.md#op-goerli) if those contracts are also deployed there (in many cases they are).

"
ethereum-optimism/community-hub,transaction-fees.md,developers/build/transaction-fees.md,"---
title: Transaction fees on OP Mainnet
lang: en-US
---

Transaction fees on OP Mainnet work a lot like fees on Ethereum.
However, Layer 2 introduces some new paradigms that means it can never be exactly like Ethereum.
Luckily, OP Mainnet's [EVM equivalence](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306) makes these differences easy to understand and even easier to handle within your app.

This page includes the formula for calculating the gas cost of transactions on OP Mainnet.
You can [use our SDK](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas) to calculate those costs for you. If the SDK is too heavy, or you just want to walk through some reference code, use [@eth-optimism/fee-estimation](https://github.com/ethereum-optimism/optimism/tree/develop/packages/fee-estimation). OP Stack fee estimation will soon be natively availabe in your favorite Ethereum tools.

There are two costs for transaction on OP Mainnet: the L2 execution fee and the L1 data/security fee.

## The L2 execution fee

Just like on Ethereum, transactions on OP Mainnet have to pay **gas** for the amount of computation and storage that they use.
Every L2 transaction will pay some **execution fee**, equal to the amount of gas used by the transaction multiplied by the gas price attached to the transaction.
This is exactly how fees work on Ethereum with the added bonus that gas prices on OP Mainnet are seriously low.

Here's the (simple) math:

```
transaction_gas_price = l2_base_fee + l2_priority_fee
l2_execution_fee = transaction_gas_price * l2_gas_used
```

The amount of L2 gas used depends on the particular transaction that you're trying to send.
Thanks to [EVM equivalence](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306), transactions typically use approximately the same amount of gas on OP Mainnet as they do on Ethereum.
Gas prices fluctuate with time and congestion, but you can always check the current estimated L2 gas price on the [public OP Mainnet dashboard](https://optimism.io/gas-tracker).



### Base fee

The [base fee](https://eips.ethereum.org/EIPS/eip-1559#simple-summary) is charged for each unit of gas that a transaction uses.
It is the same base fee for each transaction in the block, and is determined by formula based on the base fee of the previous block and how full that block was.


[The EIP-1559 parameters](./differences.md#eip-1559) have different values in OP Mainnet (and most other OP Stack chain) than those on L1 Ethereum.
As a result, in every block the base fee can be between 98% and 110% of the previous value. 

::: info Base fee volatility

As blocks are produced every two seconds, the base fee can be between 54% and 1,745% of the value a minute earlier. If it takes the user fourteen seconds to approve the transaction in the wallet, the base fee can almost double in that time.
For now, without protocol adjustments, we recommend setting your `Max Fee` to _at least_ 0.1 gwei. This value will get your user's transaction included in the next block 98% of the time.

:::

The base fee specified in the transaction (`max_gas_fee - max_priority_fee`) is not necessarily the base fee that the user will pay, *it is merely an upper limit to that amount*.
In most cases, it makes sense to specify a much higher base fee than the current value, to ensure acceptance. 

For example, as I'm writing this, ETH is about $2000, and a cent is about 5000 gwei. 
Assuming 20% of a cent is an acceptable base fee for a transaction, and that the transaction is a big 5,000,000 gas one (at the target block size), this gives us a base fee of 200,000 wei. 
That plus a reasonable priority fee would be the value to put in the transaction as max gas fee, even though the L2 base fee (as I'm writing this) is 2,420 wei. 

You can get the current L2 base fee [in the gas tracker dashboard](https://optimism.io/gas-tracker).



### Priority fee

In contrast to the base fee, the priority fee in the transaction is the amount that the user pays, and therefore it makes sense to keep it as low as possible.
For OP Chains, you can set the `Max Priority Fee` to as low as 0.0001 gwei.


## The L1 data fee

OP Mainnet differs from Ethereum because all transactions on OP Mainnet are also published to Ethereum.
This step is crucial to the security properties of OP Mainnet because it means that all of the data you need to sync an OP Mainnet node is always publicly available on Ethereum.
It's what makes OP Mainnet an L2.

Users on OP Mainnet have to pay for the cost of submitting their transactions to Ethereum.
We call this the **L1 data fee**, and it's the primary discrepancy between OP Mainnet (and other L2s) and Ethereum.
Because the cost of gas is so expensive on Ethereum, the L1 data fee typically dominates the total cost of a transaction on OP Mainnet.
This fee is based on four factors:

1. The current gas price on Ethereum.
2. The gas cost to publish the transaction to Ethereum. This scales roughly with the size of the transaction (in bytes).
3. A fixed overhead cost denominated in gas. This is currently set to 188.
4. A dynamic overhead cost which scales the L1 fee paid by a fixed number. This is currently set to 0.684.

Here's the math:

```
l1_data_fee = l1_gas_price * (tx_data_gas + fixed_overhead + noncalldata_gas) * dynamic_overhead
```

Where `tx_data_gas` is:

```
tx_data_gas = count_zero_bytes(tx_data) * 4 + count_non_zero_bytes(tx_data) * 16
```

You can read the parameter values from the [gas oracle contract](https://explorer.optimism.io/address/0x420000000000000000000000000000000000000F#readContract).

::: warning NOTE
Ethereum has limited support for adding custom transaction types.
As a result, unlike the L2 execution fee, **users are not able to set limits for the L1 data fee that they may be charged**.
The L1 gas price used to charge the data fee is automatically updated when new data is received from Ethereum.
**Spikes in Ethereum gas prices may result in users paying a higher or lower than estimated L1 data fee, by up to 25%.**

[See here for a detailed explanation why the difference is capped at 25%](https://help.optimism.io/hc/en-us/articles/4416677738907-What-happens-if-the-L1-gas-price-spikes-while-a-transaction-is-in-process).
:::


## Transaction fees' effect on software development

### Sending transactions

The process of sending a transaction on OP Mainnet is identical to the process of sending a transaction on Ethereum.
When sending a transaction, you should provide a gas price greater than or equal to the current L2 gas price, or use [transaction type 2](https://www.educative.io/answers/type-0-vs-type-2-ethereum-transactions) and a priority fee that is within the same range as the transactions included in the latest block.
Similarly, you should set your transaction gas limit in the same way that you would set your transaction gas limit on Ethereum (e.g. via `eth_estimateGas`).


### Displaying fees to users

Many Ethereum applications display estimated fees to users by multiplying the gas price by the gas limit.
However, as discussed earlier, users on OP Mainnet are charged both an L2 execution fee and an L1 data fee.
As a result, you should display the sum of both of these fees to give users the most accurate estimate of the total cost of a transaction.

[See here for a code sample using the JavaScript SDK](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas)

####  the L2 execution fee

You can estimate the L2 execution fee by multiplying the gas price by the gas limit, just like on Ethereum.

#### Estimating the L1 data fee

You can use the SDK [(see here)](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas).
Alternatively, you can estimate the L1 data fee using the `GasPriceOracle` predeployed smart contract located at [`0x420000000000000000000000000000000000000F`](https://explorer.optimism.io/address/0x420000000000000000000000000000000000000F).
[The `GasPriceOracle` contract](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/src/L2/GasPriceOracle.sol) is located at the same address on every Optimism network (mainnet and testnet).
To do so, call `GasPriceOracle.getL1Fee(<unsigned RLP encoded transaction>)`.

#### Estimating the total fee

You can estimate the total fee by combining your estimates for the L2 execution fee and L1 data fee.

### Sending max ETH

Sending the maximum amount of ETH that a user has in their wallet is a relatively common use case.
When doing this, you will need to subtract the estimated L2 execution fee and the estimated L1 data fee from the amount of ETH you want the user to send.
Use the logic described above for estimating the total fee.

## Additional RPC Errors

### Insufficient funds

- Error code: `-32000`
- Error message: `invalid transaction: insufficient funds for l1Fee + l2Fee + value`

You'll get this error when attempting to send a transaction and you don't have enough ETH to pay for the value of the transaction, the L2 execution fee, and the L1 data fee.
You might get this error when attempting to send max ETH if you aren't properly accounting for both the L2 execution fee and the L1 data fee.

"
ethereum-optimism/community-hub,known-issues.md,developers/known-issues.md,"---
title: Known Issues
lang: en-US
---

## Transactions stuck in the transaction pool

OP Chain uses EIP-1559, but with different parameters than L1 Ethereum.
As a result, while the base fee on L1 can grow by up to 12.5% in a twelve second period (in the case of a single 30M gas block), the L2 base fee can grow by up to 77% (in the case of six 30M gas blocks).
However, it still shrinks by only up to 12.5% in the same twelve second period (if all the blocks are empty).

If the maximum fee per gas specified by the transaction is less than the block base fee, it does not get included until the base fee drops to below the value in the transaction.
When this happens, some users may see their transaction become stuck. 
No funds are lost, but the transaction does not clear on its own. 

We have a workaround that users and wallet operators can implement immediately, and we expect a protocol-level fix to be live by the end of Q4.

### Recommendation

Set the maximum fee per gas for transactions to a relatively high value, such as 0.1 gwei. 
This will *not* increase the transaction cost because the same base fee, determined by a formula, is charged to all the transactions in the block. 
[See here for more details](../guides/wallet-dev.md#base-fee).
To save on the cost of L2 gas you want to minimize the max priority fee.

Also, if the [current base fee](https://optimism.io/gas-tracker) is comparable to 0.1 gwei or higher, you might want to suggest to users a higher multiple of the base fee than you would on L1 Ethereum, because it can grow faster in the time interval between transaction creation and transaction signing and submission. 

#### Recommendations for wallet developers

Wallets are usually in charge of determining the default priority fee and max fee that a transaction would include, so the above recommendations can be applied directly.


#### Recommendations for dapp developers

As a dapp developer you can usually override the default recommendation of the wallet
(see, for example, [ethers](https://github.com/ethers-io/ethers.js/blob/v5.7/packages/contracts/lib/index.d.ts#L10-L11)). 
As long as not all wallets are upgraded according to our recommendations, it makes sense for dapps to get the current base fee and recommend a value based on that.


#### Recommendations for users

As a user you are the final authority on transaction fields.
[See the help center](https://help.optimism.io/hc/en-us/articles/16711400204315-Managing-the-gas-fees-that-make-up-the-L2-execution-fee) for an explanation of how to modify the fees.

If you already have a transaction that is stuck and you want to cancel it, or increase its base fee, submit another transaction with the same nonce value. 
[See the help center for information on how to do it](https://help.optimism.io/hc/en-us/articles/17045804513307-What-to-do-with-a-stuck-pending-transaction-).



## Known non-issues

These are issues that appear like they might be a problem, but really aren't.

- **Deposit transactions don't have a chainId on L2**.

  [Deposit transactions](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/specs/deposits.md#the-deposited-transaction-type) are transactions added to the L2 blockchain as part of the block derivation process.
  These transactions come from a dummy address and don't have a signature.
  Because in Ethereum the chainID is encoded as part of the signature, this means there is no recoverable chainID for these transactions.

  This is not a problem because the only source of deposit transactions is the block derivation process. 
  There shouldn't be a need to recover the chainID.


"
ethereum-optimism/community-hub,media.md,developers/media.md,"---
title: Developer Videos
lang: en-US
---

These are developer videos.
[See here for governance videos](../governance/media.md).

### Getting started with OP Mainnet

In this video you learn how to use OP Mainnet (or a test network) for your own development:

- [Deploy a contract on OP Goerli (Foundry) (1:24)](https://youtu.be/_Y6CwsYgqwI?t=84)
- [Interact with an OP Goerli contract (Foundry) (2:20)](https://youtu.be/_Y6CwsYgqwI?t=140)
- [Use the Etherscan block explorer with OP Goerli (2:53)](https://youtu.be/_Y6CwsYgqwI?t=173)
- [Getting started docs, with other development stacks (4:45)](https://youtu.be/_Y6CwsYgqwI?t=285)
- [Getting test ETH (6:00)](https://youtu.be/_Y6CwsYgqwI?t=360)
- [The OP Mainnet Bridge (7:25)](https://youtu.be/_Y6CwsYgqwI?t=445)
- [Inter-layer communication, between Ethereum and OP Mainnet, or Goerli and OP Goerli (8:48)](https://youtu.be/_Y6CwsYgqwI?t=528)
- [Gas cost calculation (10:20)](https://youtu.be/_Y6CwsYgqwI?t=620)


<iframe src=""https://www.youtube.com/embed/_Y6CwsYgqwI"" title=""Getting Started with OP Mainnet"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>

## ETHDenver 2023 

February 24th to Mar 5th, 2023

<iframe width=""682"" height=""384"" src=""https://www.youtube.com/embed/Q5TL_AJhuro"" title=""Optimism at ETHDenver 2023"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"" allowfullscreen></iframe>

### Scaling Ethereum - Panel with Liam Horne

OP Labs' CEO, Liam Horne joined Jesse from Base, Eva from The Graph Foundation, and Stani from Aave for a panel covering how L2s are scaling Ethereum for global adoption, moderated by Molly from Protocol Labs.

<iframe width=""720"" height=""407"" src=""https://www.youtube.com/embed/bBNmPNM8U_c"" title=""Scaling Ethereum for Global Adoption with L2 Panel"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"" allowfullscreen></iframe>


### Doing Decentralization Identity Right - Kelvin Fichter

From the OP Labs DevRel team, Kelvin Fichter talked about building decentralized, attestation-based identity onchain. Come for the knowledge, stay for the slide art.

<iframe width=""720"" height=""407"" src=""https://www.youtube.com/embed/o0N1Z9AyrEM"" title=""Doing Decentralized Identity Right with Kelvin Fichter"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"" allowfullscreen></iframe>


### Web3 Identity Off-Chain, On-Chain, and Both - Panel with Kelvin Fichter

He continued to share his thoughts on a panel, where he sat down Masha Healy & Evin McMullen as they all discussed Web3 identity off-chain, on-chain, or both.

<iframe width=""720"" height=""407"" src=""https://www.youtube.com/embed/b7UTF1Ri7AM"" title=""Web3 identity off-chain, on-chain, and both with Kelvin Fichter, Masha Healy &amp; Evin McMullen"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"" allowfullscreen></iframe>



### Kelvin Interviews ETHDenver

<iframe width=""682"" height=""384"" src=""https://www.youtube.com/embed/TXDqMrjPAKg"" title=""Kelvin Does Denver"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"" allowfullscreen></iframe>


## ETHOnline 2022 | Optimism Summit

September 22nd, 2022

### Modular OP Stack - Karl Floersch

This talk covers the OP Stack chain software, and how the Bedrock release will enable deployments of op-chains which serve new use cases, are future proof, and will all one day fit together to form the Superchain.

<iframe src=""https://www.youtube.com/embed/jlKPjiDu_KM?list=RDCMUCfF9ZO8Ug4xk_AJd4aeT5HA"" title=""Modular OP Stack - Karl Floersch"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>

### Introduction to Architecture - Joshua Gutow

This talks covers bedrock‚Äôs architecture. It explains how redesigning the rollup architecture in bedrock reduces fees & increases implementation simplicity. It also covers the various components of the system & how they interact.

<iframe src=""https://www.youtube.com/embed/fkoTMchOFPI?list=RDCMUCfF9ZO8Ug4xk_AJd4aeT5HA"" title=""Introduction to Architecture - Joshua Gutow"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>

### Modular sequencing - Norswap Laurent

In this video you learn the design space around two design choices related to sequencing:

- *who* sequences (decentralization)
- *how* they sequence (MEV!)

<iframe src=""https://www.youtube.com/embed/aKxS16TG2jk?list=PLXzKMXK2aHh4vbe7GLQfOnL-QJ1O5EqMv"" title=""Modular sequencing - Norswap Laurent"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>


### Pluggable data availability - Protolambda

In this talk protolambda explains how the next OP Mainnet upgrade improves the rollup with modular design, and how this can be utilized to quickly adopt future scaling improvements like EIP-4844 (a.k.a. proto-danksharding). 
OP Labs is contributing to L1 research and development to increase the data availability used for securing all L2s.

<iframe src=""https://www.youtube.com/embed/-xWpalvZeEU?list=PLXzKMXK2aHh4vbe7GLQfOnL-QJ1O5EqMv"" title=""Pluggable data availability - Protolambda"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>


### Panel: State of 4844

The end game for data availability on Ethereum - Full Sharding - and how EIP-4844 gets us closer to that goal. This video discusses:

- Where we are with the implementation of EIP-4844 and what else was needed to be done before CFI.
- How the community could help us ship EIP-4844.
- Data Availability and the concept of a Data Availability Layer; analogous to the CL and EL. This concept helps reason about how data, i.e. the blobs, fits in Ethereum.

<iframe src=""https://www.youtube.com/embed/uxYkGdCFsjI?list=PLXzKMXK2aHh4vbe7GLQfOnL-QJ1O5EqMv"" title=""Panel: State of 4844"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>



### Intro to Quix - Mark Dawson

The NFT ecosystem on OP Mainnet is an exciting, growing space. 
Mark Dawson is the co-founder of Quix, the largest NFT marketplace on OP Mainnet. 
He discusses early NFT communities on OP Mainnet, the upcoming NFT bridge, composable NFTs, and how to get started in the OP NFT ecosystem.

<iframe src=""https://www.youtube.com/embed/Z8L8vNDgJjY?list=PLXzKMXK2aHh4vbe7GLQfOnL-QJ1O5EqMv"" title=""Intro to Quix - Mark Dawson"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>

"
ethereum-optimism/community-hub,nodes,developers/nodes,"
"
ethereum-optimism/community-hub,intro.md,developers/nodes/intro.md,"---
title: Building a Node from Source
lang: en-US
---

Here are the instructions if you want to build you own node without relying on our images. These instructions were generated on an Ubuntu 20.04 LTS box, but they should work with other systems too.

# Prerequisites

## Hardware requirements

Nodes need to process and store the transaction history of OP Mainnet or OP Sepolia. They need to be relatively powerful machines (real or virtual). We recommend at least 16 GB RAM. We recommend a 2TB SSD for OP Mainnet, our current archive node usage is ~1TB. We recommend a 256GB SSD for OP Sepolia, or current full node usage is ~1.6GB and archive node usage is ~5.6GB.

## Software requirements

You‚Äôll need the following software installed to follow this tutorial:

- [Git](https://git-scm.com/)

- [Go](https://go.dev/)

- [nvm](https://github.com/nvm-sh/nvm)

- [Node](https://nodejs.org/en)

- [Pnpm](https://pnpm.io/)

- [Foundry](https://github.com/foundry-rs/foundry#installation)

- [Make](https://linux.die.net/man/1/make)

- [jq](https://github.com/jqlang/jq)

- [direnv](https://direnv.net/)

- [zstd](https://facebook.github.io/zstd/)

This tutorial was checked on:
| Software                        | Version         | Installation command(s) |
| ------------------------------- | --------------- | ----------------------- |
| Ubuntu                          | 20.04 LTS       |
| git, curl, jq, make, and zstd   | OS default      | `sudo apt update`, <br/>`sudo apt install -y git curl make jq zstd`
| Go                              | 1.20            | `wget https://go.dev/dl/go1.20.linux-amd64.tar.gz`, <br/> `tar xvzf go1.20.linux-amd64.tar.gz`, <br/> `sudo cp go/bin/go /usr/bin/go`, <br/>`sudo mv go /usr/lib`, <br/>`echo export GOROOT=/usr/lib/go >> ~/.bashrc` |
| Node                            | 18.17.1        | `nvm install 18.17.1`, <br/> `nvm use 18.17.1`
| pnpm                            | 8.6.12           | `sudo npm install -g pnpm` |
| Foundry                         | 0.2.0           | `curl -L https://foundry.paradigm.xyz | bash`, <br/> `. ~/.bashrc`, <br/> `foundryup` |

## Building the software

### Build the Optimism Monorepo

1. Navigate to your working directory.
   
1. Clone the [Optimism Monorepo](https://github.com/ethereum-optimism/optimism).

    ```bash
    git clone https://github.com/ethereum-optimism/optimism.git
    ```

1. Install required modules. 

    ```bash
    cd optimism
    pnpm install
    ```

1. Build the various packages inside of the Optimism Monorepo.

    ```bash
    make op-node
    pnpm build
    ```

This process will take some time, so you can move onto the next section while the build completes.

### Build op-geth

1. Navigate to your working directory.

1. Clone [`op-geth`](https://github.com/ethereum-optimism/op-geth):

    ```bash
    git clone https://github.com/ethereum-optimism/op-geth.git
    ```


1. Build `op-geth`:

    ```bash
    cd op-geth    
    make geth
    ```

### (Optional - OP Mainnet Archive Node) Build l2geth

::: info OP Mainnet Archive Node

This step is only necessary for OP Mainnet archive nodes. If you're building a OP Testnet archive node, you do not need to do this step.

:::

1. Navigate to your working directory

2. Clone [`l2geth`](https://github.com/ethereum-optimism/optimism-legacy)

    ```bash
    git clone https://github.com/ethereum-optimism/optimism-legacy.git
    ```

3. Build `l2geth`:
   
   ```bash
   cd optimism-legacy/l2geth
   make
   ```
   
<br/>

The rest of the steps depend on whether you want to run an OP Mainnet or OP Sepolia node.

[Click here to continue building on OP Mainnet](./mainnet.md)

[Click here to continue building on OP Testnet](./testnet.md)
"
ethereum-optimism/community-hub,mainnet.md,developers/nodes/mainnet.md,"---
title: Running OP Mainnet from Source
lang: en-US
---

#### [Please follow these steps first if you have not done so already.](./intro.md)

### Get the data directory

The next step is to download the data directory for `op-geth`.
You will need 500+ GB for this part alone.

1. Download the data directory snapshot. This is a large file so expect it to take some time. [Bedrock Data Directory (303GB)](https://datadirs.optimism.io/mainnet-bedrock.tar.zst)

::: tip Protip
Use a tool like [aria2](https://aria2.github.io/) to reduce the chance of your data directory being corrupted.
:::

2. Check the validity of your download. This is an important step. Corrupted data directories will make your node fail. So ensure your checksum matches.

   ```bash
   sha256sum mainnet-bedrock.tar.zst
   # expected output
   ec4baf47e309a14ffbd586dc85376833de640c0f2a8d7355cb8a9e64c38bfcd1  mainnet-bedrock.tar.zst
   ```

   OR
   
   ```bash
   sha512sum mainnet-bedrock.tar.zst
   # expected output
   c17067b7bc39a6daa14f71d448c6fa0477834c3e68a25e96f26fe849c12a09bffe510e96f7eacdef19e93e3167d15250f807d252dd6f6f9053d0e4457c73d5fb mainnet-bedrock.tar.zst
   ```
   

3. Create the data directory in `op-geth` and fill it. This will take time.

   Navigate into your `op-geth` directory and run these commands:
   ```sh
   mkdir datadir
   cd datadir
   tar xvf <<PATH_TO_DATA_DIR>>
   ```

#### (Optional - OP Mainnet Archive Node) Get the data directory for `l2geth`

1. Download the data directory snapshot. This is a large file so expect it to take some time. [Legacy Geth Data Directory (2.9TB)](https://datadirs.optimism.io/mainnet-legacy-archival.tar.zst)

::: tip Protip
Use a tool like [aria2](https://aria2.github.io/) to reduce the chance of your data directory being corrupted.
:::

2. Check the validity of your download. This is an important step. Corrupted data directories will make your node fail. So ensure your checksum matches.

   ```sh
   sha256sum mainnet-legacy-archival.tar.zst
   # expected output
   4adedb61125b81b55f9bdccc2e85092050c65ef2253c86e2b79569732b772829  mainnet-legacy-archival.tar.zst
   ```

   OR
   
   ```sh
   sha512sum mainnet-legacy-archival.tar.zst
   # expected output
   e348488c458baa755510f23bbc8601619bc66bea78a89354c949ba7be3c6b39ed7dd2c50516621e38df6120299407da0d24445b96bf94a50364ed07bb8234b26 mainnet-legacy-archival.tar.zst
   ```

3. Create the data directory in `l2geth` and fill it. This will take time.

   Navigate into your `l2geth` directory and run these commands:
   ```sh
   mkdir datadir
   cd datadir
   tar xvf <<PATH_TO_DATA_DIR>>
   ```

### Create a shared secret between `op-geth` and `op-node`

1. Navigate into your `op-geth` directory and run these commands:

   ```sh
   openssl rand -hex 32 > jwt.txt
   cp jwt.txt ../optimism/op-node
   ```

### Scripts to start the different components

In the root of your working directory create a new directory: `scripts`.

### (Optional - Archive Node) `l2geth`

1. Navigate into your `scripts` directory:

2. Create a new file: 
   ```sh
   touch run-l2geth.sh
   ```

3. Make it executable: 
   ```sh
   chmod +x run-l2geth.sh
   ```

4. Insert this snippet of code into `run-l2geth.sh` and modify the path to the `l2geth` directory.

   ```sh
   #!/usr/bin/bash

   cd ../optimism-legacy/l2geth

   USING_OVM=true \
     ETH1_SYNC_SERVICE_ENABLE=false \
     RPC_API=eth,rollup,net,web3,debug \
     RPC_ENABLE=true \
     RPC_PORT=8546 \ # need to rebind port because op-geth uses the same default port
     ./build/bin/geth --datadir ./datadir
   ```

5. Run the following command to start `l2geth`:
   
   ```sh
   ./run-l2geth.sh
   ```

### `op-geth`

1. Navigate into your `scripts` directory:

2. Create a new file: 
   ```sh
   touch run-op-geth.sh
   ```

3. Make it executable: 
   ```sh
   chmod +x run-op-geth.sh
   ```

4. Insert this snippet of code into `run-op-geth.sh` and modify the path to the `op-geth` directory.

    ```sh
    #! /usr/bin/bash

    SEQUENCER_URL=https://mainnet-sequencer.optimism.io/

    cd <<Path to op-geth directory>>

    ./build/bin/geth \
      --datadir=./datadir \
      --http \
      --http.port=8545 \
      --http.addr=0.0.0.0 \
      --authrpc.addr=localhost \
      --authrpc.jwtsecret=./jwt.txt \
      --verbosity=3 \
      --rollup.sequencerhttp=$SEQUENCER_URL \
      --nodiscover \
      --syncmode=full \
      --maxpeers=0
    ```

::: info Archive Nodes
You will need to point `op-geth` at `l2geth` with `--rollup.historicalrpc`: Enables the historical RPC endpoint. This endpoint is used to fetch historical execution data from Legacy Geth from before the [Bedrock upgrade](https://twitter.com/optimismFND/status/1666850591669202965). This flag is only necessary for OP Mainnet.

You will also need to add `--gcmode archive`.
:::

1. Run the following command to start `op-geth`:
   
   ```bash
   ./run-op-geth.sh
   ```

### `op-node`

1. Navigate to the `scripts` directory you created.
   
2. Create a new file: 
   ```sh
   touch run-op-node.sh
   ```
3. Make it executable: 
   ```sh
   chmod +x run-op-node.sh
   ```
4. Insert this snippet of code into `run-op-node.sh`:
   
    ```sh
    #!/usr/bin/bash

    L1URL=<< L1 RPC URL >>
    L1KIND=basic
    NET=mainnet

    cd <<Path to op-node directory>>


    ./bin/op-node \
        --l1=$L1URL  \
        --l1.rpckind=$L1KIND \
        --l2=ws://localhost:8551 \
        --l2.jwt-secret=./jwt.txt \
        --network=$NET \
        --rpc.addr=0.0.0.0 \
        --rpc.port=8547

    ```        

- Change `<< L1 RPC URL >>` to your local L1 node or a service provider's URL for the L1 node (L1 Ethereum). E.g. for Infura, `https://mainnet.infura.io/v3/API_KEY`.
- Set `L1KIND` to the network provider you are using (options: alchemy, quicknode, infura, parity, nethermind, debug_geth, erigon, basic, any).

5. Run the following command to start `op-node`:
   
    ```bash
    ./run-op-node.sh
    ```

### The initial synchronization

The datadir provided by Optimism is not updated continuously, so before you can use the node you need a to synchronize it.

During that process you get log messages from `op-node`, and nothing else appears to happen.

```
INFO [06-26|13:31:20.389] Advancing bq origin                      origin=17171d..1bc69b:8300332 originBehind=false
```

That is normal - it means that `op-node` is looking for a location in the batch queue. 
After a few minutes it finds it, and then it can start synchronizing.

While it is synchronizing, you can expect log messages such as these from `op-node`:

```
INFO [06-26|14:00:59.460] Sync progress                            reason=""processed safe block derived from L1"" l2_finalized=ef93e6..e0f367:4067805 l2_safe=7fe3f6..900127:4068014 l2_unsafe=7fe3f6..900127:4068014 l2_time=1,673,564,096 l1_derived=6079cd..be4231:8301091
INFO [06-26|14:00:59.460] Found next batch                         epoch=8e8a03..11a6de:8301087 batch_epoch=8301087 batch_timestamp=1,673,564,098
INFO [06-26|14:00:59.461] generated attributes in payload queue    txs=1  timestamp=1,673,564,098
INFO [06-26|14:00:59.463] inserted block                           hash=e80dc4..72a759 number=4,068,015 state_root=660ced..043025 timestamp=1,673,564,098 parent=7fe3f6..900127 prev_randao=78e43d..36f07a fee_recipient=0x4200000000000000000000000000000000000011 txs=1  update_safe=true
```

And log messages such as these from `op-geth`:

```
INFO [06-26|14:02:12.974] Imported new potential chain segment     number=4,068,194 hash=a334a0..609a83 blocks=1         txs=1         mgas=0.000  elapsed=1.482ms     mgasps=0.000   age=5mo2w20h dirty=2.31MiB
INFO [06-26|14:02:12.976] Chain head was updated                   number=4,068,194 hash=a334a0..609a83 root=e80f5e..dd06f9 elapsed=""188.373¬µs"" age=5mo2w20h
INFO [06-26|14:02:12.982] Starting work on payload                 id=0x5542117d680dbd4e
```

#### How long will the synchronization take?

To estimate how long the synchronization will take, you need to first find out how many blocks you synchronize in a minute. You can use this [Foundry](https://book.getfoundry.sh/) script to get an estimated sync time.

1. Navigate to your `scripts` directory
2. Create a new file: 
   ```sh
   touch run-estimate.sh
   ```
3. Make it executable: 
   ```sh
   chmod +x run-estimate.sh
   ```
4. Insert this snippet of code into `run-estimate.sh`:
  
```sh
#!/usr/bin/bash

export ETH_RPC_URL=http://localhost:8545
CHAIN_ID=`cast chain-id`
echo Chain ID: $CHAIN_ID
echo Please wait

if [ $CHAIN_ID -eq 10 ]; then
  L2_URL=https://mainnet.optimism.io
fi


if [ $CHAIN_ID -eq 420 ]; then
  L2_URL=https://goerli.optimism.io
fi


if [ $CHAIN_ID -eq 11155420 ]; then
  L2_URL=https://sepolia.optimism.io
fi

T0=`cast block-number --rpc-url $ETH_RPC_URL` ; sleep 60 ; T1=`cast block-number --rpc-url $ETH_RPC_URL`
PER_MIN=`expr $T1 - $T0`
echo Blocks per minute: $PER_MIN


if [ $PER_MIN -eq 0 ]; then
    echo Not synching
    exit;
fi

# During that minute the head of the chain progressed by thirty blocks
PROGRESS_PER_MIN=`expr $PER_MIN - 30`
echo Progress per minute: $PROGRESS_PER_MIN


# How many more blocks do we need?
HEAD=`cast block-number --rpc-url $L2_URL`
BEHIND=`expr $HEAD - $T1`
MINUTES=`expr $BEHIND / $PROGRESS_PER_MIN`
HOURS=`expr $MINUTES / 60`
echo Hours until sync completed: $HOURS

if [ $HOURS -gt 24 ] ; then
   DAYS=`expr $HOURS / 24`
   echo Days until sync complete: $DAYS
fi
```  

5. Run the following command to get an estimate:
   ```sh
   ./run-estimate.sh
   ```  

### Operations

It is best to start `op-geth` first and shut it down last.
"
ethereum-optimism/community-hub,testnet.md,developers/nodes/testnet.md,"---
title: Running OP Testnet from Source
lang: en-US
---

#### [Please follow these steps first if you have not done so already.](./intro.md)

::: info Migrated vs Non-Migrated Networks
Migrated Networks, *OP Mainnet* and *OP Goerli*, were running before the Bedrock upgrade. Non-Migrated Networks, *OP Sepolia*, have only existed in a post Bedrock world. The way transaction execution is handled is funadmentally different pre- vs post-bedrock. Migrated networks are required to initialize their nodes with a data directory and non-migrated networks can simply initialize from a genesis file.
:::

## OP Sepolia initialization

OP Sepolia is non-migrated network so it requires [initialization via genesis file](../bedrock/node-operator-guide/#initialization-via-genesis-file). `op-geth` uses JSON files to encode a network's genesis information. You'll need to download the genesis JSON, then run the following command to initialize the data directory:

```bash
curl -o <path to genesis JSON> -sL https://networks.optimism.io/op-sepolia/genesis.json

geth init \
	 --datadir=""<your data directory>"" \
	 ""<path to genesis JSON>""
```

### Create a shared secret between `op-geth` and `op-node`

1. Navigate into your `op-geth` directory and run these commands:

   ```sh
   openssl rand -hex 32 > jwt.txt
   cp jwt.txt ../optimism/op-node
   ```

### Scripts to start the different components

In the root of your working directory create a new directory: `scripts`.

### `op-geth`


2. Create a new file: 
   ```sh
   touch run-op-geth.sh
   ```

3. Make it executable: 
   ```sh
   chmod +x run-op-geth.sh
   ```

4. Insert this snippet of code into `run-op-geth.sh` and modify the path to the `op-geth` directory.

    ```sh
    #! /usr/bin/bash

    SEQUENCER_URL=https://sepolia-sequencer.optimism.io/

    cd <<Path to op-geth directory>>

    ./build/bin/geth \
      --datadir=./datadir \
      --http \
      --http.port=8545 \
      --http.addr=0.0.0.0 \
      --authrpc.addr=localhost \
      --authrpc.jwtsecret=./jwt.txt \
      --verbosity=3 \
      --rollup.sequencerhttp=$SEQUENCER_URL \
      --nodiscover \
      --syncmode=full \
      --maxpeers=0 \
      --beta.op-network=op-sepolia
    ```

Other Sequencer URLs can be found here: [Networks, Public RPC Endpoints, & APIs](../../useful-tools/networks.md).

1. Run the following command to start `op-geth`:
   
   ```bash
   ./run-op-geth.sh
   ```

### `op-node`

1. Navigate to the `scripts` directory you created.
   
2. Create a new file: 
   ```sh
   touch run-op-node.sh
   ```
3. Make it executable: 
   ```sh
   chmod +x run-op-node.sh
   ```
4. Insert this snippet of code into `run-op-node.sh`:
   
    ```sh
    #!/usr/bin/bash

    L1URL=<< L1 RPC URL >>
    L1KIND=basic
    NET=<< goerli OR sepolia >>

    cd <<Path to op-node directory>>


    ./bin/op-node \
        --l1=$L1URL  \
        --l1.rpckind=$L1KIND \
        --l2=ws://localhost:8551 \
        --l2.jwt-secret=./jwt.txt \
        --network=$NET \
        --rpc.addr=0.0.0.0 \
        --rpc.port=8547 \
        --network=op-sepolia
    ```     


- Change `<< L1 RPC URL >>` to your local L1 node or a service provider's URL for the L1 node (L1 Ethereum). E.g. for Infura, `https://sepolia.infura.io/v3/API_KEY`.
- Set `L1KIND` to the network provider you are using (options: alchemy, quicknode, infura, parity, nethermind, debug_geth, erigon, basic, any).

5. Run the following command to start `op-node`:
   
    ```bash
    ./run-op-node.sh
    ```

### The initial synchronization

The datadir provided by Optimism is not updated continuously, so before you can use the node you need a to synchronize it.

During that process you get log messages from `op-node`, and nothing else appears to happen.

```
INFO [06-26|13:31:20.389] Advancing bq origin                      origin=17171d..1bc69b:8300332 originBehind=false
```

That is normal - it means that `op-node` is looking for a location in the batch queue. 
After a few minutes it finds it, and then it can start synchronizing.

While it is synchronizing, you can expect log messages such as these from `op-node`:

```
INFO [06-26|14:00:59.460] Sync progress                            reason=""processed safe block derived from L1"" l2_finalized=ef93e6..e0f367:4067805 l2_safe=7fe3f6..900127:4068014 l2_unsafe=7fe3f6..900127:4068014 l2_time=1,673,564,096 l1_derived=6079cd..be4231:8301091
INFO [06-26|14:00:59.460] Found next batch                         epoch=8e8a03..11a6de:8301087 batch_epoch=8301087 batch_timestamp=1,673,564,098
INFO [06-26|14:00:59.461] generated attributes in payload queue    txs=1  timestamp=1,673,564,098
INFO [06-26|14:00:59.463] inserted block                           hash=e80dc4..72a759 number=4,068,015 state_root=660ced..043025 timestamp=1,673,564,098 parent=7fe3f6..900127 prev_randao=78e43d..36f07a fee_recipient=0x4200000000000000000000000000000000000011 txs=1  update_safe=true
```

And log messages such as these from `op-geth`:

```
INFO [06-26|14:02:12.974] Imported new potential chain segment     number=4,068,194 hash=a334a0..609a83 blocks=1         txs=1         mgas=0.000  elapsed=1.482ms     mgasps=0.000   age=5mo2w20h dirty=2.31MiB
INFO [06-26|14:02:12.976] Chain head was updated                   number=4,068,194 hash=a334a0..609a83 root=e80f5e..dd06f9 elapsed=""188.373¬µs"" age=5mo2w20h
INFO [06-26|14:02:12.982] Starting work on payload                 id=0x5542117d680dbd4e
```

#### How long will the synchronization take?

To estimate how long the synchronization will take, you need to first find out how many blocks you synchronize in a minute. You can use this [Foundry](https://book.getfoundry.sh/) script to get an estimated sync time.

1. Navigate to your `scripts` directory
2. Create a new file: 
   ```sh
   touch run-estimate.sh
   ```
3. Make it executable: 
   ```sh
   chmod +x run-estimate.sh
   ```
4. Insert this snippet of code into `run-estimate.sh`:
  
```sh
#!/usr/bin/bash

export ETH_RPC_URL=http://localhost:8545
CHAIN_ID=`cast chain-id`
echo Chain ID: $CHAIN_ID
echo Please wait

if [ $CHAIN_ID -eq 10 ]; then
  L2_URL=https://mainnet.optimism.io
fi


if [ $CHAIN_ID -eq 420 ]; then
  L2_URL=https://goerli.optimism.io
fi


if [ $CHAIN_ID -eq 11155420 ]; then
  L2_URL=https://sepolia.optimism.io
fi

T0=`cast block-number --rpc-url $ETH_RPC_URL` ; sleep 60 ; T1=`cast block-number --rpc-url $ETH_RPC_URL`
PER_MIN=`expr $T1 - $T0`
echo Blocks per minute: $PER_MIN


if [ $PER_MIN -eq 0 ]; then
    echo Not synching
    exit;
fi

# During that minute the head of the chain progressed by thirty blocks
PROGRESS_PER_MIN=`expr $PER_MIN - 30`
echo Progress per minute: $PROGRESS_PER_MIN


# How many more blocks do we need?
HEAD=`cast block-number --rpc-url $L2_URL`
BEHIND=`expr $HEAD - $T1`
MINUTES=`expr $BEHIND / $PROGRESS_PER_MIN`
HOURS=`expr $MINUTES / 60`
echo Hours until sync completed: $HOURS

if [ $HOURS -gt 24 ] ; then
   DAYS=`expr $HOURS / 24`
   echo Days until sync complete: $DAYS
fi
```  

5. Run the following command to get an estimate:
   ```sh
   ./run-estimate.sh
   ```  

### Operations

It is best to start `op-geth` first and shut it down last.

"
ethereum-optimism/community-hub,releases.md,developers/releases.md,"<script>
export default {
  mounted () {
    window.location.href=""https://github.com/ethereum-optimism/optimism/releases""
  }
}
</script>
"
ethereum-optimism/community-hub,governance,governance,"
"
ethereum-optimism/community-hub,README.md,governance/README.md,"---
title: What is the Optimism Collective?
lang: en-US
---

The [Optimism Collective](https://app.optimism.io/announcement) is a band of companies, communities, and citizens working together to reward public goods and build a sustainable future for Ethereum.
    
Together we will dispel the myth that¬†public goods cannot be¬†profitable. 
Public goods (including public goods for Optimism and Ethereum) often go underfunded when incentives aren't properly aligned, forcing many to make trade-offs between earning a profit and building for the common good.
The Optimism Collective is bound by a mutually beneficial pact, [a vision](https://www.optimism.io/vision) that can be summed up with the equation **[Impact = Profit](https://www.notion.so/Impact-Profit-Framework-f71c54fc0c3242d190eb7ab06807712c)**.
    
### Impact = Profit

The Optimism Collective will deploy a new model for rewarding those who create or sustain public goods - [retroactive public goods funding](https://medium.com/ethereum-optimism/retroactive-public-goods-funding-33c9b7d00f0c), to support projects and communities building for the common good. 

Retroactive public goods funding is advantageous because it is relatively easy to agree on what *is* useful, and see who built it.
It is a lot harder to identify in advance what *will be* useful, and which team will do the best job of building it.
The possibility of an eventual exit payment can also encourage investors to fund initial public good development efforts until the usefulness is obvious, in the same way that the possibility of an eventual IPO or buy out encourages investors to fund startups today.


### How is this going to be governed?

The Optimism Collective takes [an experimental and agile approach to governance](https://optimism.mirror.xyz/r888e4B5iiNQi-3_mO26ixgv-plQ099XWgqEOv9iWKA) relentlessly iterating towards a system which stands the test of time.
Initially, the Collective's model of¬†digital democratic governance will consist of two houses: the *Token House* and the *Citizens' House*. 

### What are the Collective's Values? 

![image](https://github.com/ethereum-optimism/community-hub/assets/111033022/4bd5479a-fa4c-4725-b737-ee8b6166796b)
    

## Token House

Governance of the Optimism Collective began with the launch of the OP token and the Token House. 
OP is being distributed to hundreds of thousands of addresses that engage in positive-sum, community-oriented behavior via a series of airdrops.

As Token House members, OP holders are responsible for submitting, deliberating, and voting on various types of governance proposals. 
In carrying out these functions, OP holders may either [vote directly, or delegate their OP voting power to an eligible third party](delegate.md).

The Token House votes on on the proposal types outlined in the [Operating Manual](https://github.com/ethereum-optimism/OPerating-manual/blob/main/manual.md#valid-proposal-types).

You can learn more in the [Token House Onboarding Hub](https://plaid-cement-e44.notion.site/Token-House-Governance-Hub-decae75a0fa248e38f969abe8edef565?pvs=4). 
 
    
## Citizens' House

The Citizens' House is a large-scale experiment in [non-plutocratic governance](https://vitalik.ca/general/2021/08/16/voting3.html) and retroactive funding of public goods. 

The Citizens' House is responsible for [Retroactive Public Goods Funding (Retro Funding)](https://medium.com/ethereum-optimism/retroactive-public-goods-funding-33c9b7d00f0c). 
For more information about the Citizens' House, read [the Overview](./citizens-house.md).
For details about Retro Funding 3, visit [the Retro Funding 3 program details](./retropgf-3.md).
For plans around identity and governance, see [the Citizenship page](./citizenship.md).  

**What is described here is an initial experiment**. 
The specifics of this system will evolve as the [Collective](token-house.md) grows.

"
ethereum-optimism/community-hub,airdrop-1.md,governance/airdrop-1.md,"---
title: Airdrop 1
lang: en-US
---

::: info Airdrop 1 has been distributed to all eligible addresses

On September 15, 2023, any unclaimed OP from Airdrop 1 was sent directly to addresses eligible to claim. This means all OP from Airdrop 1 has been distributed.

:::


## Background

The Optimism Foundation‚Äôs Airdrop #1 rewards those who have been instrumental as early adopters and active users of projects in the Optimism ecosystem. 
To celebrate our Ethereum roots, The Optimism Foundation also wants to welcome active L1 participants who can help scale Ethereum‚Äôs innovations, culture, and values to Layer 2. 
In total, **248,699** addresses are eligible to claim OP in this *initial* airdrop.

Our airdrop has six sets of criteria. 
Two for OP Mainnet users that target early adopters and active project users, and four for L1 Ethereum, which target active contribution, positive-sum behaviors, and active participation. 
Each set is distinct, meaning that an address can be eligible for multiple and allocated a sum of tokens accordingly. 
A snapshot of addresses was taken on 03-25-2022 0:00 UTC.
The allocations and criteria break down as follows:

## Airdrop #1 Allocations

| Name | # of Addresses Eligible | OP Allocated per Address |
| -------- | ----------------------: | -----------------------: |
| OP Mainnet Users | 92,157 | 776.86
| Repeat OP Mainnet Users* | 19,174 | 1,692.49
| DAO Voters | 84,015 | 271.83
| Multisig Signers | 19,542 | 1,190.26
| Gitcoin Donors (on L1) | 23,925 | 555.92
| Users Priced Out of Ethereum | 74,272 | 409.42

\* *Note that Repeat OP Mainnet Users Receive 776.86 + 1,692.49 = 2,469.35 OP*


| Overlap Bonuses | # of Addresses Eligible | OP Allocated per Address
| - | -: | -:
| 4 Categories & OP Mainnet User | 2,707 |  4,180.54
| 5 Categories & OP Mainnet User |   627 | 13,330.16
| 6 Categories & OP Mainnet User |    45 | 27,534.98


The amount of OP tokens that an address receives is cumulative, meaning that the sum of OP tokens allocated for each matching criteria set is the amount that an address is eligible to claim (overlap bonuses are not cumulative).

### OP Mainnet Early Adopters

The Foundation sought to identify OP Mainnet users who had actively used applications on OP Mainnet as a part of their crypto experience. 

#### OP Mainnet Users

This group selects for addresses that have used OP Mainnet, including both early adopters and newer users, but narrows down to a group that has used OP Mainnet multiple times. 

*Criterion: Address bridged to OP Mainnet from L1 during the early phases of mainnet (prior to Jun 23, 2021), or used OP Mainnet for more than 1 day (at least 24 hours between their first and last transaction) and made a transaction using an app (after to Jun 23, 2021).*
- *These rules are only based on usage on OP Mainnet. It does not matter which bridge, exchange, fiat on-ramp, etc you used in order to come to OP Mainnet.*

#### Repeat OP Mainnet Users

This tier selects for the most active OP Mainnet users, who repeatedly come back to use applications in the Optimism ecosystem.

*Criterion: Address is an ‚ÄòOP Mainnet User‚Äô and made at least 1 transaction with an OP Mainnet application across four or more distinct weeks. This selects for the top 20% of ‚ÄòOP Mainnet Users‚Äô.*
- *""Distinct weeks"" are counted based on the time of an addresses' first transaction (i.e. days 1 - 7 are considered Week 1, not the calendar week). This makes sure that there is no skew by which day of the week an address joined OP Mainnet.*

### Active Ethereum Participants

These rules aim to target behaviors that match Ethereum and Optimism‚Äôs values of active contribution, positive-sum behavior, and scaling decentralized applications to the world.

#### DAO Voters

The Foundation believes that active and engaged governance is crucial to scaling decentralized systems. 
Addresses who match this criterion have actively chosen to actively contribute by participating in governance.

*Criterion: Address has either voted on or authored at least one proposal onchain, or at least two on Snapshot (offchain).*
- *We filtered to ‚Äúactive DAOs‚Äù who have had at least 5 proposals with at least 5 votes.*
- *Onchain governance contracts included: Governor Alpha and Bravo, Aave, Curve, Maker, Aragon, DAOHaus, DAOStack, and forks.*
- *Since Snapshot votes were offchain, the Foundation recognized that these were more susceptible to spam/farming behavior, often driven by voters with nominal voting power. 
  To mitigate this, we filtered Snapshot votes to voters who made up the top 99.9% of total voting power in each DAO (i.e. >= 0.1% of voting power was made up by the sum of all smaller voters).*

#### Multi-Sig Signers

Multi-sig signers are entrusted with larger pools of capital or control over key protocol functions. 
They are often the present (and future) DAO leaders and builders.

*Criterion: Address is a current signer on a Multi-Sig which has executed at least 10 transactions all-time (this cohort includes 95% of all multisig transactions).*
- *Multisig Wallets Include: Gnosis Safe v0.1.0-1.3.0, MultiSigWithDailyLimit, MultiSigWalletWithTimeLock, and addresses in Etherscan‚Äôs ‚ÄòMultisig‚Äô label which had a function to get owner addresses.*

#### Gitcoin Donors (on L1)

Gitcoin donors have chosen to behave in positive-sum ways by funding public goods. 
These addresses may also align with Optimism‚Äôs goal to build sustainable funding source for public goods through [retroactive funding (RetroPGF](https://medium.com/ethereum-optimism/retropgf-experiment-1-1-million-dollars-for-public-goods-f7e455cbdca)).

*Criterion: Address has made an onchain donation through Gitcoin on L1. This includes any donation, regardless of if it was during a matching round.*
- *For the time period between rounds 1 - 5, we included addresses who interacted with Gitcoin contracts, sent legacy `ExecuteSubscription` calls, or appeared in [Gitcoin‚Äôs donor API](https://docs.gitcoin.co/mk_rest_api/).*
- *For the period between rounds 6 - 13 (present), we included donor addresses in the Gitcoin ‚ÄòBulkCheckout‚Äô contract transaction logs.*

#### Users Priced Out of Ethereum

Active users of dapps on Ethereum are critical to ecosystem growth. Many of these addresses have started bridging to other chains due to high fees, and we want to help retain them in the Ethereum ecosystem while rewarding their curiosity and exploration. Optimism‚Äôs airdrop is also calibrated to reward loyalty to Ethereum, so users who have abandoned Ethereum entirely would not receive an airdrop.

*Criterion: Address bridged to another chain, but still made an app transaction on Ethereum in each month after they bridged, and transacted at an average rate of at least 2 per week since then (top 60% of matching addresses).*

- *Bridges included top L1s by TVL: Terra, BSC, Fantom, Avalanche, Solana, Polygon; and general-purpose L2s: Arbtirum, OP Mainnet, Metis, Boba.*
- *To ensure that we gave a long enough period to sample activity, addresses had to have bridged away from Ethereum at least 90 days before the snapshot.*

### Overlap Bonus

Early OP Mainnet users who also match multiple Ethereum criteria may be most likely to become important participants in the OP Mainnet ecosystem, so these addresses were rewarded with an extra overlap bonus.

*Criterion: Address matches an ‚ÄòOP Mainnet Early Adopter‚Äô criterion, and matches at least 4 criteria sets in total (including OP Mainnet criteria).*

- *The overlap bonus increases as more criteria are matched (i.e. the bonus for 5 criteria is greater than the bonus for 4 criteria)*

### Global Filtering Criteria

We believe that it‚Äôs best for the community for our airdrop list narrows as well as possible to real users and honest actors. 
So we applied some basic filters to various criteria:

- **Address Activity:** Addresses needed to have used Ethereum for more than 1 day (24 hours between their first and last transaction) in order to qualify for ‚ÄòActive Ethereum Participants‚Äô criteria. 
  This applied to all Ethereum criteria except for multisig signers, since it‚Äôs common for signers to have ‚Äúsigning-only‚Äù addresses.
- **Sybil Farmers:** We identified a few patterns of likely sybil attackers, who often created tens, hundreds, or more duplicate addresses. 
  We required stronger activity criteria for these addresses, which helped filter out these attackers, but also preserved many real users. 
  It‚Äôs impossible to catch everything, but removing as many sybillors as we can help get more OP in the hands of true positive-sum participants.
- **Snapshot Bots and Spam:** We used [ENS‚Äô bot-catching proposal](https://snapshot.org/#/ens.eth/proposal/QmfLwPbo5UwnyvkXo7emsSMDMFCr8UtJ76n87v9Rf7gEuH) to filter out addresses that spam Snapshot votes. Snapshot spaces that appeared to be either compromised or falsified were also excluded.
- **Exchanges and On-Ramps:** We filtered our known centralized exchange and fiat on-ramp addresses.
- **Exploiters:** Known exploit addresses were filtered out.
- **Recency Filter:** Addresses needed to have made a transaction after Jan 1, 2019. 
  For multisig signers, only the multisig needed to have executed a transaction after Jan 1, 2019. 
  We chose this cutoff date to narrow in on active addresses, while also providing a window before [L1 gas prices](https://etherscan.io/chart/gasprice) consistently rose and potentially priced some users out of Ethereum.

### Additional Sybil Filtering

Optimism is for the people, not the sybils.
After the announcement of Airdrop #1, we received limited reports of sybil activity that was not excluded by our initial filtering.
We have since applied additional filtering to Airdrop #1 that excludes 17k addresses and recovers 14m OP.
Recovered OP will be redistributed proportionally to remaining addresses already included in Airdrop #1.
The [Airdrop #1 Allocations](#airdrop-1-allocations) table above has been updated accordingly to reflect this.
For a list of excluded sybil addresses, [see this spreadsheet](https://docs.google.com/spreadsheets/d/1kUAt-vrkID0yBkic72djWRxdliK8W_5rBGxq6-Iv3cg).

In the interest of maintaining the integrity of future OP Airdrops, we will not be publishing the additional filters used to remove these addresses.

## What‚Äôs Next?

To check your eligibility for Airdrop #1 and claim your tokens visit [the airdrop app](https://app.optimism.io/airdrop/check).

We made our best effort to make Airdrop #1 as fair as possible.
However, there‚Äôs always a chance some great community members may have slipped through the cracks.
Don‚Äôt worry!
This is Airdrop #1, and 14% of the total initial token supply is reserved for future airdrops.
The best way to earn OP is to get involved in the Optimism Collective:

- If you want to build on Optimism, visit our [developer documentation](../developers/README.md) or jump in to [Discord](https://discord-gateway.optimism.io).
- If your talents are non-technical, jump in to [Discord](https://discord-gateway.optimism.io) to find other builders, apply to be a Support NERD, or just make some memes üçâ
- [Bridge your assets to OP Mainnet here](https://app.optimism.io/bridge) and explore projects on OP

As always: stay safe and stay Optimistic.

## References

- **Application Transaction:** Any transaction, excluding token transfer and approval transactions. 
- **Airdrop #1 Dashboard:** [https://dune.com/optimismfnd/optimism-airdrop-1](https://dune.com/optimismfnd/optimism-airdrop-1)
- **Detailed Protocol Metrics:** [https://dune.com/optimismfnd/Optimism](https://dune.com/optimismfnd/Optimism)
- **OP Token Address:** [0x4200000000000000000000000000000000000042](https://explorer.optimism.io/address/0x4200000000000000000000000000000000000042)
- **Optimism on Twitter:** [https://twitter.com/optimismFND](https://twitter.com/optimismFND)
- **Join the Optimism Discord:** [https://discord-gateway.optimism.io/](https://discord-gateway.optimism.io/)
- **CSV with the list of airdropped addresses:** [op_airdrop1_addresses_detailed_list.csv](https://github.com/ethereum-optimism/op-analytics/blob/main/reference_data/address_lists/op_airdrop1_addresses_detailed_list.csv)

"
ethereum-optimism/community-hub,airdrop-2.md,governance/airdrop-2.md,"---
title: Airdrop 2
lang: en-US
---

## Background

Optimism‚Äôs Airdrop #1 distributed over 200m OP tokens to 250,000 early adopters and engaged users in May 2022.
With the introduction of OP, the Collective set out to establish a bicameral governance system that provides the foundation for our growing digital city.

Since then, the Token House has matured as the first piece of Optimism governance.
As of today (February 9th, 2023) 88k addresses have voted on over 90 proposals to distribute more than 55m OP tokens across the ecosystem, and Optimism‚Äôs first protocol upgrade is headed to vote in February. A total of 293k addresses are **delegating their voting power** ‚Äî a positive-sum activity that helps strengthen the fabric of Optimism‚Äôs governance system.
At the same time, OP Mainnet is developing into a booming economy. 
Over 1.5 million addresses have sent 64 million transactions since our first Airdrop, spending nearly $15 million in fees on the network. 
Participation in governance and in the Optimism economy is what helps our Collective grow and thrive.

Optimism‚Äôs Airdrop #2 distributes 11,742,277.10 OP to 307,965 unique addresses to reward **positive-sum governance participation** and **power users of OP Mainnet**. 
A snapshot of addresses was taken on 01-20-2023 0:00 UTC.

Read on for more detail about eligibility criteria and distribution.

::: tip Airdrop #2 does not need to be claimed

Airdrop #2 is distributed directly to eligible wallets. 
There is no need to claim tokens by interacting with any website.
Do not trust any website pretending to help you claim your tokens for Airdrop #2. 
If an address is eligible, it will have tokens sent directly to it on February 9th, 2023 by 8pm ET.

:::

Airdrop #2 rewards users for their involvement in Optimism governance and covers a portion of their network usage costs:

- Governance delegation rewards based on the amount of OP delegated and the length of time it was delegated.
- Partial gas rebates for active Optimism users who have spent over a certain amount on gas fees.
- Multiplier bonuses determined by additional attributes related to governance and usage.


## Airdrop #2 allocations

| Reward Type                      | Criteria | Number of qualifying addresses | Reward allocation |
| -------------------------------- | -------- | -----------------------------: | ----------------- |
| **Governance Delegation Reward** | Has had ‚â• 2,000 total `OP Delegated x Days`<sup>(1)</sup> | 57,204 | <sup>0.42</sup> &#8260; <sub>365</sub> OP per `OP Delegated x Day`, max 5,000 OP per address<sup>(2)</sup> |
| **Gas Usage Reward** | Spent ‚â• the average cost of one L1 transaction ($6.10)<sup>(3)</sup> on Optimism | 280,057 | 80% of gas fees rebated in OP, up to $500 of gas fees rebated per address<sup>(4)</sup> |


(1) `OP Delegated x Days` = Cumulative Sum of OP Delegated per Day (i.e. 20 OP delegated for 100 days: 20 * 100 = 2,000 OP Delegated x Days).

(2) Addresses which received OP from Token House Governance are not eligible for the reward.

(3) The average cost of one L1 transaction on Ethereum was measured during the period between the airdrop #1 snapshot and airdrop #2 snapshot.

(4) Gas Fees USD conversion was made at the time of the transaction. 
OP rebated conversion was made using the trailing 7-day average market price at the time of the snapshot.

## Bonus Attributes

There are 4 additional attributes that addresses can earn multiplier bonuses for:

| Attributes | Qualifying addresses | Multiplier (bonus) |
| --- | --: | --- |
| 0 | 206,033 | 1.00x (No Bonus) |
| 1 | 53,529 | 1.05x (5% Bonus)  |
| 2 | 39,531 | 1.10x (10% Bonus) |
| 3 | 6,320 | 1.50x (50% Bonus)  |
| 4 | 2,552 | 2.00x (100% Bonus) |


### Attribute Description

| Attribute criteria | Description | Qualifying addresses |
| --- | --- | ---: |
| Governance: Had an Active Delegation ‚â• 20 OP at Snapshot | Addresses that remained delegating to Optimism Governance | 30,762 |
| Governance: Had 54,367 total ‚ÄòOP Delegated x Days‚Äô<sup>(5)</sup> | Addresses that had a larger Governance commitment | 23,089 |
| Usage: Had made App transactions<sup>(6)</sup> on Optimism across 6 distinct months | Addresses that remained active on Optimism for a longer period of time | 52,438 |
| Usage: Spent ‚â• $20 on Gas Fees | Addresses that have done a larger sum of activity on Optimism | 55,470 |

(5) 54,367 `OP Delegated x Days` is the equivalent of delegating the smallest reward from Airdrop #1 (271.83 OP) for 200 days (Since July 4, 2022).

(6) App transactions were counted as any transaction excluding token approvals, token transfers, and ETH wrapping/unwrappping transactions. ""Distinct months"" measured as trailing 30 day periods from the snapshot date.



## Analytics

The address list is available [on Github](https://github.com/ethereum-optimism/op-analytics/tree/main/reference_data/address_lists) and is shared with Dune and Flipside.
Please use the #analytics channel in [the Optimism Discord](https://discord-gateway.optimism.io/) for any additional sharing requests or schema questions 
"
ethereum-optimism/community-hub,airdrop-3.md,governance/airdrop-3.md,"---
title: Airdrop 3
lang: en-US
---

Airdrop 3 took place on Monday, September 18. The airdrop allocated 19,411,313 OP to 31,870 unique addresses. 

Similar to Airdrop 2, this drop rewards positive sum governance participation. Users who have delegated tokens between 2023-01-20 at 0:00 UTC and 2023-07-20 0:00 UTC received tokens in this airdrop. A bonus is given to addresses who delegated to a delegate who voted in Optimism Governance. 

Read on for more detail about eligibility criteria and allocations.

::: info Airdrop #3 does not need to be claimed

Airdrop #3 is disbursed directly to eligible wallets. There is no need to claim tokens by interacting with any website. Do not trust any website pretending to help you claim your tokens for Airdrop #3. If an address is eligible, it will have tokens sent directly to it on or shortly after Sep 15, 2023.

:::

## Airdrop #3 Allocations

| Reward Type | Criteria | Number of qualifying addresses | Reward allocation
| - | -: | -: | -:
| Governance Delegation Reward | Delegated OP above the minimum threshold | 31,529 | 0.67¬†‚ÅÑ¬†365¬†OP per¬†`OP Delegated x Day`(1), max 10,000 OP per address
| Voting Delegate Bonus | Delegated to an address that voted onchain at least once (2) | 25,561 | (0.67¬†‚ÅÑ¬†365)*2¬†OP per¬†`OP Delegated x Day to a voting delegate`, max 10,000 OP per address

### Details

(1)¬†`OP Delegated x Days`¬†= Cumulative Sum of OP Delegated per Day (i.e. 20 OP delegated for 100 days: 20 * 100 = 2,000 OP Delegated x Days).

(2) Delegate must have voted onchain in OP Governance during the snapshot period (01-20-2023 at 0:00 UTC and 07-20-2023 0:00 UTC )

- See the list of addresses and allocation amounts [here](https://github.com/ethereum-optimism/op-analytics/blob/main/reference_data/address_lists/op_airdrop_3_simple_list.csv)

### Cutoff Criteria

- Addresses with fewer than 18,000 `OP Delegated x Days` (or 9,000 if delegated to a voting delegate) were not eligible for this airdrop.
- Addresses who were delegated for < 7 days were not eligible for this airdrop
- Known delegation program wallets were not eligible for this airdrop.
- Each reward type had a maximum reward of 10,000 OP per address.

*Note: A small set of delegation activity was not included in Airdrop #2. The eligible amounts were added to this allocation, resulting in 341 additional addresses.*

### How it works:

- To work out your `Cummultive Delegated OP`, multiply your OP delegated by the time delegated: `OP delegated x Days` = `Cummultive Delegated OP`. To qualify for the airdrop your `Cummultive Delegated OP` needs to be larger than 18,000. If you delegated to a ‚ÄúVoting Delegate‚Äù the `Cummultive Delegated OP` only needs to be above 9,000. For example, if you delegated 80 OP tokens for 180 days that would make a `Cummultive Delegated OP` of 14,400 which would NOT qualify for the airdrop. However, if the delegate you delegated to was active, then your 14,400 is above the 9,000 required for a voting delegate and you WOULD receive the airdrop.
    - Addresses who delegated for less than 7 days are not eligible.
    - Known delegation program wallets were not eligible for this airdrop.
    - Each reward type had a maximum reward of 10,000 OP per address.
- For the Voting Delegate Bonus the address you have delegated to MUST have voted onchain in OP Governance during the snapshot period (2023-01-20 at 0:00 UTC and 2023-07-20 0:00 UTC)

"
ethereum-optimism/community-hub,airdrop-4.md,governance/airdrop-4.md,"---
title: Airdrop 4
lang: en-US
---

Airdrop #4 celebrates the vibrant creative energy that artists introduce to the Superchain, and highlights the essential role creators fulfill within the Optimism Collective and the broader Ethereum ecosystem. Creators with addresses that deployed NFT contracts on Ethereum L1, Base, OP Mainnet and Zora before 2024-01-10 00:00:00 UTC were considered in this airdrop.

Read on for more detail about eligibility criteria and allocations.

::: info Airdrop #4 does need to be claimed 
Go to [https://app.optimism.io/airdrops](https://app.optimism.io/airdrops) to claim.

:::

## Airdrop 4 Allocations

| Reward Type | Criteria | Number of qualifying addresses | Reward allocation
| - | :-: | -: | :-:
| You created engaging NFTs on the Superchain | Total gas on OP Chains (OP Mainnet, Base, Zora) in transactions involving transfers<sup>2</sup> of NFTs created by your address<sup>1</sup>. Measured during the trailing 365 days before the airdrop cutoff (Jan 10, 2023 - Jan 10, 2024) | 9,294 | 5,000 OP per 1 ETH of gas on the Superchain (i.e. 0.002 ETH of gas fees = 10 OP)
| You created engaging NFTs on Ethereum Mainnet | Total gas on Ethereum L1 in transactions involving transfers<sup>2</sup> of NFTs created by your address<sup>1</sup>. Measured during the trailing 365 days before the airdrop cutoff (Jan 10, 2023 - Jan 10, 2024) | 15,073 | 50 OP per 1 ETH of gas on Ethereum L1 (i.e. 0.2 ETH of gas fees = 10 OP)

1. ‚ÄúCreator addresses‚Äù were identified as the transaction sender (`from` address) in the transaction where the NFT (ERC721 & ERC1155) contract was created.
1. ‚ÄúTransactions with NFT transfers‚Äù excluded transfers to the creators' address (i.e. mint to themselves) and transfers to a burn address. While transfers were measured over the 365 days before cutoff, the NFT contract could‚Äôve been created at any time.

See the list of addresses and allocation amounts [here](https://github.com/ethereum-optimism/op-analytics/blob/main/reference_data/address_lists/op_airdrop_4_simple_list.csv)

### Bonus Attributes
There were 5 attributes that addresses could earn multiplier bonuses for:

| Amount of Attributes | Qualifying addresses | Multiplier (bonus)
| - | -: | -: |
| 0 | 2,969 | (No Bonus)
| 1 | 3,628 | 1.05x (5% Bonus)
| 2 | 4,566 | 1.10x (10% Bonus)
| 3 | 8,305 | 1.25x (25% Bonus)
| 4+ | 3,530 | 1.50x (50% Bonus)

## Attribute Description 

| Criteria name | Attribute Criteria | Qualifying addresses
| - | -: | -: |
| Early creator | You created your first NFT contract before Jan 1, 2023 | 7,443
| Rising creator | An NFT you created was transferred after Nov 11, 2023 | 14,927
| Active onchain | You‚Äôve been active on the Superchain or L1 since Nov 11, 2023 | 12,316
| Popular creator | Total gas fees spent in transactions involving transfers of NFTs you created was >= 0.005 ETH in the 180 days prior to cutoff | 16,941
| We <3 the Art creators that qualified for the airdrop | In addition to qualifying for the drop, you participated in WLTA | 338

## Rewards Detail
* Addresses with final rewards lower than 20 OP were not eligible.
* The final reward was capped at 6,000 OP per address.

"
ethereum-optimism/community-hub,allocations.md,governance/allocations.md,"---
title: OP Allocations
lang: en-US
---

## Allocations at a glance

![](../../assets/docs/governance/allocations/pie2.jpeg)

| Category | Percentage | Description |
| --- | --- | --- |
| Ecosystem Fund | 25% | The Ecosystem Fund is a proactive program meant to stimulate development in the Collective ecosystem by providing funding to projects and communities |
| Retroactive Public Goods Funding (RetroPGF) | 20% | RetroPGF is the Optimism Collective‚Äôs primary mechanism to adequately and reliably **reward** public goods for the impact they provide |
| User airdrops | 19% | A series of airdrops to reward users for specific helpful behaviors, beginning with Airdrop #1 |
| Core contributors | 19% | The people who‚Äôve been working tirelessly to bring the Optimism Collective into existence |
| Sugar xaddies | 17% | Investors |

## User Airdrops

***Allocation: 19%***

The Optimism Foundation will distribute a portion of the OP allocation to members of the Optimism and Ethereum communities in multiple waves.

### Airdrop #1

The first user airdrop distributed **5%** of the OP token supply to **248,699 unique addresses.** 
This airdrop was targeted towards people who:

- Behave in positive-sum ways.
- Contribute actively to their communities.
- Have been priced out of Ethereum.

The addresses and amounts were chosen to reward Optimism users, as well as attract core Ethereum users to the OP family. 
Airdrop #1 cast a wide net to distribute OP to more than 250k addresses. 

See the [Airdrop #1 documentation](airdrop-1.md) for a detailed breakdown of eligibility criteria.  

### Airdrop #2 

Optimism‚Äôs Airdrop #2 distributes **11,742,277.10 OP to 307,965 unique addresses** to reward **positive-sum governance participation** and **power users of OP Mainnet**. 
A snapshot of addresses was taken on 01-20-2023 0:00 UTC.

See the [Airdrop #2 documentation](airdrop-2.md) for a detailed breakdown of eligibility criteria.  

### Airdrop #3

Airdrop 3 took place on Monday, September 18. The airdrop allocated **19,411,313 OP to 31,870 unique addresses.** Similar to Airdrop 2, this drop rewards **positive sum governance participation.** Users who have delegated tokens between 2023-01-20 at 0:00 UTC and 2023-07-20 0:00 UTC received tokens in this airdrop. A bonus is given to addresses who delegated to a delegate who voted in Optimism Governance. 

See the [Airdrop #3 documentation](airdrop-3.md) for a detailed breakdown of eligibility criteria. 

### Airdrop #4

Airdrop 4 took place on Feb 20, 2024, and distributed **10,343,757.81 OP to 22,998 unique addresses.** This Airdrop was a **‚Äòthank you‚Äô to the artists, creators, and pioneers who have played a role in creating culture across the Superchain** and across the crypto ecosystem as a whole. This was also Optimism‚Äôs first Airdrop across the Superchain, celebrating the growing network of OP Chains who are choosing to build together.

See the¬†[Airdrop #4 documentation](airdrop-4.md) for a detailed breakdown of eligibility criteria.

### Future airdrops (#5, 6, ‚Ä¶)

An allocation of **14%** of the OP token supply will be held in reserve for future user airdrops. 
As a result of the game-able nature of airdrops, the Optimism Foundation will be responsible for determining airdrop metrics as fairly as possible. 
The intent behind airdrops is to distribute them to addresses which positively impact the Optimism community. Participation on governance forums will not be used as a criteria for future airdrops. The best way to improve your odds of receiving future airdrops is to get meaningfully involved!

## Ecosystem Fund

***Allocation: 25%***

The Ecosystem Fund is an incentive program designed to stimulate development of the Collective ecosystem. 
The Ecosystem Fund will be used to directly fund the communities and companies that drive the expansion of the Collective ecosystem (OPCOs).

The allocation dedicated to the Ecosystem Fund is to be further split into the following categories:

1. Governance Fund **(5.4%)**
2. Partner Fund **(5.4%)**
3. Seed Fund **(5.4%)**
4. Unallocated **(8.8%)**

The Ecosystem Fund is intended to be a kick-starting mechanism that will be phased out entirely once the OP in the fund has been depleted. 
The Optimism Foundation expects the function served by the Ecosystem Fund (proactive funding) to eventually be replaced by private third-party investors who can expect to be paid out by the [Retroactive Public Goods Funding](https://medium.com/ethereum-optimism/retroactive-public-goods-funding-33c9b7d00f0c) mechanism.

![](../../assets/docs/governance/allocations/ecosystem_fund_process.jpeg)

The wide variety of funding mechanisms ensures that airdrops constantly flow to users who make valuable contributions to the ecosystem. 
These contributions result in ecosystem growth,  ecosystem growth results in demand for block space, demand for block space results in revenues, and these revenues are then productively re-deployed into the ecosystem as additional airdrops.

Each fund can be thought of as a parallel experiment in OP allocation, enabling rapid iteration and doubling down on what works to further grow the ecosystem.

### Governance Fund

An allocation of **5.4%** of the OP token supply will be dedicated to the first Governance Fund. 
All projects demonstrating usage on Optimism can request tokens from this fund via the [Optimism Grants Council](https://foul-porch-0eb.notion.site/Optimism-Grants-Council-090bb648d1854136b9630c608da7a8bc)

### Partner Fund

An allocation of **5.4%** of the OP token supply will be dedicated to the Partner Fund. 
These funds will be distributed strategically by the Optimism Foundation to grow the Optimism ecosystem for the benefit of the entire Collective.

### Seed Fund

An allocation of **5.4%** of the OP token supply will be dedicated to the Seed Fund, which is focused on supporting projects & teams from 0 ‚Üí 1, particularly projects that are entirely focused on building Optimism.

### Unspent allocation for future growth programs

An allocation of **8.8%** of the OP token supply will be held in reserve for future programs and/or operational services to the Collective, to be determined by the Foundation and/or the governance community as appropriate. 

## Retroactive Public Goods Funding

***Allocation: 20%***

[Retroactive Public Goods Funding (RetroPGF)](https://medium.com/ethereum-optimism/retroactive-public-goods-funding-33c9b7d00f0c) will initially be distributed by the [Citizens' House](citizens-house.md). 
RetroPGF rounds are expected to occur on a quarterly basis with the objective of ensuring that all OPCOs are rewarded adequately, appropriately, and reliably based on their impact to the Collective‚Äîkey to our [vision](https://optimism.io/vision).

RetroPGF will be funded by several revenue sources:

1. 20% of the initial OP token supply held as the ‚ÄúRetroPGF Reserve‚Äù.
1. Optimism network transaction fees and sequencer revenue.

The Optimism Foundation may choose to increase the total OP payout of any given period by tapping into the 20% RetroPGF Reserve.

## Core Contributors

***Allocation: 19%***

The Core Contributors allocation will be distributed to the people who helped bring Optimism and the Optimism Collective from concept to reality, and will continue to pay for development of the protocol. 
All tokens distributed as part of the Core Contributors allocation will be subject to a lockup period.

## Sugar Xaddies

***Allocation: 17%***

Investors. 
They funded us and our crazy vision for the future. 
Couldn‚Äôt-a done it without ya. 
All tokens distributed as part of the Sugar Xaddies allocation will be subject to a lockup period.

## Token Distribution Details

At genesis there will be an initial total supply of 4,294,967,296 OP tokens. The token supply will inflate at the latest rate approved by governance. 

64% of the initial token supply (i.e., the aggregate amount of OP **not** reserved for core contributors or sugar xaddies) will be distributed to the community as described above. 
These distributions will be administered over time by the Optimism Foundation in its role as steward of the Optimism Collective.

In Year 1, 30% of the initial token supply will be made available to the Foundation for distribution. 
After the first year, token holders will vote to determine the Foundation‚Äôs annual OP distribution budget. 

If the Foundation‚Äôs authorized OP expenditures ever reaches below 10% of the initial token supply, it is expected to request an additional allocation.

Taken together, the Foundation estimates the total supply of circulating OP tokens to increase as detailed in [this sheet](https://docs.google.com/spreadsheets/d/1qVMhLmmch3s6XSbiBe8hgD4ntMkPIOhc1WrhsYsQc7M/).

**Circulating supply** is defined as the amount of OP tokens in general circulation that have no known restrictions on transfer. 

**Available supply** is the amount of OP tokens that are (a) part of the circulating supply, or (b) are subject to some governing body to determine the pace at which they are distributed. This includes all Ecosystem Funding indicated in the pie chart above.


"
ethereum-optimism/community-hub,citizens-house.md,governance/citizens-house.md,"---
title: Overview
lang: en-US
---

The Citizens' House is a large-scale experiment in¬†[non-plutocratic governance](https://vitalik.ca/general/2021/08/16/voting3.html) and retroactive funding of public goods. 
The Citizens‚Äô House will work alongside the Token House to govern the Optimism Collective. 

**In its first stage, the Citizens‚Äô House is solely responsible for voting on the allocation of Retroactive Public Goods Funding (Retro Funding)**. 
During this bootstrapping phase, the Optimism Foundation will determine the scope and amount of each funding round, as well as administer the voting process. Holding a [voting badge](./citizenship.md) in this initial stage does not guarantee permanent participation in the Citizens‚Äô House and future iterations of Retro Funding.

Funding for Retro Funding can come from:
- Retro Funding token allocation [(20% of the initial OP supply)](./allocations.md#retroactive-public-goods-funding)
- Allocation of surplus protocol revenue 

In future stages, the Citizens‚Äô House role will expand beyond Retro Funding. 
For example, in addition to voting on Retro Funding, the Citizens‚Äô House will work alongside the Token House to govern allocation of surplus protocol revenue, collaborate on criteria for participation in the Citizens‚Äô House, and engage in a system of checks and balances to enforce the Collective‚Äôs Codes of Conduct. You can read more about this transition [here](https://optimism.mirror.xyz/PLrAQgE1EGRo7GRrFoztplFChnUZda4DFGW3dkQayxY)


## How Retro Funding Works

Retroactive Public Goods Funding (Retro Funding) is based on the idea that it‚Äôs easier to agree on what *was* useful in the past than what *might* be useful in the future.
This is a series of experiments where members of the Citizens‚Äô House allocate surplus protocol revenue or portions of the Retro Funding token allocation to projects they deem have provided positive impact to the Optimism Collective. This is core to Optimism‚Äôs value of `impact = profit`:  the idea that that positive impact to the collective should be rewarded proportionally with profit to the individual.
 
These rewards create strong incentives for people to build public goods that benefit the Optimism Collective. 
The aggregate effect is an ecosystem that is easier to build on, learn about, and connect to, in turn driving application usage and generating more demand for blockspace. By funding public goods sustainably, the Collective can create a rich ecosystem and a better economy.

<p align=""center"">
   <img width=""50%"" height=""50%"" src=""https://github.com/ethereum-optimism/community-hub/assets/43515441/ca5c58de-58bb-43ca-bbd4-99c7f1c26534"">
</p>

Retro Funding also provides possible exit liquidity for public goods projects, which opens up a market for early investment in those projects. 
This means builders can:

- Be rewarded for their positive contributions without generating direct revenue
- Raise capital to bootstrap based on the early potential and promise of their project


## A Commitment to Experimentation
<p align=""center"">
   <img width=""70%"" src=""https://github.com/ethereum-optimism/community-hub/assets/43515441/4a4ea307-dbe9-4034-89fb-53d320ad740c"">
</p>

Retro Funding is a longterm bet to build the future Optimists want to see. 
The Collective will conduct regular rounds of Retro Funding, each different from the last. 
This is an emergent process that will take community participation to grow and prune. 
1. [Retro Funding round 1](./retropgf-1.md) took place at the end of 2021 and allocated $1 million across 58 projects. 
2. [Retro Funding round 2](./retropgf-2.md) took place in Q1 2023 and allocated 10m OP tokens across 195 projects.
3. [Retro Funding round 3](./retropgf-3.md) took place in Q4 2023 and allocated 30m OP tokens across 501 projects.
4. Retro Funding round 4 will take place in Q2/3 2024 and will reward onchain builders who contribute to the success of Optimism.

### Experimentation Framework
Retro Funding has three core components, each with substantial surface area for experimentation. 

1. **Impact scoping**: what should the Collective fund? 
   How is it defined and decided on? 
1. **Impact scoring:** how does the Citizens‚Äô House evaluate impact? 
   What units, process, or tools do we use? 
1. **Impact settlement:** how does voting work? 

For the first several rounds of Retro Funding, the Optimism Foundation will decide on scope and voting mechanics with input from the community. 
Eventually the set of variables around what to fund, how much to fund, and how to vote will be up to the Citizens‚Äô House, with checks and balances from the Token House. 

Over time, the Collective aims to expand the scope of Retro Funding to support the production of public goods beyond the immediate Optimism ecosystem. 
To get there, we must refine the tools and processes used for Retro Funding based on regular experimentation.

"
ethereum-optimism/community-hub,citizenship.md,governance/citizenship.md,"---
title: Citizenship
lang: en-US
---

The Citizens‚Äô House relies on the concept of identity-based governance. Citizens are meant to represent individual human stakeholders of the Collective: builders, users, and community members who are aligned with the project‚Äôs values and are interested in the long-term benefit of the Collective.
This is distinct from the more common pattern of token-voting governance (as used in [Optimism‚Äôs Token House](./token-house.md)). 

<img width=""auto"" alt=""Optimism Identity"" src=""https://user-images.githubusercontent.com/27849965/219097012-a21ebb1f-66dc-47a8-8b3f-6382774ad5d6.png"">

In the initial stage of bootstrapping the Citizens' House, participants receive temporary badges to vote in Retro Funding rounds.
In future stages, the Token House and Citizens‚Äô House together will collaborate on ongoing criteria for participation in the Citizens‚Äô House. 
This means the criteria for Citizenship will evolve over time. Holding a voting badge does not guarantee voting rights in future rounds of Retro Funding, as eventually membership will be determined by governance and may change.

**How will Citizenship Selection work?**

- Optimism has a neutral, permissionless attestation contract called the [`AttestationStation`](../identity/)
- Optimism Governance (Token + Citizens‚Äô House) has authority over a function that takes the AttestationStation as an argument and uses any data included to determine the set of Citizens.

Optimism governance can use any reputation data written to the AttestationStation contract to determine Citizenship in future iterations of the Citizens‚Äô House. 
This system is designed to be flexible and future-proof; rather than prescribe citizenship criteria at the outset, the Collective is keeping true to its principle of iterative governance. 

For more information on Optimism's identity layer, visit the [AttestationStation documentation](../identity/). 

## Becoming a Citizen
In the current phase of Citizens' House governance the number of voting badges is growing with each round of Retro Funding:
Retro Funding [round 1](./retropgf-1.md) had 24 badgeholders participate, [round 2](./retropgf-2.md) saw 71 badgeholders participate, and in [round 3](./retropgf-3.md) voting badges will be offered to 208 community members.  
Eventually, Citizenship is intended to be widely distributed to a large group of humans across the Optimism ecosystem with expertise in many different subcultures and industries. Optimism governance will have the power to set criteria for Citizenship. 

This means voting eligibility may someday be subject to rules and restrictions unknown today. Voting in Retro Funding 3 does not guarantee permanent participation in the Citizens‚Äô House and future iterations of Retro Funding.

"
ethereum-optimism/community-hub,delegate-info.md,governance/delegate-info.md,"---
title: Find and Track Your Delegate
lang: en-US
---

- [Identify your current delegate and view the delegate's voting record](https://help.optimism.io/hc/en-us/articles/6389519530779-How-do-I-see-how-my-delegate-voted-)

- [View information about specific delegates (their share of the votes, etc.)](https://dune.com/optimismfnd/optimism-op-token-house)

<!--

- [Delegate aggregate information (GINI coefficient, etc.)](https://app.flipsidecrypto.com/dashboard/optimism-governance-l5WXpo)

-->
"
ethereum-optimism/community-hub,delegate.md,governance/delegate.md,"---
title: How to be a delegate
lang: en-US
---
    

Participating in Token House governance can require a serious time commitment. 
For this reason, people are able to delegate their OP to community members who have explicitly volunteered to play an active role in Token House governance. 

Being a delegate is an important job that comes with a lot of responsibility. Therefore, before deciding to become a delegate, you should be familiar with:

* The [Working Constitution](https://gov.optimism.io/t/working-constitution-of-the-optimism-collective/55).
* The [Operating Manual](https://github.com/ethereum-optimism/OPerating-manual/blob/main/manual.md).
* The [Code of Conduct](https://gov.optimism.io/t/code-of-conduct/5751/13)


## Ready to be a delegate?

This is the process to become a delegate:

### Step 1: Commit

* Read the delegate responsibilities on the [forum](https://gov.optimism.io/t/delegate-commitments/235) and make sure you understand the responsibilities. 


### Step 2: Set up your profile  

* Register to be a delegate on the [Optimism Governance Portal (Optimism Agora)](https://vote.optimism.io/) following the [delegate commitment form](https://gov.optimism.io/t/delegate-commitments/235).
* It is not required, but you probably also want to [delegate your OP tokens' voting power to yourself](https://vote.optimism.io/). Please note self-delegation of growth experiments grants is a violation of the https://gov.optimism.io/t/collective-grant-policies/5833.

"
ethereum-optimism/community-hub,economics.md,governance/economics.md,"---
title: OP Economics
lang: en-US
---

The Optimism Collective is based on the idea that healthy public goods create a thriving and valuable ecosystem. 
The economics of this ecosystem are designed to generate value for three constituencies:

- Value accrues to **tokenholders** through the productive re-deployment of sequencer revenue. 
  Sequencer revenue is primarily directed to fund public goods, which creates ecosystem value and drives demand for blockspace.
- Value accrues to **contributors and builders** directly from retroactive public goods funding and the markets it enables.
  Builders also benefit symbiotically: it‚Äôs better to build in an ecosystem with well-funded tools, education, apps, and infrastructure.
- Value accrues to **users and community members** from ongoing airdrops of OP, from project incentives made possible by OP ecosystem funding, and from the benefit public goods provide.

Together, it looks like this:

![](../../assets/docs/governance/economics/virt_cycle.png)

Let‚Äôs break it down ‚§µÔ∏è

## Demand for OP blockspace generates revenue

Funding for the OP economy comes from ownership of OP Mainnet and the value of its blockspace. 
Today, funding comes directly from the centralized sequencer, accruing to The Optimism Foundation for redistribution. 
In the future, funding can accrue directly to the protocol by selling the right to participate in Optimism‚Äôs decentralized sequencing network.

Simply put: the right to blockspace is the sustainable source of revenue that drives OP‚Äôs economic model and grows with the network itself.

## Revenue is distributed to public goods

Communities benefit from all sorts of public goods, from education to city infrastructure to open source software. 
But many markets fail to provide adequate funding and support for those public goods. 
It‚Äôs here that Optimism takes a step forward, by building a sustainable funding source into the mechanisms of the network itself.

Direct or auctioned sequencer revenue is distributed back to the ecosystem primarily through Retroactive Public Goods Funding ([RetroPGF](https://medium.com/ethereum-optimism/retroactive-public-goods-funding-33c9b7d00f0c)).
This creates strong incentives for individuals to build for the public good of the Optimism Collective.

To start, the Citizens‚Äô House will vote quarterly on distributions of funds to individuals, teams, projects, or communities that have provided subjective value over a specified time period. 
This directly rewards community members for the positive impact of their work.

RetroPGF also provides possible exit liquidity for public goods projects, which opens up a market for early investment in those projects. 
This means builders can:

- Be compensated for their positive contributions without generating direct revenue.
- Raise capital to bootstrap based on the early potential and promise of their project.

In the long-term, the Foundation expects this mechanism to drive a wide range of pro-social downstream effects, which the Collective can capture and expand upon through frequent experimentation and iteration.

## Value from public goods drives demand for blockspace

Funding public goods drives growth ‚Äî and therefore network revenues ‚Äî from the ground up. 
In our [first round](https://vitalik.ca/general/2021/11/16/retro1.html) of RetroPGF, Optimism funded a set of hugely valuable developer tools and core infrastructure. 
The aggregate effect is an ecosystem that is easier to build on, learn about, and connect to, in turn driving application usage and generating more demand for blockspace.

But what value do these public goods provide, and for whom is it valuable? 
This is a rich design space. 
Optimism‚Äôs governance is designed to create conditions for experimentation around this question. 
The Foundation draws heavily on the work of Ostrom, Vitalik, and others to make sure funding for public goods is maximally efficient, effective, and safe. 

To start, Foundation governance is shared and divided through a two-house system, where network parameters for the amount of funding are controlled by both houses, but the governance of RetroPGF allocation is determined by a set of Citizens with local knowledge and skin in the game.

Thoughtful allocation of public goods funding will create longterm value for builders, users, tokenholders, citizens and the entire Optimism Collective.

"
ethereum-optimism/community-hub,existing-delegate.md,governance/existing-delegate.md,"---
title: Existing Delegates
lang: en-US
---
    
Thank you for being active in Optimism Token House Governance. 

As a delegate, you should:

- Join the conversation in the below channels in our [Discord](https://discord-gateway.optimism.io/):
  - [#gov-general](https://discord.com/channels/667044843901681675/968498307913637919): This channel is for general governance discussions.
  - [#delegate-discussion](https://discord.com/channels/667044843901681675/989611992295813241): If you are a Top 100 delegate, join the conversation with other larger delegates to discuss proposals & the governance process. You can check your ranking [here](https://dune.com/optimismfnd/optimism-op-token-house)

- Provide feedback on draft proposals in the [Proposals Discussion](https://gov.optimism.io/c/proposals/38) section of the Forum
     - If you are a Top 100 delegate then you can also approve non-grant proposals. You can check your ranking [here](https://dune.com/optimismfnd/optimism-op-token-house).
       Non-grant proposals need at least 4 approvals to move to a vote. 
       To approve a proposal post this phrase in a forum comment on Discourse:
       > **I am an Optimism delegate with sufficient voting power and I believe this proposal is ready to move to a vote.**

- Vote on non-grant proposals via the [Optimism Governance Portal](https://vote.optimism.io/). 
  

- Post your voting rationale in a [Delegate Communications Thread](https://gov.optimism.io/c/governance/41)

- Join the community calls, which occur every other Tuesday at 1pm ET. 
  [The governance calendar](https://calendar.google.com/calendar/u/0/r?cid=Y180aHVpNzBpdG0wODllN3Q4cTUwaGVoMWtub0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t) shows which Tuesdays, and how to join the call. You can also check which Season and Cycle we're in on the calendar. 

- Stay up to date with voting cycles and general governance updates in the Governance section of the [Forum](https://gov.optimism.io/c/governance/41).

"
ethereum-optimism/community-hub,get-a-grant.md,governance/get-a-grant.md,"---
title: Get a Grant
lang: en-US
---

There are several ways the Optimism Collective supports builders with grants. There are two main types of grants: Collective grants, which are upfront grants for projects to be completed in the future, and Retro Funding, which are grants for projects that have already been completed based on their impact.

# Collective Grants

Collective Grants are made in OP and¬†support specific projects to be completed in the future. **All Mission Grants are locked for one year,** except growth experiments Grants which must pass OP directly through to the end-users. 

Grants will only be distributed upon completion of specified milestones. All Collective Grants are subject to the [Collective Grant Policies](https://gov.optimism.io/t/collective-grant-policies/5833). 

There are two main sources of Collective Grants. 


### 1. Mission Grants 

[Missions](https://gov.optimism.io/t/token-house-missions/5881) are grants aligned with one of the¬†[Collective Intents](https://gov.optimism.io/t/collective-intents-season-5/6883). Mission Requests are specified initiatives that can be completed start-to-finish (marked done within 12 months). Each Mission Request has a bounty of OP attached. The Foundation and the Top 100 Token House Delegates can issue Mission Requests. Any team can submit a Mission Application to fulfill a Request. 

- You can view the full list of Mission Requests¬†**[here](https://github.com/ethereum-optimism/ecosystem-contributions/issues?page=1&q=is%3Aissue+is%3Aopen+label%3A%22Delegate+Mission+Request%22)** 

- Find an open Mission Request on the list that you‚Äôd like to work on.
- Submit your application via the application link or directly as a comment, as specified, on the¬†**[Github Issue](https://github.com/ethereum-optimism/ecosystem-contributions/issues?page=1&q=is%3Aissue+is%3Aopen+label%3A%22Delegate+Mission+Request%22).** Each Mission Request will specify a submission and selection deadline.
- Delegate Mission Applications will be evaluated and selected by the Grants Council, with the help of the Developer Advisory Board. Foundation Mission Requests will be evaluated and selected by the Optimism Foundation.

**How to apply**:

- See the [Mission Application Guide](https://gov.optimism.io/t/mission-applicant-guide-how-to-submit-a-mission-application/6899) and visit the [Github](https://github.com/ethereum-optimism/ecosystem-contributions/issues?page=1&q=is%3Aissue+is%3Aopen+label%3A%22Delegate+Mission+Request%22)
- Ask any questions you have about Delegate Mission Requests in the # grants channel of our [Discord](https://discord-gateway.optimism.io/) 

### 2. Foundation Funds

The Foundation may also make grants from the Partner or Seed Fund, on a case-by-case basis. 

The Seed Fund may be used to bring projects/teams from 0 ‚Üí 1, particularly for projects that are entirely focused on building Optimism.

The Partner Fund may make grants used to provide tooling to the Optimism community, bring applications to OP Mainnet, promote education, experiment with liquidity mining programs, drive consumer usage, and/or support Optimism‚Äôs governance system.


# Retroactive Grants (Retro Funding)

Retro Funding stands for Retroactive Public Goods Funding. Retro Funding rewards are allocated by the Citizens‚Äô House to reward work that has already been completed for its impact.

If you‚Äôre working on something you believe is aligned with the Collective and you don‚Äôt need as much upfront certainty around scope of work, reward amount, or timing of rewards, you could be a good candidate for Retro Funding rewards.

- Decisions on which projects receive rewards are made by the Citizens‚Äô House based on their assessment of each projects‚Äô positive impact to the Collective.
- The last round of Retro Funding (RetroPGF Round 3) rewarded developer tooling, community programs, builders, educational work, client teams, and much more. For more detail on past recipients, see this¬†**[post](https://optimism.mirror.xyz/37Bgum6MfTJWDuE41CH9RXSH5KBm_RCL5zsSFeRZl4E)**.

**How to apply**:

- Build something that provides positive impact to the Collective and stay tuned for more information about the next round of Retro Funding! It‚Äôs that simple.
- Visit [retrofunding.optimism.io](https://retrofunding.optimism.io/) to apply!

"
ethereum-optimism/community-hub,gov-fund.md,governance/gov-fund.md,"---
title: Governance Fund Overview
lang: en-US
---

*[To discuss the Governance Fund, head to the Optimism governance forum](https://gov.optimism.io/t/governance-fund-discussion-thread/213)*.





## Overview

5.4% of the total initial token supply (231,928,234 OP) will be distributed to Optimism projects and communities via the Governance Fund.  
The goal of the Governance Fund is to empower the OP community to proactively incentivize future growth of projects and communities in the Optimism ecosystem. 
You can read more about the total allocation of OP in the [Allocations section](./allocations.md) of our [Governance docs](./README.md). 

The learn more about the purpose of the Governance Fund please read the [Governance Fund Charter](https://gov.optimism.io/t/governance-fund-charter/3944).  


## Phase 2
Phase 2 will distribute grants that align with Mission Requests. Please see [Get a Grant](https://community.optimism.io/docs/governance/get-a-grant/) for further details. 

## Phase 1

Phase 1 distributed grants to projects in the Optimism ecosystem. 
You can see how Phase 1 grants have been distributed to date in [the Governance Tracker](https://docs.google.com/spreadsheets/d/1eaHOlWB34ij1KGsXdaNyTQg4tt1Pu2JurJsElBb6a8k/edit#gid=0). 

When a project gets a proposal approved, they are still eligible to apply for further proposals. 
Projects are also encouraged to reference data from the success of their initial distribution to strengthen their case in future proposals.


## Phase 0

Phase 0 was designed to reward existing projects that have driven growth of the Optimism ecosystem. 

The amount of funding for each project was determined by a set of onchain metrics, calculated via a snapshot of the OP Mainnet chain on April 1, 2022 at 12:00am UTC.
To see live tracking on Gov Fund allocations, please see the [Public Distribution Tracker](https://docs.google.com/spreadsheets/d/1eaHOlWB34ij1KGsXdaNyTQg4tt1Pu2JurJsElBb6a8k/edit#gid=0).

"
ethereum-optimism/community-hub,howto-delegate.md,governance/howto-delegate.md,"---
title: How to Delegate Your Tokens
lang: en-US
---


### Why Delegate?

Participating in governance of the Optimism Token House can require a serious time commitment. 
For this reason, people are able to delegate the voting power of their OP tokens to a community member who has explicitly volunteered to play an active role in Token House governance. 
These volunteers are called delegates.

If you do not wish to delegate your voting power to a representative, you will still need to delegate *to yourself* in order to vote. 

### How do I delegate my votes to a representative?

1. [Choose a delegate](https://vote.optimism.io/delegates). 
   
   Take the time to read through delegate statements of interest, choosing your delegate is an important decision! 
   A healthy governance system is good for Optimism and for all OP holders. Choosing a good delegate is in each OP token holder's best interest.

   This delegate will vote on your behalf. 
   You will not hold any voting power or execute your own votes but you will retain 100% ownership of your tokens, and can use them however you want.

   View top delegates by voting weight on [Dune](https://dune.com/optimismfnd/optimism-op-token-house).

2. [Go to the voting app](https://vote.optimism.io/) to see that you‚Äôve delegated your tokens as intended.

   Please note that delegate voting power is measured at the start of every voting period, which is every three weeks.

3. Your delegate should write up the reasoning behind their votes in a [Delegate Communications Thread](https://gov.optimism.io/c/governance/41).

Delegation is always in your control. You can return to the [voting app](https://vote.optimism.io/) at any time to change your delegate selection. 

### How do I delegate to myself?

Would you rather vote yourself? 
No problem, but you‚Äôll have to delegate to yourself first! 
If you try to vote with your tokens but have not delegated to yourself, you will not be able to vote. 

1. Delegate to yourself by registering via the [Optimism Governance Portal](https://vote.optimism.io/) by connecting your wallet then creating your delegate statement.

1. [Go to the voting app](https://vote.optimism.io/) to see that you‚Äôve delegated your tokens to your own address.

   Please note that delegate voting power is measured at the start of every voting period, which is every three weeks.

1. Once you‚Äôve been added as a delegate in the next voting cycle, you can start [voting](https://vote.optimism.io/)!
Go to the [Optimism Governance Portal](https://vote.optimism.io/), connect your wallet, and vote.
There is no minimum OP holding voting requirement, but you will need to have the OP tokens you wish to delegate or vote with in your wallet when the voting measurement is taken. Tokens that are staked or LP‚Äôd at the time of measurement do not carry voting power.





"
ethereum-optimism/community-hub,law-of-chains-disclaimer.md,governance/law-of-chains-disclaimer.md,"---
title: Law of Chains Disclaimer
lang: en-US
---


::: tip Important

The [Law of Chains](https://gov.optimism.io/t/law-of-chains-v0-1-full-draft/6514) is fundamentally social in nature, intended to guide Optimism Governance and participants in the Optimism Collective. It is not a legal contract, and provides no legally enforceable warranties, representations, indemnities, rights, or obligations.  Participants commit to the Law of Chains independently.  No party acquires the ability to bind the other by virtue of their shared commitment to these guidelines. 

:::

The Law of Chains is intended to provide guidance to ecosystem participants.  It does not establish any legally enforceable rights or obligations.  Its contents do not have the effect of law and are not meant to legally bind the public or any person in any way.  

For example, the Law of Chains presents a concept of ‚ÄúParticipant Protections.‚Äù  This framing is intended to reflect elevated importance; a matter of principle. But Participant Protections are not, and do not create, legal rights, or corresponding legal obligations. They are not absolutely guaranteed to any ecosystem participant.  

If Participant Protections are violated, one may appeal to Optimism Governance.  This is like saying: ‚Äúone may appeal to the democratic process.‚Äù  Optimism Governance is not a legal entity or a singular adjudicative body.  It is a collection of many unaffiliated, independent, and uncoordinated individual voters.  Its outcomes cannot be guaranteed. 

Relatedly, participants that subscribe to the Law of Chains do so independently, and they conduct themselves independently under it, bearing their own risks and rewards. No party acquires the ability to contractually bind the other by virtue of their shared commitment to these guidelines. The Law of Chains does not create a partnership, joint venture, employment, franchise, or agency relationship among anyone. 

The Law of Chains is a set of guidelines.  It is not a contract.  If you need legally enforceable guarantees from specific people or entities, you need some kind of specific contract with them. This document, standing alone, is not that.  For more information, see Law Chains, Section 8 (Enforcement). 

Last Updated:  July 25, 2023

"
ethereum-optimism/community-hub,media.md,governance/media.md,"---
title: Governance Videos
lang: en-US
---

These are governance videos.
[See here for developer videos](../developers/media.md).


## ETHDenver 2023 

February 24th to Mar 5th, 2023

<iframe width=""682"" height=""384"" src=""https://www.youtube.com/embed/Q5TL_AJhuro"" title=""Optimism at ETHDenver 2023"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"" allowfullscreen></iframe>


### The Iterative Nature of Optimism Governance - Justine 

In this video Justine from the Optimism Foundation talks to delegates involved with Optimism governance about their experience thus far. 
The talk touches on a few different Optimism governance initiatives including the Grants Council and Protocol Delegate Program, with the overall theme being the iterative nature of Optimism governance.


<iframe width=""682"" height=""360"" src=""https://www.youtube.com/embed/I18fHyVpFg0"" title=""The Iterative Nature of Optimism Governance"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"" allowfullscreen></iframe>


### The Collective DAO Archive - Justine 

At both ETHDenver, and Schelling Point, Justine shared findings from her months long research into DAO governance and policy. Not only did she organize her research results into 10 categories and bless us with actionable takeaways for each, she also open sourced her work! Check out her presentation and dive into [The Collective DAO Archives](https://plaid-cement-e44.notion.site/The-Collective-DAO-Archives-Governance-Library-a58c6a2567c34636bc425ac97c7c9a79), a searchable library of DAO policies, programs, and processes.

<iframe width=""720"" height=""407"" src=""https://www.youtube.com/embed/-szn6codPOk"" title=""The Collective DAO Archives by Justine Humenansky"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"" allowfullscreen></iframe>


### Playing the Cooperative Game Retroactively - Ben Jones 

The OP Stack, the codebase that powers Optimism, is the most overpowered public good in the game. But don‚Äôt take our word for it; you can take Ben Jones‚Äô - aka Weird ETH Yankovic - who covered all things RetroPGF and how the OP Stack fits into the broader Ethereum ecosystem.

<iframe width=""720"" height=""407"" src=""https://www.youtube.com/embed/Ll-iAJeueG4"" title=""Playing the Cooperative Game, ‚ôªÔ∏èüî¥‚ú®Retroactively‚ú®üî¥‚ôªÔ∏è with Ben Jones"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"" allowfullscreen></iframe>


### Kelvin Interviews ETHDenver

<iframe width=""682"" height=""384"" src=""https://www.youtube.com/embed/TXDqMrjPAKg"" title=""Kelvin Does Denver"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"" allowfullscreen></iframe>


"
ethereum-optimism/community-hub,proposals.md,governance/proposals.md,"---
title: Submitting Proposals
lang: en-US
---

::: tip This information is here for your convenience

The source of truth for all governance related processes is the [Operating Manual](https://github.com/ethereum-optimism/OPerating-manual/blob/main/manual.md#proposal-process--components-of-a-valid-proposal). 

:::

## Governance Fund Grant Proposals

You can apply for grant funding from the Governance Fund by submitting an [Application](https://gov.optimism.io/t/mission-applicant-guide-how-to-submit-a-mission-application/6899) to a Mission Request which will be evaluated by the¬†Optimism Grants Council or Foundation.

## Non-Grant Proposal Types

There are [other types of proposals](https://github.com/ethereum-optimism/OPerating-manual/blob/main/manual.md#valid-proposal-types) that you can submit.

There is no minimum holding requirement for submitting a proposal but all non-grant proposals must be approved by four delegates with sufficient voting power to move to a vote (as defined in [the operating manual](https://github.com/ethereum-optimism/OPerating-manual/blob/main/manual.md#valid-proposal-types)).

The process for submitting non-grant proposals is outlined in the [the operating manual](https://github.com/ethereum-optimism/OPerating-manual/blob/main/manual.md#valid-proposal-types)

"
ethereum-optimism/community-hub,retropgf-1.md,governance/retropgf-1.md,"---
title: RetroPGF Round 1
lang: en-US
---

The Optimism Collective‚Äôs first round of Retroactive Public Goods Funding (Retro Funding) took place in Q4 of 2021. 
This round was the first Retro Funding  experiment of the collective and was [announced](https://medium.com/ethereum-optimism/retropgf-experiment-1-1-million-dollars-for-public-goods-f7e455cbdca) in the months following the [initial blog post on Retroactive Public Goods Funding](https://medium.com/ethereum-optimism/retroactive-public-goods-funding-33c9b7d00f0c). 
Retro Funding 1 allocated $1M to **fund projects that have provided value to the Optimistic Ethereum ecosystem.** 

## Results
In the first round of Retro Funding, 76 projects were nominated, and 58 were awarded funding by the badgeholders!
The median funding received by a project in Retro Funding 1 was $14,670, while the top 10% of projects received more than $36,919.

- You can find a sheet with all projects and their funding allocations [**here**](https://docs.google.com/spreadsheets/d/1g4ilAByMNQsmlBC8cskQip7Ojd_qK6IhozJCyoVfU9k).
- You can find Vitalik's review of the round [**here**](https://vitalik.ca/general/2021/11/16/retro1.html)

## Process and timeline overview
1. Badgeholder selection - In RetroPGF Round 1, 24 badgeholders, made up of 8 Optimists and 16 Ethereum community members, were selected to vote on distributing retrofunding to nominated projects.
2. Nominations (Oct 5th - Oct 21st) - anyone could [nominate a project via a form submission](https://docs.google.com/forms/d/e/1FAIpQLSdSF_Om4JfhQAjdDOHnjfbRJfJg1F-EY_I_IR0g-CDaa9FqyQ/viewform?vc=0&c=0&w=1&flr=0) by providing a project name, project lead name, project lead e-mail and impact description.
3. Voting (Oct 24th - Nov 1st) - Badgeholders were provided with a [badgeholder manual](https://www.notion.so/Public-Badge-Holder-Manual-d05c3695ef684d1fb62ef38690fb3ff7) and asked to evaluate and vote on nominated projects via [quadraticvote.co's interface](https://quadraticvote.co/event?id=2c357972-9b0d-4390-b738-32297b653cf1). 

"
ethereum-optimism/community-hub,retropgf-2.md,governance/retropgf-2.md,"---
title: RetroPGF Round 2
lang: en-US
---

The Optimism Collective‚Äôs second round of Retroactive Public Goods Funding (Retro Funding) took place in Q1 of 2023. 
RetroPGF 2 allocated 10m OP tokens to **fund public goods that support development and usage of the OP Stack.** 

Optimism‚Äôs vision is to build a global system where positive impact to the collective is rewarded by profit to the individual. 
Retro Funding is an experimental mechanism to realize this goal of **‚Äúimpact = profit‚Äù**.

By funding public goods sustainably, the Collective can create a rich ecosystem and a better economy ‚ú®

## Results
In this second round of Retro Funding, 195 people and projects were nominated, and all 195 were awarded funding by the badgeholders! While going above and beyond in assessing project impact badgeholders allocated their votes among 40 different projects on average. The median OP received by a project for RetroPGF 2 was 22,825, while the top 10% of projects received more than 140k OP.

- You can find the write up on the results of round 2 [**here**](https://optimism.mirror.xyz/Upn_LtV2-3SviXgX_PE_LyA7YI00jQyoM1yf55ltvvI)
- You can find a sheet with all projects and their OP allocation [**here**](https://docs.google.com/spreadsheets/d/13QTVuv4HTTDBctRxuqngECUMc70QP4usbmcFT8XT-GI/edit?usp=sharing).

## Process and timeline overview
1. Badgeholder selection - badgeholders have the power to distribute OP tokens to projects. They‚Äôre instrumental in running an effective Retro Funding round. For RetroPGF Round 2, badgeholders were selected across four different criteria.
   1. 14 badgeholders were selected based on their participation as badgeholders in [round one of RetroPGF](https://vitalik.ca/general/2021/11/16/retro1.html)
   2. 21 badgeholders were selected by the Optimism Foundation
   3. 10 badgeholders were [elected by Optimism‚Äôs Token House](https://snapshot.org/#/opcollective.eth/proposal/0x22d4c3ab56832de58c1774d1a0aeb61ba6dde8b16c0f8382f85d8935f3ee1f11)
   4. 29 badge holders were nominated by badgeholders from the three categories above
2. Nominations (Jan 17 - Jan 31st) - anyone could [nominate a project on the forum](https://gov.optimism.io/t/nominations-for-retropgf2/4636) by providing a name, impact description and link to Github/Twitter
3. Project profile creation (Feb 7th - Feb 21st) - Projects had to [create a profile](https://app.optimism.io/retropgf-manager) where they were asked for general information, as well as a description of their project and its impact. Information provided by Projects can be viewed on the [Retro Funding discovery page](https://app.optimism.io/retropgf-discovery).
4. Voting (Mar 7th - Mar 21st) - Badgeholders were provided with a [badgeholder manual](https://www.notion.so/Optimism-RetroPGF-2-Badgeholder-Manual-11ef6cd63c254258a32246289f45925c) and asked to evaluate and vote on nominated projects via a voting form. (Mar 7th - Mar 21st)


## Learnings and Reflections
You can find an extensive write-up of the learnings and reflections of round 2 [here](https://optimism.mirror.xyz/7v1DehEY3dpRcYFhqWrVNc9Qj94H2L976LKlWH1FX-8). These learnings will inform the design and execution of RetroPGF round 3. 



"
ethereum-optimism/community-hub,retropgf-3.md,governance/retropgf-3.md,"---
title: RetroPGF Round 3
lang: en-US
---

The Optimism Collective‚Äôs third round of Retroactive Public Goods Funding (Retro Funding) took place in the fall of 2023. RetroPGF 3 allocated 30m OP tokens to **reward contributions that have supported the development and adoption of Optimism.** 


### Process Overview
1. Project Applications: September 19th - October 23rd
2. Voting: November 6th - December 7th
3. Results & Token Disbursement: January, 2024

## Results
üëâ You can view the Mirror post announcing the RetroPGF Round 3 recipients [here](https://optimism.mirror.xyz/37Bgum6MfTJWDuE41CH9RXSH5KBm_RCL5zsSFeRZl4E) and the official results on [Agora](https://vote.optimism.io/retropgf/3).

Retro Funding recipients must complete a KYC process with the Optimism Foundation. If you're a recipient, please direct questions or problems with the KYC & grant delivery process to compliance@optimism.io.

You can view the written retrospective with the learnings & reflections on RetroPGF 3 [here](https://optimism.mirror.xyz/Bbu5M1mTNV2Z637QxOiF7Qt7R9hy6nxghbZiFbtZOBA). 

## Voting
üëâ Voting was live from November 6th - December 7th. There were two applications badgeholders could use to vote in RetroPGF 3:
- West - https://round3.optimism.io/
- Agora - https://vote.optimism.io/

In addition, there's useful tooling that has been built to support badgeholders:
- [Pairwise](https://www.pairwise.vote/) - Gamifying list creation by categorizing applicants into small groups for experts' pairwise comparison.
- [OpenSource Observer](https://www.opensource.observer/) - An Analytics platform for impact metrics on Retro Funding applications

Badgeholders can find all the information relevant for voting in the [Badgeholder Manual ](https://www.optimism.io/badgeholder-manual) 

## Project Applications

üëâ **You can see applications on the voting applications from [Agora](https://vote.optimism.io/retropgf/3) and [West](https://round3.optimism.io/)** 

Every type of contribution to the Optimism ecosystem is eligible for Retro Funding. Whether you‚Äôre a developer working on an Ethereum execution client or an educator creating Optimism-inspired video content, if you‚Äôre providing impact, you‚Äôre eligible! 

Retro Funding is open to all Optimism artists, creators, writers, builders, and evangelists.
If you're looking for inspiration on what you could contribute to the Optimism Collective, check out the [Ecosystem Contributions Board](https://github.com/ethereum-optimism/ecosystem-contributions)

## Badgeholders 
- In RetroPGF 3, there were 146 badgeholders who were selected via a mulitude of methods. Find out more details about this process [here](https://gov.optimism.io/t/retropgf-3-voting-badge-distribution-results/7001)
- If you're a badgeholder, you can go to the [badgeholder hub](https://plaid-cement-e44.notion.site/Badgeholder-hub-6a35e12d876048868e4ae264dbadd076?pvs=4) to find relevant resources and stay up to date.
- If you want to find out more about how voting in RetroPGF 3 works, check out the [Round Design documentation](https://gov.optimism.io/t/retropgf-3-round-design/6802)


## FAQ
<details>
  <summary> Q: Did my contribution need to have taken place between the end of round 2 and beginning of round 3?
 </summary>
A: No, all contributions that have supported the development and adoption of Optimism are considered, no matter when they took place.
</details>

<details>
  <summary> Q: Were projects nominated?
 </summary>
A: There was no nomination process, instead projects directly applied for RetroPGF 3.
</details>

<details>
  <summary>Q:Are VC funded teams or teams that received a grant from the Optimism Token House eligible for Retro Funding?
 </summary>
Yes, both VC funded teams as well as teams that received a grant from the Token House are eligble. Badgeholders uphold the principle of ""impact = profit"", where individuals should receive profit equal to the impact they provided to the Optimism Collective.    
</details>

<details>
  <summary>Q: If I received rewards in RetroPGF 2, was I able to sign up for Round 3 with the same contribution? 
 </summary>
Yes, you were able to apply again with the same contribution. We asked that you include the rewards you received in Round 2 in your ""Grants and Funding"" section of your application. 
</details>


<details>
  <summary>Q: Are Retro Funding rewards subject to a 1 year lock-up?
 </summary>
No, Retro Funding rewards are not subject to a 1 year lock-up. After the round concludes, projects will need to complete a KYC process with the Optimism Foundation and will then gradually receive their Retro Funding rewards over a 90 day period. 
</details>

<details>
  <summary>Q: Are RetroPGF 3 rewards sourced from sequencer revenue or Retro Funding token allocation?
 </summary>
Round 3 rewards are sourced from the [Retro Funding token allocation](https://community.optimism.io/docs/governance/allocations/). Future rounds of Retro Funding may allocate surplus protocol revenue.  
</details>

<details>
  <summary>Q: Does my Project need to be on OP mainnet to be eligible? 
 </summary>
    No, your project does not need to be on OP mainnet. As long as you‚Äôre providing impact to the Optimism Collective, you are eligible for Retro Funding!
</details>

"
ethereum-optimism/community-hub,token-house-history.md,governance/token-house-history.md,"---
title: Token House History
lang: en-US
---

## Seasons and voting cycles

Token House governance operates on a seasonal schedule.
Seasons are separated with a Reflection Period. Reflection Periods may be followed by Special Voting Cycles to adopt proposals that come out of the previous Reflection Period.

During each Season, Token House voting occurs via three-week voting cycles. 
Voting Cycles begin on Thursday at 19:00p GMT (12p PST) and end on Wednesday at 19:00 GMT (12p PST).


During Reflection Periods, the Optimism Foundation will publish a proposed changelog to the Operating Manual and a set of governance proposals aimed at addressing the feedback received in the previous season. 
Reflection periods are coomprised of Special Voting Cycles during which we vote on proposals to modify the collective's structure.

You can see up to date information about the seasons and voting cycles in [the governance calendar](https://calendar.google.com/calendar/u/0/r?cid=Y180aHVpNzBpdG0wODllN3Q4cTUwaGVoMWtub0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t).


::: tip At the time of writing we're entering Season #5: January 4th - May 8th, 2024
:::

## History

### Reflection Period #4
   - [Developer Advisory Board Budget](https://vote.optimism.io/proposals/67269789039629895178640755758170247888863792004069768037736283616310331965838)
   - [Developer Advisory Board Ratification](https://vote.optimism.io/proposals/95102633290576253416299445955061077431090693890673037767791097228222587378331)
   - [Code of Conduct Council Budget](https://vote.optimism.io/proposals/26993004599223263087505603454119723751877285713239446072681254755783718227511)
   - [Code of Conduct Elections](https://vote.optimism.io/proposals/102821998933460159156263544808281872605936639206851804749751748763651967264110)
   - [Grants Council Operating Budget](https://vote.optimism.io/proposals/47864371633107534187617995773541299064963460661119440983190542488743950169122)
   - [Grants Council Elections - Builders](https://vote.optimism.io/proposals/13644637236772462780287582686131348226526824657027343360896627559283471469688)
   - [Grants Council Elections - Growth Experiments](https://vote.optimism.io/proposals/87355419461675705865096288750937924893466943101654806912041265394266455745819)
   - [Grants Council Elections - Metrics and Milestones](https://vote.optimism.io/proposals/96868135958111078064987938855232246504506994378309573614627090826820561655088)
   - [Intent Budgets](https://vote.optimism.io/proposals/11595556248137084019024264942104169821784001997050285438055123196153848845549)
   - [Chain Delegation Program](https://vote.optimism.io/proposals/23645858735980247449510302520189443998369792603230659191221949690963680987113)
   - [Ratification of the Law of Chains](https://vote.optimism.io/proposals/112047914448178129124907599845371359974256142096707624346739203514792263033877)
   - [Anticapture Commission](https://vote.optimism.io/proposals/22387138384033903985192420283570655912990907953544385753324581204637906644383)
   - [Security Council Vote #1](https://vote.optimism.io/proposals/27439950952007920118525230291344523079212068327713298769307857575418374325849)
   - [Security Council Vote #2](https://vote.optimism.io/proposals/85591583404433237270543189567126336043697987369929953414380041066767718361144)
   - [Upgrade #2: Canyon Protocol Upgrade](https://vote.optimism.io/proposals/20327152654308054166942093105443920402082671769027198649343468266910325783863)

### Season #4: June 8th, 2023 - September 20th, 2023
**Voting Cycle #13 (June 8th, 2023 - July 12th, 2023)**
  - [Intent #1 Missions](https://vote.optimism.io/proposals/89065519272487155253137299698235721564519179632704918690534400514930936156393)
  - [Intent #3 Missions](https://vote.optimism.io/proposals/76298930109016961673734608568752969826843280855214969572559472848313136347131)
  - [Intent #4 Missions](https://vote.optimism.io/proposals/16633367863894036056841722161407059007904922838583677995599242776177398115322)
  - [Grants Cycle Roundup](https://gov.optimism.io/t/cycle-13-final-grants-roundup/6454)
 
 **Voting Cycle #14 (July 13th, 2023 - August 16th, 2023)**
  - [Intent #2 Budget Proposal #2](https://vote.optimism.io/proposals/46755965320953291432113738397437466520155684451527981335363452666080752126186)
  - [Grants Cycle Roundup](https://gov.optimism.io/t/cycle-14-final-grants-roundup/6676)
 
**Voting Cycle #15 (August 17th, 2023 - September 20th, 2023)**
  - [Grants Cycle Roundup](https://gov.optimism.io/t/cycle-15-final-grants-roundup/6858)

### Reflection Period #3

- [Intent #1 Budget Proposal](https://vote.optimism.io/proposals/51738314696473345172141808043782330430064117614433447104828853768775712054864)
- [Intent #2 Budget Proposal](https://vote.optimism.io/proposals/32970701904870446614408373011942917680422376755229075190214017021915019093516)
- [Intent #3 Budget Proposal](https://vote.optimism.io/proposals/94365805422398770067924881378455503928423439630602149628781926844759467250082)
- [Intent #4 Budget Proposal](https://vote.optimism.io/proposals/103695324913424597802389181312722993037601032681914451632412140667432224173014)
- [Protocol Delegation Program Renewal](https://vote.optimism.io/proposals/64930538748268257621925093712454552173772860987977453334165023026835711650357)
- [Grants Council Elections - Builders](https://vote.optimism.io/proposals/2808108363564117434228597137832979672586627356483314020876637262618986508713)
- [Grants Council Elections - Growth Experiments](https://vote.optimism.io/proposals/103713749716503028671815481721039004389156473487450783632177114353117435138377)
- [Inflation Adjustment Proposal](https://vote.optimism.io/proposals/80982553847843251343725022866904947381762263529096361834044805234222094077710)
- [Foundation Budget Year 2](https://vote.optimism.io/proposals/29831001453379581627736734765818959389842109811221412662144194715522205098015)

### Season #3: January 26th, 2023 - April 5th, 2023

**Voting Cycle #11 (March 2nd - April 5th)**
  - [Upgrade #1: Bedrock Upgrade Proposal](https://vote.optimism.io/proposals/114732572201709734114347859370226754519763657304898989580338326275038680037913)
  - [Grants Cycle Roundup](https://gov.optimism.io/t/cycle-11-final-grants-roundup/5842)

**Voting Cycle #10 (January 26th, 2023 - March 1st, 2023)**
  - [Grants Cycle Roundup](https://gov.optimism.io/t/cycle-10-final-grants-roundup/5418)
    

### Reflection Period #2
 
* [Protocol Delegation Elections](https://snapshot.org/#/opcollective.eth/proposal/0x88583c43b196ec86cee45345611b582108f1d6933ab688a7cae992a6baa552a6)
* [Grants Council Elections - Growth Experiments](https://snapshot.org/#/opcollective.eth/proposal/0xa9457a5344747a6c272de786419fc7a4e83fcf0f927ef9b1ce767452faa9b453)
* [Grants Council Elections - Builders](https://snapshot.org/#/opcollective.eth/proposal/0xdcff47b93fb17a11411bda1809e22cba72e5131d31624e4c0f2b9dbee6811f5c)
* [Badgeholder Nomination Voting](https://snapshot.org/#/opcollective.eth/proposal/0x22d4c3ab56832de58c1774d1a0aeb61ba6dde8b16c0f8382f85d8935f3ee1f11)
* [Protocol Delegation Program](https://snapshot.org/#/opcollective.eth/proposal/0x3a1f9a30c47d6060f3b732404f3a6b2ceba3da07be0505ef0f93b6dab7fa3185)
* [Grants Council](https://snapshot.org/#/opcollective.eth/proposal/0x37fc8a6ae60cff2e4e72fe9c0567f739bb9a78262c2ada236892fcbc7af2c32d)

### Season #2: Aug 25th - Nov 9th, 2022

* [Voting cycle #8 (Oct 20th - Nov 9th](https://gov.optimism.io/t/voting-cycle-8-roundup/3742) 
* [Voting cycle #7 (Sep 29th - Oct 19th)](https://gov.optimism.io/t/voting-cycle-7-roundup/3586)  
* [Voting cycle #6 (Sep 8th - Sep 28th)](https://gov.optimism.io/t/voting-cycle-6-roundup/3481)

### Reflection Period #1 

The reflection period was a break between season 1 and season 2 where the Optimism foundation, with the help of delegates and community members, updated and improved the governance process.

- [Operating Manual v2](https://gov.optimism.io/t/operating-manual-of-the-optimism-collective-v0-2-0/3370/8)
- [Grant Proposal Template v2](https://gov.optimism.io/t/grant-proposal-template/3233/15)
- [Introducing Governance Committees](https://gov.optimism.io/t/introducing-governance-committees/3238/60)
- [Committee Formation Proposal Template](https://gov.optimism.io/t/phase-1-committee-formation-proposal-template/3281/9)


### Season #1
* [Voting cycle #4](https://gov.optimism.io/t/voting-cycle-4-roundup/3055)
* [Voting cycle #3](https://gov.optimism.io/t/voting-cycle-3-roundup/2923)
* [Voting cycle #2](https://gov.optimism.io/t/voting-cycle-2-roundup/2754)
* [Voting cycle #1](https://gov.optimism.io/t/voting-cycle-1-roundup/2619)

"
ethereum-optimism/community-hub,token-house.md,governance/token-house.md,"---
title: Governing Documents
lang: en-US
---

[The Working Constitution](https://gov.optimism.io/t/working-constitution-of-the-optimism-collective/55) outlines governing provisions and principles for the Collective. 
It will remain in effect no more than four years from the date of its adoption. 
After that, authority over governance will be ceded to a permanent Bedrock Constitution that incorporates the lessons of the Collective‚Äôs prior governance experiments.

The Collective‚Äôs [Operating Manual](https://github.com/ethereum-optimism/OPerating-manual/blob/main/manual.md) describes current governance processes for the Token House. 
It will evolve, with the Collective, over time. 
The version linked here, from [The Optimism Foundation's github repository](https://github.com/ethereum-optimism/OPerating-manual), is the authoritative one.


"
ethereum-optimism/community-hub,what-is-the-optimism-foundation.md,governance/what-is-the-optimism-foundation.md,"---
title: What is the Optimism Foundation?
lang: en-US
---
The Optimism Foundation is a Cayman Islands foundation company.  It operates to support the establishment of the [Optimism Collective](../governance/), the development of the Optimism ecosystem, and the technology that powers it.    

The Foundation is one component in a large, evolving and ever-growing web of companies, groups, and individuals driving towards actualization of the [Optimistic Vision](https://www.optimism.io/vision). 

Consistent with the Collective‚Äôs Working Constitution, the Foundation strives to:

- Support the Collective with a formal legal entity.
- Steward the early evolution of Collective governance. 

## Supporting the Collective through a formal legal entity

As an established entity (a Cayman foundation company), the Optimism Foundation can enter into legally enforceable, binding commitments with third parties in the ‚Äúreal‚Äù world on a limited liability basis. For example, the Foundation is able to:

- Enter into contracts with third parties, such as service providers.
- Administer intellectual property rights. 
- Make required governmental reports and filings. 

This status enables the Foundation to sometimes act more quickly, predictably, or safely ‚Äì and enables the Foundation to leverage those advantages to support the Collective in its early developmental stages.  

## Stewarding the early evolution of Collective self-governance

Optimism governance is a commitment to experimentation. This iterative approach gives the Collective time to build a strong immune system, discover the processes that work best, and ultimately increase its chances of a successful journey.

In its stewardship role, the Optimism Foundation currently facilitates a number of administrative aspects of Collective governance. For instance, it:

- Monitors and moderates governance proposal processes.
- Implements approved governance proposals.
- Helps develop frameworks, such as the Working Constitution and the Operating Manual, to facilitate participation.

The Foundation also supports the Optimism protocol as an open source project,  by encouraging and enabling the community to build out  its technical architecture and commissioning technical research on scalability, security, and decentralization.

The Foundation will not provide these administrative services indefinitely; its ultimate aim is to coordinate contributors into creating the technical and governance foundations that allow the Foundation to decentralize its role over time.

## How does the Foundation work?

The Optimism Foundation is governed by a Board of Directors and a Supervisor.

The Board of Directors currently consists of:  Abbey Titcomb, Ben Jones, Brian Avello, Eva Beylin, and Jing. The Board‚Äôs role is to manage the business and affairs of the Foundation. 

The Supervisor is the Cayman Islands firm, DS Limited. Its role is to oversee the Foundation‚Äôs directors and ensure the observance of their legal obligations. 

The Foundation also employs officers, contractors and service providers to execute on its operational and administrative aims. 

## How is the Foundation held accountable?

As a Cayman Islands foundation company, the Foundation is legally accountable to its governing documentation, which sets up the Foundation to defer to the will of the Optimism Collective and its governance. 

Specifically, the Foundation is required to observe and implement the outcome of valid governance votes in a diligent and commercially reasonable manner. Its discretion in this regard is limited to proposals that are unsafe, insecure, inconsistent with purpose, incapable of being implemented in a legally compliant manner, or that would leave the Foundation unable to function.  

There are three governance proposal types specifically targeted towards ensuring that the Foundation and its personnel are accountable to the will of the Collective: 

- **Treasury appropriations** ‚Äì the amount of OP tokens available to the Foundation for disbursement is subject to an annual vote, beginning in 2023.  

- **Director removal** ‚Äì  the ability of governance to have a member of the Foundation‚Äôs Board of Directors removed from service. 

- **Rights protections** ‚Äì a blocking vote, which enables the Token House to veto any proposed change to the Foundation‚Äôs governing documents that would materially reduce the rights of OP token holders.   

More information on each of the above proposal types is contained in the [Operating Manual](https://github.com/ethereum-optimism/OPerating-manual). 

## What role does the Foundation play in the long term?

While the Collective‚Äôs Working Constitution is limited to a four year period, the Foundation intends to continually transition responsibilities to the broader governance community well before that milestone. 

The Foundation‚Äôs role will evolve during this transition period, consistently trending towards its ‚Äì and the Collective‚Äôs ‚Äì commitment to sustained decentralization. 

"
ethereum-optimism/community-hub,guides,guides,"
"
ethereum-optimism/community-hub,README.md,guides/README.md,"---
title: OP Mainnet Guides
lang: en-US
---

## Where should I start?

If you're brand new to OP Mainnet, we recommend checking out the [guide to deploying a basic contract](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/getting-started)
It'll get you familiar with the core steps required to get a contract deployed to the network.
Luckily, OP Mainnet is [EVM equivalent](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306), so it's 100% the same as deploying a contract to Ethereum.

If you're a bit more familiar with OP  and Ethereum, you can try walking through one of the various [tutorials](https://github.com/ethereum-optimism/optimism-tutorial) put together by the Optimism community.
They'll help you get a headstart when building your first Optimistic project.

If you need testnet ETH, you can use our [Superchain Faucet](https://app.optimism.io/faucet) or check out these other [network faucets](../useful-tools/faucets.md) options.

## Guides

These guides provide integration guidelines for specific topics.
They are intended as one stop shops, and should have all the relevant information you need for completing a specific type of integration, from network information and tutorials to tips and tricks.

We're aiming to maintain guides for many of the common interactions that developers might have with OP Mainnet.
For example, we have guides for adding OP Mainnet support to a [wallet](./wallet-dev.md) or a [CEX](./cex-dev.md).
We also have guides for getting your [token onto the standard bridge](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/standard-bridge-standard-token) or even [writing your own custom bridge](./bridge-dev.md).

Take a look at the list on the left for a complete list of the guides we've created so far.

### Want a specific guide added?

Are we missing an important use case?
We'd love to hear from you in a [GitHub issue](https://github.com/ethereum-optimism/community-hub/issues) or on [Discord](https://discord-gateway.optimism.io).

"
ethereum-optimism/community-hub,bridge-dev.md,guides/bridge-dev.md,"---
title: Adding a custom bridge to OP Mainnet
lang: en-US
---

# Adding a custom bridge to Mainnet

## Using the Standard bridge

::: tip
Consider using the [Standard bridge](../developers/bridge/standard-bridge/) first before deciding to develop a custom bridge solution.

In the standard bridge when ERC20 is deposited on L1 and transferred to the bridge contract, it remains ""locked"" there while the equivalent amount is minted in the L2 token. For withdrawals the opposite happens, the L2 token amount is burned then the same amount of L1 tokens is transferred to the recipient.
This implementation satisfies a wide range of requirements.
:::

## Building a custom bridge
When the OP Mainnet Standard bridge does not satisfy your requirements for bridging assets or data you can deploy your custom bridge solution utilizing the same cross-domain infrastructure as the Standard bridge. For details on how cross-domain messaging works, see [Bridging basics](../developers/bridge/basics/) article and also the [tutorial on depositing and withdrawing between L1 and L2](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-erc20).

Some of the reasons why the standard bridge might not work for you is for example when you cannot limit the L2 token `mint` and `burn` functions to the bridge alone (something we require for security). Also certain custom bridges implement their own logic for managing the token supply which requires custom logic. Another case might be when you are bridging non-ERC20 tokens for example NFTs. Yet another case is when you are pooling deposits for cheaper transfers to L2.

Note that when you are building a custom bridge for ERC20 tokens and planning to add these to the [Superchain token list](../developers/bridge/standard-bridge/#the-superchain-token-list), we have specific requirements for the bridge contracts. These have to implement the `IL1ERC20Bridge` interface in the L1 bridge contract and `IL2ERC20Bridge` interface in the L2 bridge contract. This ensures the [OP Mainnet Bridge UI](https://app.optimism.io/bridge/deposit) can support token deposits and withdrawals via this custom bridge.

To add your bridge and token to the token list, you must make a pull request against the [Superchain token list repository](https://github.com/ethereum-optimism/ethereum-optimism.github.io#adding-a-token-to-the-list). 
Due to the complexity of reviewing a custom bridge, you will need to deploy to OP Goerli first, before going to production.

"
ethereum-optimism/community-hub,cex-dev.md,guides/cex-dev.md,"---
title: Adding OP Mainnet to your centralized exchange
lang: en-US
---

## Connecting to OP Mainnet

You connect to OP Mainnet the same way you do to Ethereum, by connecting to a JSON RPC endpoint.

### Endpoints

[Click here for the OP Mainnet endpoints](../useful-tools/networks.md). You can choose between our public endpoints, which are rate limited, and [endpoints from infrastructure providers](../useful-tools/networks.md). Given rate throughput limits, we recommend using a private rpc provider for both mainnet and testnet use cases. 

### ETH balance

ETH is used precisely the way it is used in L1 Ethereum.

### Token addresses

The ERC-20 contract address for a token on OP Mainnet may be different from the address for the same token on Ethereum. [The list of tokens and their addresses is here](https://static.optimism.io/optimism.tokenlist.json).

For example, looking at the **SNX** token, we get these addresses:

| ChainID | Network | Address |
| -: | - | - |
| 1  | Ethereum    | 0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f |
| 10 | OP Mainnet    | 0x8700daec35af8ff88c16bdf0418774cb3d7599b4
| 5 | Goerli (test network) | 0x51f44ca59b867E005e48FA573Cb8df83FC7f7597
| 420 | OP Goerli (test network) | 0x2E5ED97596a8368EB9E44B1f3F25B2E813845303

To get the total SNX balance of a user that uses OP Mainnet you need to:

1. Connect to a standard Ethereum endpoint and send a `balanceOf` query to address `0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f`.
1. Connect to an OP Mainnet endpoint and send a `balanceOf` query to address `0x8700daec35af8ff88c16bdf0418774cb3d7599b4`.


## Deposits and withdrawals within OP Mainnet

The ERC-20 contracts on OP Mainnet function the same way they do on Ethereum, so you can use your existing code for withdrawals and deposits. Just connect to an OP Mainnet endpoint.


### Transaction fees

Most of the cost of an OP Mainnet transaction is not the gas consumed by the transaction itself (which is rarely above 0.001 gwei per gas), but the cost of writing the transaction in Ethereum. That cost is deducted automatically from the user's balance on OP Mainnet. If you charge your users the cost of withdrawals, you have to account for it.

[You can read more about this subject here](../developers/build/transaction-fees.md).
The relevant code is [here](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas).


## Deposits and withdrawals across chains

As a centralized exchange, there will be times that withdrawals of ETH or an ERC-20 token on either OP Mainnet or Ethereum exceed deposits and you need to transfer assets. 
To do that you use a bridge or a gateway. 
We have a [standard gateway](https://app.optimism.io/bridge) that receives assets on L1 (Ethereum mainnet), and mints the equivalent asset on OP Mainnet. 
When a user wants to withdraw the assets back to L1, the bridge burns the asset on L2 and releases it to the user on L1. If you want to use this gateway automatically, [follow this tutorial for ETH](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-eth) or [this one for ERC-20 tokens](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-erc20).

Note that while L1 to L2 transactions typically take minutes, L2 to L1 transaction on the gateway require [a seven day challenge period](https://help.optimism.io/hc/en-us/articles/4411895558171-Why-do-I-need-to-wait-a-week-when-moving-assets-out-of-Optimism-).

Alternatively, you can use a [third party bridge](https://www.optimism.io/apps/bridges). These bridges usually rely on liquidity pools to allow for faster withdrawals and support multiple L2 chains. However, their token selection might be more limited and they may not be as decentralized as our gateway.

When an ERC-20 token does not have an OP Mainnet equivalent you can create one. 
If there is no need for custom business logic, you can [follow the steps in this tutorial](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/standard-bridge-standard-token).
If you need to implement some kind of custom logic, [see this tutorial](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/standard-bridge-custom-token).


## Audit reports

For a full list of audit reports visit [GitHub](https://github.com/ethereum-optimism/optimism/tree/develop/technical-documents/security-reviews). 

"
ethereum-optimism/community-hub,nft.md,guides/nft.md,"---
title: Creating an OP Mainnet NFT
lang: en-US
---

An NFT ecosystem consists of creators (supply), marketplaces, and buyers/traders (demand) built on top of infrastructures that enable algorithmic generation of art, deployment of smart contracts and access to NFT market intelligence.

[Click here for statistics about NFTs on OP Mainnet](https://dune.com/oplabspbc/optimism-nft-secondary-marketplaces)

## The OP Mainnet NFT ecosystem

![The OP Mainnet NFT ecosystem](../../assets/docs/guides/nft/OP-NFT-Ecosystem.jpg)

These tools are available on OP Mainnet:

### Creator tools

- [NiftyKit](https://niftykit.com/)
- [nft-inator](https://nft-inator.com/)
- [Zero Code NFT](https://www.zerocodenft.com/)
- [Unlock](https://unlock-protocol.com/) (time-bound NFTs for membership)
- [ThirdWeb](https://thirdweb.com/)

<details>
<summary>
Feature comparison
</summary>

::: tip This comparison may be out of date

It is accurate, as far as we know, when written (early January 2023), but new features are implemented all the time.

:::

|                   | NiftyKit | NFT-Inator | Mintplex | Zero Code NFT | ThirdWeb |
| ----------------- | --- | --- | --- | --- | --- |
| Multi-chain       | 3 | 5 | 6 | 11 | 7 (Flow coming soon) |
| Generator         | ‚ùå | ‚úÖ | ‚ùå | ‚ùå | ‚ùå |
| ERC-20   support  | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ |
| ERC-721A support  | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
| ERC-1155 support  | ‚ùå | ‚ùå | ‚úÖ | ‚ùå | ‚úÖ |
| DAO support       | ‚ùå | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ |
| No Code deployment| ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå |
| Pricing / Fee     | [Flat membership fee plus 2.5%-10% of the sales](https://app.niftykit.com/buy/passes) | 2% commission on primary sales | Paywall for premium features | Test for free, $499 for OpenSea setup | Currently zero |
| Image Hosting | [NFT storage](https://nft.storage/) / [Pinata](https://www.pinata.cloud/) | [NFT storage](https://nft.storage/) / [Pinata](https://www.pinata.cloud/) | Up to creators. Recommend [Pinata](https://www.pinata.cloud/) | [IPFS](https://ipfs.tech/) | [IPFS](https://ipfs.tech/). [Arweave](https://www.arweave.org/) and [Filecoin](https://filecoin.io/) coming soon |

</details>

### NFT data APIs

- [Alchemy](https://docs.alchemy.com/reference/nft-api-quickstart)
- [SimpleHash](https://simplehash.com/)
- [QuickNode](https://www.quicknode.com/nft-api)
- [Reservoir](https://docs.reservoir.tools/reference/optimism)
- [NFTScan](https://docs.nftscan.com/reference/evm/get-nfts-by-account)

### Marketplaces

- [Quix](https://qx.app/)
- [OpenSea](https://opensea.io/rankings?chain=optimism)
- [Tofu](https://tofunft.com/optimism)
- [OptiMarket](https://optimarket.io/)
- [Circular Art](https://www.circularart.xyz/)

### Marketplace aggregators

- [Bluesweep](https://www.bluesweep.xyz/)

### NFT liquidity 

- [Backed](https://www.withbacked.xyz/network/optimism) lets you use NFTs as collateral



"
ethereum-optimism/community-hub,testing.md,guides/testing.md,"---
title: Testing on Optimistic Test Networks
lang: en-US
---

You can find the chainid and supporting information for OP Goerli, our test network, [using these endpoints](../useful-tools/networks.md).
To obtain ETH and tokens (both ERC-20 and NFT) from faucets, [see here](../useful-tools/faucets.md).

This page shows some additional testing utilities that you might find useful.


## ERC-20 tokens

We have several ERC-20 testing token contracts.
This token is an implementation of ERC-20, with the addition of `faucet`, a function that mints for the caller 1000 tokens to facilitate testing.

Additionally, both OP Mainnet and OP Goerli have [WETH at address `0x4200000000000000000000000000000000000006`](https://help.optimism.io/hc/en-us/articles/4417948883611-What-is-ETH-WETH-How-do-they-interact-).

### Goerli ERC-20 testing contracts

| Address | Symbol | Decimals | 
| - | - | -: | 
| [`0x32307adfFE088e383AFAa721b06436aDaBA47DBE`](https://goerli-explorer.optimism.io/address/0x32307adfFE088e383AFAa721b06436aDaBA47DBE) | OUT-1 | 18 |
| [`0xb378ed8647d67b5db6fd41817fd7a0949627d87a`](https://goerli-explorer.optimism.io/address/0xb378eD8647D67b5dB6fD41817fd7a0949627D87a/) | OUT-2 | 18 |
| [`0x4e6597062c7dc988fbcfe77293d833bad770c19b`](https://goerli-explorer.optimism.io/address/0x4E6597062c7DC988FBcFE77293D833bAD770C19b) | OUT-3 | 18 |



## The bridge

The `OUTb` token is supported by the bridge on Goerli.
See [this tutorial](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-erc20) to see how to use it.

## ERC-721 tokens

We have an ERC-721 token on OP Goerli at address [`0x38abA480f2bA7A17bC01EE5E1AD64fCedd93EfE7`](https://goerli-explorer.optimism.io/address/0x38abA480f2bA7A17bC01EE5E1AD64fCedd93EfE7).
It is the OpenZeppelin ERC-721 token contract with the addition of `faucet`.
Just call the `faucet` function to get as many NFT tokens as you need.

"
ethereum-optimism/community-hub,wallet-dev.md,guides/wallet-dev.md,"---
title: Supporting OP Mainnet in your wallet
lang: en-US
---

## Overview

This guide is intended for wallet developers who want to give their users the ability to send transactions on OP Mainnet (most other OP Stack chains behave similarly).
OP Mainnet generally behaves like any other EVM-based chain with the exception of minor discrepancies related to [transaction fees](#transaction-fees).
These fee discrepancies are an inherent result of the fact that OP Mainnet is a Layer 2 blockchain network that must publish transaction data to Ethereum.

## Connecting to OP Mainnet

OP Mainnet shares the [Ethereum JSON-RPC API](https://eth.wiki/json-rpc/API) with only [a few minor differences](../developers/build/json-rpc.md).
You'll find all of the important information about OP Mainnet, as well as any test networks, on [our Networks page](../useful-tools/networks.md).
You can choose to connect to OP Mainnet via our rate-limited public endpoints, [private endpoints from infrastructure providers](../useful-tools/networks.md), or [by running your own node](../developers/build/run-a-node/).
Because of throughput limits, we recommend using private node [providers](../useful-tools/providers.md) or running your own node for production applications.

## Canonical token addresses

The ERC-20 contract address for a token on OP Mainnet may be different from the address for the same token on Ethereum.
Optimism maintains [a token list](https://static.optimism.io/optimism.tokenlist.json) that includes known addresses for many popular tokens.
You can see the same list with a nicer user interface [here](https://tokenlists.org/token-list?url=https://static.optimism.io/optimism.tokenlist.json).

For example, looking at the **SNX** token, the [Superchain token list](https://static.optimism.io/optimism.tokenlist.json) returns the following addresses:

| ChainID | Network | Address |
| -: | - | - |
| 1  | Ethereum    | 0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f |
| 10 | OP Mainnet    | 0x8700daec35af8ff88c16bdf0418774cb3d7599b4
| 5 | Goerli (test network) | 0x51f44ca59b867E005e48FA573Cb8df83FC7f7597
| 420 | OP Goerli (test network) | 0x2E5ED97596a8368EB9E44B1f3F25B2E813845303



## Transaction status

A transaction in OP Mainnet can be in one of two states:

1. **Sequencer Confirmed**: The transaction has been accepted by the sequencer on OP Mainnet (L2)
2. **Confirmed Onchain**: The transaction has been written to Ethereum (L1)

We're still working on the tooling to easily detect when a given transaction has been published to Ethereum.
For the moment, we recommend wallets consider transactions final after they are ""Sequencer Confirmed"".
Transactions are considered ""Sequencer Confirmed"" as soon as their transaction receipt shows at least one confirmation.



## Transaction fees

In OP Mainnet transaction fees include both an [L1 data fee](../developers/build/transaction-fees.md#estimating-the-l1-data-fee) and an [L2 execution fee](../developers/build/transaction-fees.md#the-l2-execution-fee). 
To display the entire estimated cost of a transaction to your users we recommend you [use the SDK](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas).
We **highly recommend** displaying fees on OP Mainnet (and any other OP Stack chain that uses the same mechanism) as one unified fee to minimize user confusion.


In Bedrock we support [EIP 1559](https://eips.ethereum.org/EIPS/eip-1559).
Therefore, the L2 execution fee is composed of two components: a fixed (per-block) base fee and a user selected priority fee.


### Base fee

[The EIP 1559 parameters](../developers/bedrock/differences.md#eip-1559) have different values in OP Mainnet (and many other OP Stack chains) than those on L1 Ethereum.
As a result, in every block the base fee can be between 98% and 110% of the previous value. 
As blocks are produced every two seconds, the base fee can be between 54% and 1,745% of the value a minute earlier.
If it takes the user fourteen seconds to approve the transaction in the wallet, the base fee can almost double in that time.

The base fee specified in the transaction is not necessarily the base fee that the user will pay, *it is merely an upper limit to that amount*.
In most cases, it makes sense to specify a much higher base fee than the current value, to ensure acceptance. 

For example, as I'm writing this, ETH is about $2000, and a cent is about 5000 gwei. 
Assuming 20% of a cent is an acceptable base fee for a transaction, and that the transaction is a big 5,000,000 gas one (at the target block size), this gives us a base fee of 200,000 wei. 
That would be the value to put in the transaction, even though the L2 base fee (as I'm writing this) is 2,420 wei. 

::: info Up to date information

You can get the current L2 base fee [in the gas tracker dashboard](https://optimism.io/gas-tracker).

:::


### Priority fee

In contrast to the base fee, the priority fee in the transaction is the amount that the user pays, and therefore it makes sense to keep it as low as possible.
If you already have estimating code you use for L1 Ethereum, you can just use that.

Note that on OP Mainnet the priority fee tends to be very low. 
As I am writing this, a priority fee of 500 wei is sufficient ([see here](https://optimism.io/gas-tracker) to get the current values).



### Sending ""max"" ETH

Many wallets allow users to send the maximum amount of ETH available in the user's balance.
Of course, this requires that the predicted fee for the send transaction be deducted from the ETH balance being sent.
You **MUST** deduct both the L2 execution fee and the L1 data fee or the charged fee plus the balance sent will exceed the user's balance and the transaction will fail.

### Displaying the gas prices

If you want to display the current gas prices, you can use [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice).

"
ethereum-optimism/community-hub,identity,identity,"
"
ethereum-optimism/community-hub,README.md,identity/README.md,"---
title: Identity Overview
lang: en-US
---

## Introduction

Identity is a fundamental aspect of human experience that encompasses the relationships, interests, and values that define individuals and groups. 
However, the current online identity landscape is fragmented, non-interoperable, and controlled by centralized gatekeepers.

Decentralized identity solutions empower individuals to customize their identity according to their preferences, move it seamlessly across services, and regain control of their personal information from centralized platforms. 
These solutions are designed to enable users to prove specific attributes about themselves in a trustworthy and verifiable way, without compromising their privacy or security.

The Optimism Collective is [building a better economic engine that fuels positive-sum games](https://www.optimism.io/vision) and decentralized identity is central to that mission. 
For example, the two-house governance system of the Optimism Collective is composed of token holders and community members who participate in a one-person-one-vote system based on reputation and community contributions. 

In addition to democratic governance, decentralized identity expands the design space for innovation and gives individuals greater control over their finances, and enables them to participate in the global economy on their own terms.

## Building a decentralized identity ecosystem, together

Building decentralized identity on the Superchain involves using proof of personhood and reputation data from various sources, eliminating the need for a single entity to own user data and identity.

Through this process, anyone can use algorithms like [EigenTrust](https://en.wikipedia.org/wiki/EigenTrust) to derive identity sets based on a purely subjective web of trust. This allows for the establishment of a more trustworthy and reliable means of verifying an individual's identity in a decentralized environment.

This open-source primitive can be applied across the Superchain for a variety of Sybil-resistant applications, including democratic voting and onchain credit scoring for under-collateralized loans. By leveraging attestations in this way, developers can create more secure, transparent, and democratic systems that allow for greater participation and access for everyone.

Decentralized identity is an essential components of a more democratic, secure, and accessible web. By working together, we can establish a more diverse and trustworthy network of identities that benefits everyone, and enables new opportunities for innovation in the decentralized identity space. 

The AttestationStation serves as a key component in achieving this vision. It functions as a multiplayer database and its underlying network of attestations lays the foundation for constructing decentralized identity systems that can effectively scale and adapt to the evolving needs of users and developers.

[Next >](./build.md)

"
ethereum-optimism/community-hub,app.md,identity/app.md,"---
title: Applications 
lang: en-US
---

These are some of the applications that use the AttestationStation:

## AttestationStation v1

- [EAS Scan](https://optimism.easscan.org/). This no-code interface lets you build schemas, query, and submit attestations.
- [Citizen Attestations](https://citizen-attestations.xyz). An attestation explorer for Optimism focusing on attestations that are relevant for the OP Citizens eligibility process.
- [Attest Fest](https://attest-fest.party). Create multiple EAS attestations using the power of CSV and Safe multisig wallets. It's an attest fest, yaay!

## AttestationStation v0

- [AttestationStation Interface by sbvegan](https://attestationstation.xyz/). 
  This interface lets you query and submit attestations.
- [Optimist Score by Flipside](https://science.flipsidecrypto.xyz/optimist/).
- [Optimism Attestor](https://provenance.clique.social/attestor/opattestor) and [ZK Discord Attestations](https://clique.social/attestor/opattestor_discordroles) by Clique. 
  Bring web2 user behavior and identity data onchain, while bridging the gap between value-creating activities in web2 and incentive distribution layers in web3.
- [Credit Risk Score by RociFi](https://v2.roci.fi/app/analytics?address=0x00227dd82fae1220bdac630297753bb2cb4e8ddd). 
  Mint NFCS (Non-Fungible Credit Score); DeFi Credit Scoring; Borrow Under-Collateralized DeFi Loans with 70-85% of Collateral; Lend up to 15% APR.
- [Data Provider by Sismo](https://factory.sismo.io/). 
  Create a Sismo Connect app or Badge for your users.
- [Otterspace Score](https://docs.otterspace.xyz/otterspace-attestation-score). 
  Otterspace‚Äôs non-transferable badge protocol helps dApp builders & communities create better incentive systems, non-financial rewards and automate permissions


"
ethereum-optimism/community-hub,atst-v0.md,identity/atst-v0.md,"---
title: AttestationStation v0 
lang: en-US
---

::: warning Deprecated

This contract is not actively being supported, we recommend using [AttestationStation v1](./atst-v1.md).

:::

These attestations have these attributes:

- **Creator**, the address that wrote the attestation.
- **Key**, a 32 byte value that identifies the attestation. 
  This value can be a short ASCII string, it can be the hash value of a longer (>32 characters) string, or it can be anything else. 
  It is possible for different creators to use the same key for different purposes.
- **Value**, a string of bytes that can be interpreted as ASCII, a number, etc.

The interpretation of the attestation is up to the creator, and is not necessarily stored onchain.

[Here is the tutorial](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/ecosystem/attestation-station/contract-access)


## Searches

To look for an attestation you have to know the creator, the address it is about, and the key. 
If you want to search for information (for example, ‚Äúall attestations about address X‚Äù or ‚Äúall attestations created by address Y for key Z‚Äù), you need to search offchain.

To optimize for performance, there are several APIs that you can use to search attestations:

- [API endpoints by nxyz](https://docs.n.xyz/reference/attestation-station)
- [GraphQL Indexer by Mason Hall](https://attestation-indexer-production.up.railway.app/graphql)
- [ShroomSDK by Flipside](https://github.com/MSilb7/op_attestationstation_data)
- [Subgraph by wslyvh](https://thegraph.com/hosted-service/subgraph/wslyvh/optimism-atst)

Alternatively, you can look at `AttestationCreated` events on the blockchain. 
This way there is no centralized authority to trust.

- [Read contract events directly](https://github.com/ethereum-optimism/optimism-tutorial/blob/main/ecosystem/attestation-station/contract-access/README.md#read-all-relevant-attestations)
- [Use the SDK](https://github.com/ethereum-optimism/optimism/blob/develop/packages/atst/docs/sdk.md#getevents)



## Smart contracts / technical specifications

The legacy AttestationStation contract is located [in the Optimism monorepo](https://github.com/ethereum-optimism/optimism/blob/e33d000561af65dbf438f5b8acfcc50c729a775e/packages/contracts-periphery/contracts/universal/op-nft/AttestationStation.sol). It is deployed at address `0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77`, both on [Optimism Mainnet](https://explorer.optimism.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77) and [Optimism Goerli](https://goerli-optimism.etherscan.io/address/0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77). The following is the breakdown of this smart contract.


### State

#### attestations

The following is the nested mapping that stores all the attestations made.

```solidity
mapping(address => mapping(address => mapping(bytes32 => bytes))) public attestations;
```


#### AttestationData 

The following is a struct that represents a properly formatted attestation.

```solidity
struct AttestationData {
    address about;
    bytes32 key;
    bytes val;
}
```

### Event: AttestationCreated

This event is emitted when an attestation is successfully made.

```solidity
event AttestationCreated(
    address indexed creator,
    address indexed about,
    bytes32 indexed key,
    bytes val
);
```

### Functions

#### `attest(address _about, bytes32 _key, bytes memory _val)`

Records attestations to the AttestationStation's state and emits an `AttestationCreated` event with the address of the message sender, address the attestation is about, the bytes32 key, and bytes value.

```solidity
function attest(address _about, bytes32 _key, bytes memory _val) public
```

Allows anyone to create an attestation.

| Name     | Type | Description |
| -------- | --- | --- |
| `_about` | `address` | Address that the attestation is about. |
| `_key`   | `bytes32` | A key used to namespace the attestation. |
| `_val`   | `bytes` | An arbitrary value stored as part of the attestation. |


#### `attest(AttestationData[] memory _attestations)`

```solidity
function attest(AttestationData[] memory _attestations) public
```

Allows anyone to create attestations.

Parameters:

| Name | Type | Description |
| --- | --- | --- |
| `_attestations` | `AttestationData[]` | An array of attestation data. |


## Attestation hacks

- [Separating creator, signer, and transaction payer](https://github.com/ethereum-optimism/optimism-tutorial/blob/main/ecosystem/attestation-station/contract-access/README.md#separating-creator-signer-and-transaction-payer)

"
ethereum-optimism/community-hub,atst-v1.md,identity/atst-v1.md,"---
title: AttestationStation v1 
lang: en-US
---

The AttestationStation v1 uses [the Ethereum Attestation service standard](https://docs.attest.sh/docs/welcome) deployed on these addresses:

| Network         | Attestation Contract | Schema Registry Contract |
| --------------- | - | - |
| OP Goerli | [0x4200000000000000000000000000000000000021](https://goerli-optimism.etherscan.io/address/0x4200000000000000000000000000000000000021) | [0x4200000000000000000000000000000000000020](https://goerli-optimism.etherscan.io/address/0x4200000000000000000000000000000000000020)
| OP Mainnet | [0x4200000000000000000000000000000000000021](https://optimistic.etherscan.io/address/0x4200000000000000000000000000000000000021) | [0x4200000000000000000000000000000000000020](https://optimistic.etherscan.io/address/0x4200000000000000000000000000000000000020) |

You can read and write attestations in several ways:

- [EAS scan user interface (OP Mainnet)](https://optimism.easscan.org/)
- [EAS scan user interface (OP Goerli)](https://optimism-goerli-bedrock.easscan.org/)
- [JavaScript SDK](https://docs.attest.sh/docs/getting--started/javascript)
- [Access directly onchain](https://github.com/ethereum-attestation-service/eas-contracts/blob/master/contracts/EAS.sol) (if you need to attest from a smart contract)

Indexing is available via: 
- [GraphQL endpoint (OP Mainnet)](https://optimism.easscan.org/graphql)
- [GraphQL endpoint (OP Goerli)](https://optimism-goerli-bedrock.easscan.org/graphql)
- [Ponder graph]( https://github.com/ethereum-attestation-service/eas-ponder-graph)
- [Open source indexer]( https://github.com/ethereum-attestation-service/eas-indexing-service)

"
ethereum-optimism/community-hub,build.md,identity/build.md,"---
title: Building Decentralized Identity Apps with Attestations 
lang: en-US
---

## About attestations

Attestations are signed statements about a person, entity, or thing, made by an individual, company, or organization and are one of the building blocks of decentralized identity.

Our journey towards decentralized identity begins with the AttestationStation, an attestation smart contract using the [Ethereum Attestation Service standard](https://optimism.easscan.org/) for creating, verifying, and revoking on/off-chain attestations. You can think of the AttestationStation as a multiplayer database for streamlining the attestation process and enabling a robust web of trust on any OP Chain in the Superchain.

![Logo](../../assets/docs/identity/atst-logo.png)


## Benefits of using the AttestationStation

The AttestationStation makes it easy to sign any piece of data. In addition, here are a few key benefits:

- **Permissionless**: The AttestationStation is a public contract, which means that it is not owned or controlled by any one person or organization. 
  Anyone can use the contract to verify and attest anything.
- **Tooling:** Indexing, various access-management integrations, and more are already available for the AttestationStation.


## Ideas

Are you inspired and don‚Äôt know what to build? 
We have a [project idea list](https://optimism.io/ideas). 
Do you have a good idea, but you know you‚Äôre not the right person to build it? Please open a PR on that list and suggest it.



## Privacy


::: danger <nbsp />


Attestations create log entries that become part of the permanent record of the blockchain. 
Here are some best practices to avoid violating users‚Äô privacy:

- Obtain explicit consent from users for personal information. 
  Clearly inform them what data is being collected, why it is being collected, and how it will be used.
- Sensitive data should not be stored onchain, in any way. 
  If you need a smart contract to verify it in the future, you can use the hash of the sensitive data rather than the data itself.
- Even when storing sensitive data offchain, you need to ensure it is stored securely using encryption, proper authentication and authorization, etc.

:::

## Common questions

**Q: Are attestations replacements for verifiable credentials?**

**A:** Attestations should not be viewed as a replacement for verifiable credentials or decentralized identifiers. Rather developers can use attestations to create [decentralized identifiers](https://www.w3.org/TR/did-core/), credentials, claims, and more.

**Q: Are attestations replacements for proof of personhood?**

**A:** Attestations and the associated web of trust are complementary with proof of personhood like [WorldID](https://worldcoin.org/blog/announcements/worldcoin-commits-optimism-superchain-vision-ahead-mainnet-launch) and similar solutions. Without proof of personhood, agents could sybil-attack the web of trust to build their reputation. On the other hand web of trust extends proof of personhood to confer more information about the person you're interacting with which is critical in governance and other use-cases that require knowledge of the person's reputation.   

**Q: Why attestations instead of soulbound / non-transferable tokens?**

**A:** Attestations have two key benefits over soulbound / non-transferable tokens: flexibility of whether the attestations is onchain or offchain and composability. While there is a canonical [decentralized schema registry for attestations](https://optimism-goerli-bedrock.easscan.org/schemas), there is no central registry or specification for soulbound / non-transferable tokens which can lead to poor interoperability between systems and protocols.

"
ethereum-optimism/community-hub,glossary.md,identity/glossary.md,"---
title: Glossary 
lang: en-US
---

- **Attestation**: Attestations are statements or evidence of information made by anyone about anything.

- **Attestation recipient:** The entity or individual that receives the attestation from the attester. 
  In decentralized identity, the attestation recipient can be a service provider, website, or any other entity that requires verification of a person's identity or personal information.

- **Attestation issuer:** The entity or individual that performs the attestation process and issues the attestation. 
  In decentralized identity, the attestation issuer can be a government agency, financial institution, or any other trusted entity that is authorized to verify a person's identity or personal information.  
  
- **Attestation verifier:** The entity or individual that verifies the attestation and ensures that it is valid and accurate. 
  In decentralized identity, the attestation verifier can be a service provider, website, or any other entity that requires verification of a person's identity or personal information.

- **AttestationStation (ATST):** AttestationStation is a decentralized, permissionless database for for creating, verifying, and revoking on/off-chain attestations on the Superchain. 
The AttestationStation uses [the EAS Standard](https://attest.sh/).

- **Decentralized identity:** A system that enables individuals to have greater control and ownership over their personal data and identity. 
  In decentralized identity, personal information is stored on a blockchain or other decentralized system, and individuals have the ability to grant or revoke access to their data as they see fit. 
  This allows for greater privacy, security, and control over personal information.
  
- **Ethereum Attestation Service (EAS):** An Ethereum infrastructure public good for making attestations on or off-chain about anything. EAS is the core infrastructure used to power the AttestationStation.   
  
- **Sybil-resistance:** Sybil resistance is a defense mechanism that prevents someone from creating multiple fake identities in a decentralized identity system.

- **Web of trust:** A web of trust is a decentralized model used to establish trust among participants in a network. It relies on the concept of participants vouching for the authenticity or trustworthiness of other participants. In a web of trust, trust is built through the accumulation of attestations from trusted individuals.

"
ethereum-optimism/community-hub,intro.md,identity/intro.md,"---
title: Identity Overview
lang: en-US
---

## Introduction

Identity is a fundamental aspect of human experience that encompasses the relationships, interests, and values that define individuals and groups. 
However, the current online identity landscape is fragmented, non-interoperable, and controlled by centralized gatekeepers.

Decentralized identity solutions empower individuals to customize their identity according to their preferences, move it seamlessly across services, and regain control of their personal information from centralized platforms. 
These solutions are designed to enable users to prove specific attributes about themselves in a trustworthy and verifiable way, without compromising their privacy or security.

The Optimism Collective is [building a better economic engine that fuels positive-sum games](https://www.optimism.io/vision) and decentralized identity is central to that mission. 
For example, the two-house governance system of the Optimism Collective is composed of token holders and community members who participate in a one-person-one-vote system based on reputation and community contributions. 

In addition to democratic governance, decentralized identity expands the design space for innovation and gives individuals greater control over their finances, and enables them to participate in the global economy on their own terms.

## Building a decentralized identity ecosystem, together

Building decentralized identity on the Superchain involves using proof of personhood and reputation data from various sources, eliminating the need for a single entity to own user data and identity.

Through this process, anyone can use algorithms like [EigenTrust](https://en.wikipedia.org/wiki/EigenTrust) to derive identity sets based on a purely subjective web of trust. This allows for the establishment of a more trustworthy and reliable means of verifying an individual's identity in a decentralized environment.

This open-source primitive can be applied across the Superchain for a variety of Sybil-resistant applications, including democratic voting and onchain credit scoring for under-collateralized loans. By leveraging attestations in this way, developers can create more secure, transparent, and democratic systems that allow for greater participation and access for everyone.

Decentralized identity is an essential components of a more democratic, secure, and accessible web. By working together, we can establish a more diverse and trustworthy network of identities that benefits everyone, and enables new opportunities for innovation in the decentralized identity space. 

The AttestationStation serves as a key component in achieving this vision. It functions as a multiplayer database and its underlying network of attestations lays the foundation for constructing decentralized identity systems that can effectively scale and adapt to the evolving needs of users and developers.

[Next >](./build.md)

"
ethereum-optimism/community-hub,profile.md,identity/profile.md,"---
title: Optimist Profile
lang: en-US
---
The Optimist Profile allows contributors to share the contributions and impact they've made to the Optimism Collective.

Anyone can create an Optimist Profile and anyone is able to use the Optimist Profile in onchain identity use cases.

## Overview
The Optimist Profile is built using the variety of onchain reputation data on OP Mainnet and has the following elements:

- **Profile Schema:** An onchain self-attestation using the profile schema that represents an individual or organization.
- **Contributions:** Each Optimist Profile can create onchain attestations about their contributions to the Optimism Collective. Optimist Profiles can also be used to create onchan peer-to-peer (p2p) attestations about the contributions of other contributors. Peer to peer attestations help the Optimism Collective create a contribution web of trust.

## Technical details
The Optimist Profile is built on attestations using the [Ethereum Attestation Service](./atst-v1.md). 

![Logo](../../assets/docs/identity/profile.png)

- **[Profile schema UID](https://optimism.easscan.org/schema/view/0xac4c92fc5c7babed88f78a917cdbcdc1c496a8f4ab2d5b2ec29402736b2cf929):**  `‚Äã‚Äã0xac4c92fc5c7babed88f78a917cdbcdc1c496a8f4ab2d5b2ec29402736b2cf929`
    - name: name of the profile
    - profileMetadataPtrType: used to determine the protocol
    - profileMetadataPtr: can be a URI, ipfs hash, etc. that points to any type of blob storage that stores the metadata of type shown below

- **[RetroPGF 3 Application schema UID](https://optimism.easscan.org/schema/view/0x76e98cce95f3ba992c2ee25cef25f756495147608a3da3aa2e5ca43109fe77cc):** `0x76e98cce95f3ba992c2ee25cef25f756495147608a3da3aa2e5ca43109fe77cc`
    - displayName: name of the application
    - applicationMetadataPtrType: used to determine the protocol 
    - applicationMetadataPtr: can be a URI, ipfs hash, etc. that points to any type of blob storage that stores the metadata of type shown below

## Common questions

**Q: How do I get the addresses for RetroPGF badgeholders?**

**A:** Use the EAS SDK `getAttestation` function to retrieve the onchain attestation where Schema UID: `0xfdcfdad2dbe7489e0ce56b260348b7f14e8365a8a325aef9834818c00d46b31b`.
Remember to verify the attester address is `0x621477dBA416E12df7FF0d48E14c4D20DC85D7D9`. 

**Q: How do I get the addresses for Optimist Profiles?**

**A:** Use the EAS SDK `getAttestation` function to retrieve the onchain attestation where Schema UID: `0xac4c92fc5c7babed88f78a917cdbcdc1c496a8f4ab2d5b2ec29402736b2cf929`.

**Q: Why do I see multiple applications associated with a single Optimist Profile?**

**A:** This happens if the user has updated their `displayName`. To return the most accurate data, look at the most recent application attestation.

**A:** Use the EAS SDK `getAttestation` function to retrieve the onchain attestation where Schema UID: `0xac4c92fc5c7babed88f78a917cdbcdc1c496a8f4ab2d5b2ec29402736b2cf929`.

**Q: What other schemas are being used?**

**A:** Check the [schemas](./schemas.md) page for a list of other schemas being used.



"
ethereum-optimism/community-hub,schemas.md,identity/schemas.md,"---
title: Schemas
lang: en-US
---
Schemas define the structure and type of data that can be included in an attestation. 

Below you will find a list of relevant schemas that are being used on OP Mainnet. Schemas are built using the [Ethereum Attestation Service](./atst-v1.md). 

## General schemas
- **[Optimist Profile schema UID](https://optimism.easscan.org/schema/view/0xac4c92fc5c7babed88f78a917cdbcdc1c496a8f4ab2d5b2ec29402736b2cf929):**  `‚Äã‚Äã0xac4c92fc5c7babed88f78a917cdbcdc1c496a8f4ab2d5b2ec29402736b2cf929`
- **[Gitcoin Passport V1 scores schema UID](https://optimism.easscan.org/schema/view/0x6ab5d34260fca0cfcf0e76e96d439cace6aa7c3c019d7c4580ed52c6845e9c89):** `0x6ab5d34260fca0cfcf0e76e96d439cace6aa7c3c019d7c4580ed52c6845e9c89`

## Developer schemas
- **[Superchain Faucet schema UID](https://optimism.easscan.org/schema/view/0x98ef220cd2f94de79fbc343ef982bfa8f5b315dec6a08f413680ecb7085624d7):** `0x98ef220cd2f94de79fbc343ef982bfa8f5b315dec6a08f413680ecb7085624d7`

## Governance schemas
- [**Season 4 Co-grant participant schema UID**](https://optimism.easscan.org/schema/view/0x401a80196f3805c57b00482ae2b575a9f270562b6b6de7711af9837f08fa0faf):`0x401a80196f3805c57b00482ae2b575a9f270562b6b6de7711af9837f08fa0faf` Important: Remember to verify the attester address is `0x3C7820f2874b665AC7471f84f5cbd6E12871F4cC` or `0x2a0eB7cAE52B68e94FF6ab0bFcf0dF8EeEB624be`
- **[Governance contribution schema UID](https://optimism.easscan.org/schema/view/0xef874554718a2afc254b064e5ce9c58c9082fb9f770250499bf406fc112bd315)**:`0xef874554718a2afc254b064e5ce9c58c9082fb9f770250499bf406fc112bd315`. Important: Remember to verify the attester address is `0x621477dBA416E12df7FF0d48E14c4D20DC85D7D9`

## RetroPGF schemas
- **[RetroPGF Badgeholders schema UID](https://optimism.easscan.org/schema/view/0xfdcfdad2dbe7489e0ce56b260348b7f14e8365a8a325aef9834818c00d46b31b):**`0xfdcfdad2dbe7489e0ce56b260348b7f14e8365a8a325aef9834818c00d46b31b`. Important: Remember to verify the attester address is `0x621477dBA416E12df7FF0d48E14c4D20DC85D7D9`
- **[RetroPGF governance contributor schema UID](https://optimism.easscan.org/schema/view/0x3743be2afa818ee40304516c153427be55931f238d961af5d98653a93192cdb3):**`0x3743be2afa818ee40304516c153427be55931f238d961af5d98653a93192cdb3`. Important: Remember to verify the attester address is `0x621477dBA416E12df7FF0d48E14c4D20DC85D7D9`
- **[RetroPGF 3 Approved Application schema UID](https://optimism.easscan.org/schema/view/0xebbf697d5d3ca4b53579917ffc3597fb8d1a85b8c6ca10ec10039709903b9277):**`0xebbf697d5d3ca4b53579917ffc3597fb8d1a85b8c6ca10ec10039709903b9277`. Important: Remember to verify the attester address is `0x621477dBA416E12df7FF0d48E14c4D20DC85D7D9`
- **[RetroPGF 3 Application schema UID](https://optimism.easscan.org/schema/view/0x76e98cce95f3ba992c2ee25cef25f756495147608a3da3aa2e5ca43109fe77cc):** `0x76e98cce95f3ba992c2ee25cef25f756495147608a3da3aa2e5ca43109fe77cc`
- **[RetroPGF 3 Lists schema UID](https://optimism.easscan.org/schema/view/0x3e3e2172aebb902cf7aa6e1820809c5b469af139e7a4265442b1c22b97c6b2a5):** `0x3e3e2172aebb902cf7aa6e1820809c5b469af139e7a4265442b1c22b97c6b2a5`


"
ethereum-optimism/community-hub,main.py,main.py,"import csv
import sys
import os

def process_all_txt(repo_name, all_txt_file):
    # Read the content of all.txt
    with open(all_txt_file, 'r') as file:
        lines = file.readlines()

    # Initialize variables
    data = []
    current_file = None
    current_content = []

    # Process each line
    for line in lines:
        if line.startswith('==>') and line.endswith('<==\n'):
            # New file detected
            if current_file is not None:
                # Save previous file's content
                data.append((repo_name, current_file, os.path.abspath(current_file), ''.join(current_content)))
            
            # Reset current content
            current_content = []
            # Extract the file path
            current_file = line[4:-4].strip()
        else:
            # Accumulate content lines
            current_content.append(line)

    # Don't forget to save the last file's content
    if current_file is not None:
        data.append((repo_name, current_file, os.path.abspath(current_file), ''.join(current_content)))

    # Write to CSV
    with open('output.csv', 'w', newline='') as csvfile:
        csvwriter = csv.writer(csvfile)
        csvwriter.writerow(['repo', 'filename', 'fullpath', 'content'])
        csvwriter.writerows(data)

if __name__ == ""__main__"":
    if len(sys.argv) != 3:
        print(""Usage: python script.py <repo_name> <all_txt_file>"")
        sys.exit(1)

    repo_name = sys.argv[1]
    all_txt_file = sys.argv[2]

    process_all_txt(repo_name, all_txt_file)


"
ethereum-optimism/community-hub,protocol,protocol,"
"
ethereum-optimism/community-hub,1-design-philosophy.md,protocol/1-design-philosophy.md,"---
title: Design Philosophy
lang: en-US
---

Optimism is built according to a strong design philosophy that stands on four main pillars: simplicity, pragmatism, sustainability, and, of course, optimism.
It's important to understand these pillars as they heavily influence the design of Optimism as a whole.

## Simplicity

Optimism is designed to be as simple as possible for the featureset it provides.
Ideally, Optimism should be composed of the minimum number of moving parts required for a secure, scalable, and flexible L2 system.
This simplicity gives Optimism's design a number of significant advantages over other more complex L2 constructions.

Simplicity reduces engineering overhead, which in turn means we can spend our time working on new features instead of re-creating existing ones.
Optimism prefers to use existing battle-tested Ethereum code and infrastructure where possible.
The most visible example of this philosophy in practice is the choice to use Geth as Optimism's client software.

When dealing with critical infrastructure, simplicity is also security.
Every line of code we write is an opportunity to introduce unintentional bugs.
A simple protocol means there's less code to write and, as a result, less surface area for potential mistakes.
A clean and minimal codebase is also more accessible to external contributors and auditors.
All of this serves to maximize the security and correctness of the Optimism protocol.

Simplicity is also important for the long-term vision of Optimism.
By limiting the amount of code that we write on top of Ethereum tooling, we're able to spend most of our time working directly with existing codebases.
Engineering effort that goes into Optimism can also directly benefit Ethereum, and vice versa.
This will only become more pronounced as the Optimism protocol solidifies and existing resources can be redirected towards core Ethereum infrastructure.

## Pragmatism

For all its idealism, the design process behind Optimism is ultimately driven by pragmatism.
The core Optimism team has real-world constraints, the projects that build on Optimism have real-world needs, and the users that engage with Optimism have real-world problems.
Optimism's design philosophy prioritizes user and developer needs over theoretical perfection.
Sometimes the best solution isn't the prettiest one.

Optimism is also developed with the understanding that any core team will have limited areas of expertise.
Optimism is developed iteratively and strives to continuously pull feedback from users.
Many core Optimism features today (like [EVM Equivalence](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306)) were only made possible by this iterative approach to protocol development.

## Sustainability

Optimism is in it for the long haul.
Application developers need assurance that the platform they're building on will remain not only operational but competitive over long periods of time.
Optimism's design process is built around the idea of long-term sustainability and not taking shortcuts to scalability.
At the end of the day, a scalable system means nothing without the ecosystem that sustains it.

Sustainability actively influences Optimism's protocol design in ways that go hand-in-hand with our philosophy of simplicity.
The more complex a codebase, the more difficult it is for people outside of the core development team to actively contribute.
By keeping our codebase simple we're able to build a bigger community of contributors who can help maintain the protocol long-term.

## Optimism

Of course, none of this would be possible without a sense of optimism.
Our optimism about the Ethereum vision keeps this project moving forward.
We believe in an optimistic future for Ethereum, a future where we get to redesign our relationships with the institutions that coordinate our lives.

Although Optimism looks like a standalone blockchain, it's ultimately designed as an extension to Ethereum.
We keep this in mind whenever we're creating new features or trying to simplify existing ones.
Optimism is as close to Ethereum as possible not only for pragmatic reasons, but because Optimism exists so that Ethereum can succeed.
We hope that you can see the influence of this philosophy when looking at Optimism's design.

"
ethereum-optimism/community-hub,2-rollup-protocol.md,protocol/2-rollup-protocol.md,"---
title: Rollup Protocol
lang: en-US
---

The big idea that makes Optimism possible is the Optimistic Rollup.
We'll go through a brief explainer of *how* Optimistic Rollups work at a high level.
Then we'll explain *why* Optimism is built as an Optimistic Rollup and why we believe it's the best option for a system that addresses all of our design goals.

## Optimistic Rollups TL;DR

Optimism is an ""Optimistic Rollup,"" which is basically just a fancy way of describing a blockchain that piggy-backs off of the security of another ""parent"" blockchain.
Specifically, Optimistic Rollups take advantage of the consensus mechanism (like PoW or PoS) of their parent chain instead of providing their own.
In OP Mainnet's case this parent blockchain is Ethereum.

<div align=""center"">
<img width=""400"" src=""../../assets/docs/how-optimism-works/1.png"">
</div>


## Block storage


In Bedrock L2 blocks are saved to the Ethereum blockchain using a non-contract address ([`0xff00...0420` on Goerli](https://goerli.etherscan.io/address/0xff00000000000000000000000000000000000420), [`0xff00..0010` on Ethereum](https://etherscan.io/address/0xff00000000000000000000000000000000000010)) to minimize the L1 gas expense.
As these blocks are submitted as transaction calldata on Ethereum, there is no way to modify or censor them after the ""transaction"" is included in a block that has enough attestations.
This is the way that OP Mainnet inherits the availability and integrity guarantees of Ethereum.

Blocks are written to L1 in [a compressed format](https://github.com/ethereum-optimism/optimism/blob/develop/specs/derivation.md#batch-submission-wire-format) to reduce costs.
This is important because writing to L1 is [the major cost of OP Mainnet transactions](../developers/build/transaction-fees.md).



## Block production

Optimism block production is primarily managed by a single party, called the ""sequencer,"" which helps the network by providing the following services:

- Providing transaction confirmations and state updates.
- Constructing and executing L2 blocks.
- Submitting user transactions to L1.



In Bedrock the sequencer does have a mempool, similar to L1 Ethereum, but the mempool is private to avoid opening opportunities for MEV.
In OP Mainnet blocks are produced every two seconds, regardless of whether they are empty (no transactions), filled up to the block gas limit with transactions, or anything in between.

Transactions get to the sequencer in two ways:

1. Transactions submitted on L1 (called *deposits* whether they have assets attached or not) are included in the chain in the appropriate L2 block.
   Every L2 block is identified by the ""epoch"" (the L1 block to which it corresponds, which typically has happened a few minutes before the L2 block) and its sequence number within that epoch.
   The first block of the epoch includes all the deposits that happened in the L1 block to which it corresponds.
   If the sequencer attempts to ignore a legitimate L1 transaction it ends up with a state that is inconsistent with the verifiers, same as if the sequencer tried to fake the state by other means.
   This provides OP Mainnet with L1 Ethereum level censorship resistance.
   You can read more about this mechanism [in the protocol specifications](https://github.com/ethereum-optimism/optimism/blob/develop/specs/derivation.md#deriving-the-transaction-list).

1. Transactions submitted directly to the sequencer. 
   These transactions are a lot cheaper to submit (because you do not need the expense of a separate L1 transaction), but of course they cannot be made censorship resistant, because the sequencer is the only entity that knows about them.

For the moment, [The Optimism Foundation](https://www.optimism.io/) runs the only block producer on OP Mainnet. Refer to [Protocol specs](../protocol/README.md) section for more information about how we plan to decentralize the Sequencer role in the future.



## Block execution


The execution engine (implemented as the `op-geth` component) receive blocks using two mechanisms:

1. The execution engine can update itself using peer to peer network with other execution engines.
   This operates the same way that the L1 execution clients synchronize the state across the network.
   You can read more about it [in the specs](https://github.com/ethereum-optimism/optimism/blob/develop/specs/exec-engine.md#happy-path-sync). 

1. The rollup node (implemented as the `op-node` component) derives the L2 blocks from L1.
   This mechanism is slower, but censorship resistant.
   You can read more about it [in the specs](https://github.com/ethereum-optimism/optimism/blob/develop/specs/exec-engine.md#worst-case-sync).


## Bridging assets between layers

Optimism is designed so that users can send arbitrary messages between smart contracts on L2 (OP Mainnet, OP Goerli, etc.) and the underlying L1 (Ethereum mainnet, Goerli, etc.).
This makes it possible to transfer assets, including ERC20 tokens, between the two networks.
The exact mechanism by which this communication occurs differs depending on the direction in which messages are being sent.

OP Mainnet uses this functionality in the Standard bridge to allow users to deposit assets (ERC20s and ETH) from Ethereum to OP Mainnet and also allow withdrawals of the same from OP Mainnet back to Ethereum.
See the [developer documentation and examples](../developers/bridge/standard-bridge/) on details on the inner workings of the Standard bridge.

### Moving from Ethereum to OP Mainnet

In Optimism terminology, transactions going from Ethereum (L1) to OP Mainnet (L2) are called *deposits*, even if they do not have any assets attached to them.

You use [`L1CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-comm) or [`L1StandardBridge`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol).
Deposit transactions become part of the canonical blockchain in the first L2 block of the ""epoch"" corresponding to the L1 block where the deposits were made. 
This L2 block will usually be created a few minutes after the corresponding L1 block.
You can read more about this [in the specs](https://github.com/ethereum-optimism/optimism/blob/develop/specs/deposits.md).


### Moving from OP Mainnet to Ethereum


Withdrawals (the term is used for any OP Mainnet to Ethereum message, regardless of whether it has attached assets or not) have three stages:

1. You initialize withdrawals with an L2 transaction.

1. Wait for the next output root to be submitted to L1 (you can see this on [the SDK](../sdk/js-client.md)) and then submit the withdrawal proof using `proveWithdrawalTransaction`.
   This new step enables offchain monitoring of the withdrawals, which makes it easier to identify incorrect withdrawals or output roots.
   This protects OP Mainnet users against a whole class of potential bridge vulnerabilities.

1. After the fault challenge period ends (a week on mainnet, less than that on the test network), finalize the withdrawal.

[You can read the full withdrawal specifications here](https://github.com/ethereum-optimism/optimism/blob/develop/specs/withdrawals.md)

## Fault proofs

In an Optimistic Rollup, state commitments are published to L1 (Ethereum in the case of OP Mainnet) without any direct proof of the validity of these commitments.
Instead, these commitments are considered pending for a period of time (called the ""challenge window"").
If a proposed state commitment goes unchallenged for the duration of the challenge window (currently set to 7 days), then it is considered final.
Once a commitment is considered final, smart contracts on Ethereum can safely accept withdrawal proofs about the state of OP Mainnet based on that commitment.

When a state commitment is challenged, it can be invalidated through a ""fault proof"" ([formerly known as a ""fraud proof""](https://github.com/ethereum-optimism/optimistic-specs/discussions/53)) process.
If the commitment is successfully challenged, then it is removed from the `StateCommitmentChain` to eventually be replaced by another proposed commitment.
It's important to note that a successful challenge does not roll back OP Mainnet itself, only the published commitments about the state of the chain.
The ordering of transactions and the state of OP Mainnet is unchanged by a fault proof challenge.

The fault proof process is currently undergoing major redevelopment as a side-effect of the November 11th [EVM Equivalence](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306) update.
You can read more about this process within the [Protocol specs](../protocol/README.md) section of this website.


"
ethereum-optimism/community-hub,README.md,protocol/README.md,"---
title: Protocol specs
lang: en-US
---



## Roadmap

Below is a brief summary of some of the planned [Optimism roadmap](https://www.optimism.io/about) releases.

## Next gen fault proofs

As part of the OVM 2.0 upgrade, the **Optimism fault proof mechanism had to be temporarily disabled**. This means that users of the OP Mainnet network currently need to trust the Sequencer node (run by Optimism Foundation) to publish valid state roots to Ethereum. **You can read more about our security model [here](../security-model/README.md)**. 

We're making progress on the upgrade fault proof mechanism and we expect to productionize our work in 2023. You can keep up with developments in the [Cannon repository](https://github.com/ethereum-optimism/cannon/).


## Decentralizing the sequencer

Currently, the Optimism Foundation runs the sole sequencer on OP Mainnet. This does not mean that Optimism can censor user transactions. However, it is still desirable to decentralize the sequencer over time, eliminating Optimism's role entirely so that anyone can participate in the network as a block producer.

The first step to decentralizing the sequencer is to still have one sequencer at a time, but rotate that sequencer with some frequency. The precise mechanic for sequencer rotation is not yet finalized, but will involve two components:

- an **economic mechanism** which creates a competitive market for sequencing, and redirects excess sequencer profits [towards protocol development](https://medium.com/ethereum-optimism/retroactive-public-goods-funding-33c9b7d00f0c).
- a **governance mechanism** which prevents sequencers from prioritizing short-term profits over the long-term health of the network.

After this, the next step is to support multiple concurrent sequencers. This can be simply achieved by adopting a standard BFT consensus protocol, as used by other L1 protocols and sidechains like Polygon and Cosmos.


You can keep up with the roadmap progress in [Cannon repository](https://github.com/ethereum-optimism/optimism/tree/develop/cannon) for the fault proofs and [Optimism specs repository](https://github.com/ethereum-optimism/optimism/tree/65ec61dde94ffa93342728d324fecf474d228e1f/specs) for the overall protocol work.

"
ethereum-optimism/community-hub,deposit-flow.md,protocol/deposit-flow.md,"---
title: Deposit Flow
lang: en-US
---

## Introduction

In Optimism terminology, ""*deposit transaction*"" refers to any L2 transaction that is triggered by a transaction or event on L1.
A deposit transaction may or may not have assets (ETH, tokens, etc.) attached to it.

The process is somewhat similar to [the way most networking stacks work](https://en.wikipedia.org/wiki/Encapsulation_(networking)).
Information is encapsulated in lower layer packets on the sending side, and then retrieved and used by those layers on the receiving side while going up the stack to the receiving application.

![Overall process](../../assets/docs/protocol/deposit-flow/overall-process.svg)


## L1 Processing

1. An L1 entity, either a smart contract or an externally owned account (EOA), sends a deposit transaction to [`L1CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/L1CrossDomainMessenger.sol), using [`sendMessage`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/universal/CrossDomainMessenger.sol#L249-L289). 
  This function accepts three parameters:

   - `_target`, target address on L2.
   - `_message`, the L2 transaction's calldata, formatted as per the [ABI](https://docs.soliditylang.org/en/v0.8.19/abi-spec.html) of the target account.
   - `_minGasLimit`, the minimum gas limit allowed for the transaction on L2. Note that this is a *minimum* and the actual amount provided on L2 may be higher (but never lower) than the specified gas limit.
     Note that the actual amount provided on L2 will be higher, because the portal contract on L2 needs to do some processing before submitting the call to `_target`.

   You can see code that implements this call [in the tutorial](https://github.com/ethereum-optimism/optimism-tutorial/blob/main/cross-dom-comm/hardhat/contracts/FromL1_ControlL2Greeter.sol#L16).

1. The L1 cross domain messenger calls [its own `_send` function](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/L1CrossDomainMessenger.sol#L42-L52).
   It uses these parameters:

   - `_to`, the destination address, is the messenger on the other side. 
     In the case of deposits, this is always [`0x4200000000000000000000000000000000000007`](https://goerli-optimism.etherscan.io/address/0x4200000000000000000000000000000000000007).
   - `_gasLimit`, the gas limit. 
     This value is calculated using [the `baseGas` function](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/universal/CrossDomainMessenger.sol#L442-L471).
   - `_value`, the ETH that is sent with the message.
     This amount is taken from the transaction value.
   - `_data`, the calldata for the call on L2 that is needed to relay the message.
     This is an [ABI encoded](https://docs.soliditylang.org/en/v0.8.19/abi-spec.html) call to [`relayMessage`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/universal/CrossDomainMessenger.sol#L291-L413).

1. [`_sendMessage`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/L1CrossDomainMessenger.sol#L42-L52) calls the portal's [`depositTransaction` function](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L422-L483).

   Note that other contracts can also call [`depositTransaction`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L422-L483) directly. 
   However, doing so bypasses certain safeguards, so in most cases it's a bad idea.

1. [The `depositTransaction` function](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L422-L483) runs a few sanity checks, and then emits a [`TransactionDeposited`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L85-L99) event. 


## L2 Processing

1. The `op-node` component [looks for `TransactionDeposited` events on L1](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/op-node/rollup/derive/deposits.go#L13-L33).
   If it sees any such events, it [parses](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/op-node/rollup/derive/deposit_log.go) them.

1. Next, `op-node` [converts](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/op-node/rollup/derive/deposits.go#L35-L51) those `TransactionDeposited` events into [deposit transactions](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/specs/deposits.md#user-deposited-transactions).

1. In most cases user deposit transactions call the [`relayMessage`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/universal/CrossDomainMessenger.sol#L291-L413) function of [`L2CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/universal/CrossDomainMessenger.sol).

1. `relayMessage` runs a few sanity checks and then, if everything is good, [calls the real target contract with the relayed calldata](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/universal/CrossDomainMessenger.sol#L394).

## Denial of service (DoS) prevention

As with all other L1 transactions, the L1 costs of a deposit are borne by the transaction's originator.
However, the L2 processing of the transaction is performed by the Optimism nodes.
If there were no cost attached, an attacker could be able to submit a transaction that had high costs of run on L2, and that way perform a denial of service attack.

To avoid this DoS vector, [`depositTransaction`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L422-L483), and the functions that call it, require a gas limit parameter.
[This gas limit is encoded into the []`TransactionDeposited` event](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L469-L477), and used as the gas limit for the user deposit transaction on L2.

This L2 gas is paid for by burning L1 gas [here](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/ResourceMetering.sol#L162). 


## Replaying messages

Deposits transactions can fail due to several reasons:

- Not enough gas provided.
- The state on L2 does not allow the transaction to be successful.

It is possible to replay a failed deposit, possibly with more gas, 


### Replays in action

To see how replays work, you can use [this contract on OP Goerli](https://goerli-optimism.etherscan.io/address/0x26A145eccDf258688C763726a8Ab2aced898ADe1#code). 

1. Call `stopChanges`, using this Foundry command:

   ```sh
   PRIV_KEY=<your private key here>
   export ETH_RPC_URL=<url to OP Goerli>
   GREETER=0x26A145eccDf258688C763726a8Ab2aced898ADe1
   cast send --private-key $PRIV_KEY $GREETER ""stopChanges()""
   ```

1. Verify that `getStatus()` returns false, meaning changes are not allowed, and see the value of `greet()` using Foundry.
   Note that Foundry returns false as zero.

   ```sh
   cast call $GREETER ""greet()"" | cast --to-ascii ; cast call $GREETER ""getStatus()""
   ```

1. Get the calldata.
   You can use this Foundry command:

   ```sh
   cast calldata ""setGreeting(string)"" ""testing""
   ```

   Or just use this value: 
   
   ```
   0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000774657374696e6700000000000000000000000000000000000000000000000000
   ```

1. Send a greeting change as a deposit.
   Use these commands:

   ```sh
   L1_RPC=<URL to Goerli>
   L1XDM_ADDRESS=0x5086d1eef304eb5284a0f6720f79403b4e9be294
   FUNC=""sendMessage(address,bytes,uint32)""
   CALLDATA=`cast calldata ""setGreeting(string)"" ""testing""`
   cast send --rpc-url $L1_RPC --private-key $PRIV_KEY $L1XDM_ADDRESS $FUNC $GREETER $CALLDATA 10000000
   ```

   The transaction will be successful on L1, but then emit a fail event on L2.

1. The next step is to find the hash of the failed relay.
   The easiest way to do this is to look in [the internal transactions of the destination contract](https://goerli-optimism.etherscan.io/address/0x26A145eccDf258688C763726a8Ab2aced898ADe1#internaltx), and select the latest one that appears as a failure.
   It should be a call to L2CrossDomainMessenger at address `0x420...007`. This is the call you need to replay.

   If the latest internal transaction is a success, it probably means your transaction hasn't relayed yet. Wait until it is, that may take a few minutes.

1. Get the transaction information using Foundry.

   ```sh
   TX_HASH=<transaction hash from Etherscan>
   L2XDM_ADDRESS=0x4200000000000000000000000000000000000007
   REPLAY_DATA=`cast tx $TX_HASH input`
   ```

1. Call `startChanges()` to allow changes using this Foundry command:

   ```sh
   cast send --private-key $PRIV_KEY $GREETER ""startChanges()""
   ```

   ::: warning Don't do this prematurely

   If you call `startChanges()` too early, it will happen from the message is relayed to L2, and then the initial deposit will be successful and there will be no need to replay it.

   :::

1. Verify that `getStatus()` returns true, meaning changes are not allowed, and see the value of `greet()`. 
   Foundry returns true as one.

   ```sh
   cast call $GREETER ""greet()"" | cast --to-ascii ; cast call $GREETER ""getStatus()""
   ```

1. Now send the replay transaction.

   ```sh   
   cast send --private-key $PRIV_KEY --gas-limit 10000000 $L2XDM_ADDRESS $REPLAY_DATA 
   ```

   ::: details Why do we need to specify the gas limit?
   
   The gas estimation mechanism tries to find the minimum gas limit at which the transaction would be successful. 
   However, `L2CrossDomainMessenger` does not revert when a replay fails due to low gas limit, it just emits a failure message. 
   The gas estimation mechanism considers that a success.

   To get a gas estimate, you can use this command:

   ```sh
   cast estimate --from 0x0000000000000000000000000000000000000001 $L2XDM_ADDRESS $REPLAY_DATA
   ```

   That address is a special case in which the contract does revert.

   :::

1. Verify the greeting has changed:

   ```sh
   cast call $GREETER ""greet()"" | cast --to-ascii ; cast call $GREETER ""getStatus()""
   ```

::: tip Debugging

   To debug deposit transactions you can ask the L2 cross domain messenger for the state of the transaction. 
    
   1. Look on Etherscan to see the `FailedRelayedMessage` event. 
      Set `MSG_HASH` to that value.

   1. To check if the message is listed as failed, run this:

      ```sh
      cast call $L2XDM_ADDRESS ""failedMessages(bytes32)"" $MSG_HASH
      ```

      To check if it is listed as successful, run this:

      ```sh
      cast call $L2XDM_ADDRESS ""successfulMessages(bytes32)"" $MSG_HASH
      ```
:::

"
ethereum-optimism/community-hub,protocol-2.0.md,protocol/protocol-2.0.md,"---
title: Contract Overview
lang: en-US
---

## L1 contracts

### L2OutputOracle

[The `L2OutputOracle` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L2OutputOracle.sol) contains the state root of the Optimism blockchain (OP Mainnet, OP Goerli, etc.).
Once fault proofs are activated, it will be the one that receives the result of the fault proof process.

This is the contract that replaces the old State Commitment Chain.

### OptimismPortal

[The `OptimismPortal` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol) provides the low-level API for communications between layers. Unless you are trying to send L2 transactions via L1 to bypass the sequencer, we strongly recommend sending messages between L1 and L2 via the L1CrossDomainMessenger and L2CrossDomainMessenger.

### L1CrossDomainMessenger

[The `L1CrossDomainMessenger` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1CrossDomainMessenger.sol) is used for sending messages between the underlying L1 (Ethereum, Goerli, etc.) and L2 (OP Mainnet, OP Goerli, etc.). Those messages may or may not have assets attached to them.

### L1StandardBridge

[The `L1StandardBridge` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol) uses `L1CrossDomainMessenger` to transfer ETH and ERC-20 tokens between the underlying L1 (Ethereum, Goerli, etc.) and L2 (OP Mainnet, OP Goerli, etc.).


## L2 contracts (predeploys)

### L1Block

[The `L1Block` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L1Block.sol) sits at address `0x4200000000000000000000000000000000000015`.
You can use [the getter functions](https://docs.soliditylang.org/en/v0.8.12/contracts.html#getter-functions) to get these parameters:

- `number`: The latest L1 block number known to L2 (the `L1BlockNumber` contract is still supported to avoid breaking existing applications)
- `timestamp`: The timestamp of the latest L1 block
- `basefee`: The base fee of the latest L1 block
- `hash`: The hash of the latest L1 block
- `sequenceNumber`: The number of the L2 block within the epoch (the epoch changes when there is a new L1 block)

Currently the L1 information is delayed by two block confirmations (~24 seconds) to minimize the impact of reorgs.

### SequencerFeeVault

[The `SequencerFeeVault` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/SequencerFeeVault.sol) handles funding the sequencer on L1 using the ETH base fee on L2.

The fees are calculated using [EIP 1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md), the same mechanism that Ethereum uses (but with different parameter values).


### L2ToL1MessagePasser

[The `L2ToL1MessagePasser` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol) is used internally by `L2CrossDomainMessenger` to initiate withdrawals.

Note that there are two contracts under this name:

- [The legacy contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/LegacyMessagePasser.sol) at address `0x4200000000000000000000000000000000000000`
- [The new contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol) at address `0x4200000000000000000000000000000000000016`


### L2CrossDomainMessenger

[The `L2CrossDomainMessenger` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2CrossDomainMessenger.sol) is used to send messages from L2 (OP Mainnet, OP Goerli, etc.) to the underlying L1 (Ethereum, Goerli, etc.).


### L2StandardBridge 

[The `L2StandardBridge` contract](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/L2/L2StandardBridge.sol) is used to ""attach"" assets (ETH and ERC-20 tokens) to messages that are then sent by `L2CrossDomainMessenger`.


### WETH9

[The WETH9 contract](https://web.archive.org/web/20221022164309/https://weth.io/) is an ERC-20 token that wraps around ETH to provide extra functionality, such as approvals.



### Legacy Contracts

Those are contracts that have been superceded, but are kept in case any deployed contract depends on them.

- [L1BlockNumber](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/L1BlockNumber.sol): 
  The `L1BlockNumber` contract provides the number of the latest L1 block. 
  In Bedrock it is simply a proxy to [`L1Block`](#l1block). 
- [DeployerWhitelist](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/DeployerWhitelist.sol):
  The `DeployerWhitelist` contract used to manage the whitelist before [OP Mainnet moved out of beta](https://twitter.com/optimismFND/status/1471571415774023682).

- [OVM_ETH](https://github.com/ethereum-optimism/optimism/blob/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock/contracts/legacy/LegacyERC20ETH.sol):
  The `OVM_ETH` contract used to manage users ETH balances prior to Bedrock.


"
ethereum-optimism/community-hub,sequencing.md,protocol/sequencing.md,"<script>
// This redirect is here because search engines still know 
// https://community.optimism.io/docs/protocol/sequencing/ 
// See https://github.com/ethereum-optimism/community-hub/issues/377
export default {
  mounted () {
    window.location.href=""/docs/protocol/#decentralizing-the-sequencer""
  }
}
</script>

"
ethereum-optimism/community-hub,txn-flow.md,protocol/txn-flow.md,"---
title: Transaction Flow
lang: en-US
---

## Introduction

The process for a rollup transaction has two requirements.

- The transaction needs to be written to L1 (Ethereum).
  This is typically performed by `op-batcher`, but any user can send an L1 transaction to submit an L2 transaction, in which case `op-batcher` is bypassed.

- The transaction needs to be executed to modify the state (by `op-geth`).
  Afterwards, `op-proposer` writes a [commitment](https://en.wikipedia.org/wiki/Commitment_scheme) to the post-transaction state to L1.
  Note that `op-proposer` does not need to write a commitment after each transaction to L1, it is OK to commit to the state after a block of transactions.

![Overall process](../../assets/docs/protocol/txn-flow/overall-process.svg)


## Writing the transaction to L1

[`op-batcher`](https://github.com/ethereum-optimism/optimism/tree/233ede59d16cb01bdd8e7ff662a153a4c3178bdd/op-batcher) has two main jobs:

- Compress transactions into batches.
- Post those batches to L1 to ensure availability and integrity.

### Compression

The batcher aggregates [sequencer batches](https://github.com/ethereum-optimism/optimism/blob/233ede59d16cb01bdd8e7ff662a153a4c3178bdd/specs/glossary.md#sequencer-batch) into [channels](https://github.com/ethereum-optimism/optimism/blob/233ede59d16cb01bdd8e7ff662a153a4c3178bdd/specs/glossary.md#channel).
This allows for more data per compression frame, and therefore a better compression ratio.
You can read more about this process [in the specs](https://github.com/ethereum-optimism/optimism/blob/233ede59d16cb01bdd8e7ff662a153a4c3178bdd/specs/derivation.md#batch-submission).

When a channel is full or times out it is compressed and written.

The maximum time that a channel can be open, from the first transaction to the last, is specified in units of L1 block time (so a value of 5 means 5*12=60 seconds).
You can specify it either as an environment variable (`OP_BATCHER_MAX_CHANNEL_DURATION`) or a command line parameters (`--max-channel-duration`).
Alternatively, you can set it to zero (the default) to avoid posting smaller, less cost efficient, transactions.

A channel is full when the anticipated compressed size is the target L1 transaction size. 
This is controlled by two parameters:

1. The target L1 transaction size, which you can specify in bytes on the command line (`--target-l1-tx-size-bytes`) or as an environment variable (`OP_BATCHER_TARGET_L1_TX_SIZE_BYTES`)

1. The expected compression ratio, which you can specify as a decimal value, again either on the command line (`--approx-compr-ratio`) or as an environment variable (`OP_BATCHER_APPROX_COMPR_RATIO`).

You can see the code that implements this process in [`channel_manager.go`](https://github.com/ethereum-optimism/optimism/blob/233ede59d16cb01bdd8e7ff662a153a4c3178bdd/op-batcher/batcher/channel_manager.go) and [`channel_builder.go`](https://github.com/ethereum-optimism/optimism/blob/233ede59d16cb01bdd8e7ff662a153a4c3178bdd/op-batcher/batcher/channel_builder.go).


### Posting to L1

When a channel is full it is posted, either as a single transaction or as multiple transactions (depending on data size) to L1. 

Processed L2 transactions exist in one of three states:

- **unsafe** transactions are already processed, but not written to L1 yet.
  A batcher fault might cause these transactions to be dropped.

- **safe** transactions are already processed and written to L1.
  However, they might be dropped due to a reorganization at the L1 level.

- **finalized** transactions are written to L1 in an L1 block that is old enough to be extremely unlikely to be re-organized.

::: tip When are transactions irrevocable?

Once a transaction is finalized, you can rely that it has ""happened"".
While the state after the transaction is subject to fault challenges, the transaction itself is fix and immutable.

:::

You can see the code that builds the channels to be written to L1 in [`channel_out.go`](https://github.com/ethereum-optimism/optimism/blob/233ede59d16cb01bdd8e7ff662a153a4c3178bdd/op-node/rollup/derive/channel_out.go) and [`channel_builder.go`](https://github.com/ethereum-optimism/optimism/blob/233ede59d16cb01bdd8e7ff662a153a4c3178bdd/op-node/rollup/derive/channel_out.go).
The transactions themselves are sent in [`op-batcher`'s main loop](https://github.com/ethereum-optimism/optimism/blob/915036aaa7eba7ee2ce290be90f78bb35df8d066/op-batcher/batcher/driver.go#L284-L299), which calls [`publishStateToL1`](https://github.com/ethereum-optimism/optimism/blob/915036aaa7eba7ee2ce290be90f78bb35df8d066/op-batcher/batcher/driver.go#L303-L344)


#### Determining the status of a transaction

This is the procedure to see a transaction's status.
The directions here are for [Foundry](https://book.getfoundry.sh/), but the concept is the same regardless of the method you use.


1. Get the number of the L2 block in which the transaction is recorded.

   ```sh
   export ETH_RPC_URL=<URL to Optimism network>
   cast tx <transaction hash> blockNumber
   ```

1. Get the number of the latest finalized block.
   If the result is greater than the block number of the transaction, or equal, the transaction is finalized.

   ```sh
   cast block finalized --field number
   ```

1. Get the number of the latest safe block.
   If the result is greater than the block number of the transaction, or equal, the transaction is safe.

   ```sh
   cast block safe --field number
   ```

1. If the transaction isn't finalized or safe, it's unsafe. 
   

## State processing

State processing can be divided into two steps:

1. Applying the transaction to the old state to produce the new state, which is performed by [`op-geth`](https://github.com/ethereum-optimism/op-geth).

1. Proposing the new [Merkle root](https://en.wikipedia.org/wiki/Merkle_tree) of the state.
   Merkle roots are used because the actual state is long and would cost too much to write to L1.
   This step is performed by `op-proposer`.

### State changes

The state is stored and modified by [`op-geth`](https://github.com/ethereum-optimism/op-geth).
It is a [slightly modified](https://op-geth.optimism.io/) version of the standard [geth](https://geth.ethereum.org/).


### State root proposals

The state root proposals are posted by [`op-proposer`](https://github.com/ethereum-optimism/optimism/tree/233ede59d16cb01bdd8e7ff662a153a4c3178bdd/op-proposer) to [`L2OutputOracle`](https://github.com/ethereum-optimism/optimism/blob/233ede59d16cb01bdd8e7ff662a153a4c3178bdd/packages/contracts-bedrock/contracts/L1/L2OutputOracle.sol) on L1. 

Output proposals are *not* immediately valid. 
They can only be considered authoritative once the fault challenge period (7 days on the production network, less on test networks) has passed.

"
ethereum-optimism/community-hub,withdrawal-flow.md,protocol/withdrawal-flow.md,"---
title: Withdrawal Flow
lang: en-US
---


In Optimism terminology, a *withdrawal* is a transaction sent from L2 (OP Mainnet, OP Goerli etc.) to L1 (Ethereum mainnet, Goerli, etc.).
This withdrawal may or may not have assets attached to it.

Withdrawals require the user to submit three transactions:

1. **Withdrawal initiating transaction**, which the user submits on L2.
1. **Withdrawal proving transaction**, which the user submits on L1 to prove that the withdrawal is legitimate (based on a merkle patricia trie root that commits to the state of the `L2ToL1MessagePasser`'s storage on L2)
1. **Withdrawal finalizing transaction**, which the user submits on L1 after the fault challenge period has passed, to actually run the transaction on L1, claim any assets attached, etc.

You can see an example of how to do this [in the tutorials](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-comm#optimism-message-to-ethereum-withdrawal).


## Withdrawal initiating transaction

1. On L2 somebody (either an externally owned account (EOA) directly or a contract acting on behalf of an EOA) calls the [`sendMessage`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/universal/CrossDomainMessenger.sol#L249-L289) function of [`L2CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/universal/CrossDomainMessenger.sol). 

   This function accepts three parameters:

   - `_target`, target address on L1.
   - `_message`, the L1 transaction's calldata, formatted as per the [ABI](https://docs.soliditylang.org/en/v0.8.19/abi-spec.html) of the target account.
   - `_minGasLimit`, The minimum amount of gas that the withdrawal finalizing transaction can provide to the withdrawal transaction. This is enforced by the `SafeCall` library, and if the minimum amount of gas cannot be met at the time of the external call from the `OptimismPortal` -> `L1CrossDomainMessenger`, the finalization transaction will revert to allow for re-attempting with a higher gas limit. In order to account for the gas consumed in the `L1CrossDomainMessenger.relayMessage` function's execution, extra gas will be added on top of the `_minGasLimit` value by the `CrossDomainMessenger.baseGas` function when `sendMessage` is called on L2.

1. `sendMessage` is a generic function that is used in both cross domain messengers. 
   It calls [`_sendMessage`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L2/L2CrossDomainMessenger.sol#L48-L60), which is specific to [`L2CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L2/L2CrossDomainMessenger.sol).

1. `_sendMessage` calls [`initiateWithdrawal`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol#L91-L129) on [`L2ToL1MessagePasser`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol).
   This function calculates the hash of the raw withdrawal fields.
   It then [marks that hash as a sent message in `sentMessages`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol#L114) and [emits the fields with the hash in a `MessagePassed` event](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L2/L2ToL1MessagePasser.sol#L116-L124).

   The raw withdrawal fields are:

   - `nonce` - A single use value to prevent two otherwise identical withdrawals from hashing to the same value
   - `sender` - The L2 address that initiated the transfer, typically [`L2CrossDomainMessenger`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L2/L2CrossDomainMessenger.sol)
   - `target` - The L1 target address
   - `value` - The amount of WEI transferred by this transaction
   - `gasLimit` - Gas limit for the transaction, the system guarantees that at least this amount of gas will be available to the transaction on L1.
     Note that if the gas limit is not enough, or if the L1 finalizing transaction does not have enough gas to provide that gas limit, the finalizing transaction returns a failure, it does not revert.
   - `data` - The calldata for the withdrawal transaction

1. When `op-proposer` [proposes a new output](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/op-proposer/proposer/l2_output_submitter.go#L312-L320), the output proposal includes [the output root](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/op-proposer/proposer/l2_output_submitter.go#L316), provided as part of the block by `op-node`. 
   This new output root commits to the state of the `sentMessages` mapping in the `L2ToL1MessagePasser` contract's storage on L2, and it can be used to prove the presence of a pending withdrawal within it.




## Withdrawal proving transaction

Once an output root that includes the `MessagePassed` event is published to L1, the next step is to prove that the message hash really is in L2.
Typically this is done [by the SDK](https://sdk.optimism.io/classes/crosschainmessenger#proveMessage-2).

### Offchain processing

1. A user calls the SDK's [`CrossDomainMessenger.proveMessage()`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/sdk/src/cross-chain-messenger.ts#L1452-L1471) with the hash of the L1 message.
   This function calls [`CrossDomainMessenger.populateTransaction.proveMessage()`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/sdk/src/cross-chain-messenger.ts#L1746-L1798).

1. To get from the L2 transaction hash to the raw withdrawal fields, the SDK uses [`toLowLevelMessage`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/sdk/src/cross-chain-messenger.ts#L368-L450).
      It gets them from the `MessagePassed` event in the receipt.

1. To get the proof, the SDK uses [`getBedrockMessageProof`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/sdk/src/cross-chain-messenger.ts#L1348-L1395).

1. Finally, the SDK calls [`OptimismPortal.proveWithdrawalTransaction()`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L234-L318) on L1.



### Onchain processing

[`OptimismPortal.proveWithdrawalTransaction()`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L234-L318) runs a few sanity checks.
Then it verifies that in `L2ToL1MessagePasser.sentMessages` on L2 the hash for the withdrawal is turned on, and that this proof have not been submitted before.
If everything checks out, it writes the output root, the timestamp, and the L2 output index to which it applies in `provenWithdrawals` and emits an event. 

The next step is to wait the fault challenge period, to ensure that the L2 output root used in the proof is legitimate, and that the proof itself is legitimate and not a hack.


## Withdrawal finalizing transaction

Finally, once the fault challenge period passes, the withdrawal can be finalized and executed on L1.

### Offchain processing

1. A user calls the SDK's [`CrossDomainMessenger.finalizeMessage()`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/sdk/src/cross-chain-messenger.ts#L1473-L1493) with the hash of the L1 message.
   This function calls [`CrossDomainMessenger.populateTransaction.finalizeMessage()`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/sdk/src/cross-chain-messenger.ts#L1800-L1853).

1. To get from the L2 transaction hash to the raw withdrawal fields, the SDK uses [`toLowLevelMessage`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/sdk/src/cross-chain-messenger.ts#L368-L450).
      It gets them from the `MessagePassed` event in the receipt.

1. Finally, the SDK calls [`OptimismPortal.finalizeWithdrawalTransaction()`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L320-L420) on L1.

### Onchain processing

1. [`OptimismPortal.finalizeWithdrawalTransaction()`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L320-L420) runs several checks. The interesting ones are:

   - [Verify the proof has already been submitted](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L341-L347).
   - [Verify the proof has been submitted long enough ago that the fault challenge period has already passed](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L357-L364).
   - [Verify that the proof applies to the current output root for that block (the output root for a block can be changed by the fault challenge process)](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L366-L378).
   - [Verify that the current output root for that block was proposed long enough ago that the fault challenge period has passed](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L380-L384).
   - [Verify that the transaction has not been finalized before to prevent replay attacks](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L386-L390).

   If any of these checks fail, the transaction reverts.

1. Mark the withdrawal as finalized in `finalizedWithdrawals`.

1. Run the actual withdrawal transaction (call the `target` contract with the calldata in `data`).

1. Emit a [`WithdrawalFinalized`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L118) event.
"
ethereum-optimism/community-hub,sdk,sdk,"
"
ethereum-optimism/community-hub,README.md,sdk/README.md,"---
title: SDK
lang: en-US
---

In most ways Optimism is [EVM equivalent](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306).
However, there are [a few differences](../developers/build/differences/), which sometimes require decentralized applications to access Optimism-specific services.

For example, decentralized applications might need to estimate gas costs.
The standard Ethereum tooling assumes that gas cost is proportional to the gas used by the transaction, which is correct on L1, but not on Optimism.
[Our gas costs are predominately the cost of writing the transaction to L1](../developers/build/transaction-fees.md), which depends on the transaction size, not the amount of processing required.
This difference requires us to have separate methods to provide gas estimates.

There are three ways to access Optimism services:

1. [Onchain contract calls](https://github.com/ethereum-optimism/optimism/tree/65ec61dde94ffa93342728d324fecf474d228e1f/packages/contracts-bedrock). 
   This is the way your contracts can get Optimism information or services directly.
1. [The JavaScript SDK](js-client.md). For use when you write JavaScript or TypeScript code, either in the client or a Node.js server.
1. [Offchain, using RPC](../developers/build/json-rpc.md). Which is more complicated but usable from any development stack (Python, Rust, etc.).


::: tip Improving the SDK
If you find a bug, or if there's a feature you think we should add, there are several ways to inform us.

- [Go on our Discord](https://discord-gateway.optimism.io/), and then ask in **#dev-support**.
- Submit an issue on [our Github](https://github.com/ethereum-optimism/optimism/issues).
:::

"
ethereum-optimism/community-hub,alchemy-sdk.md,sdk/alchemy-sdk.md,"---
title: Alchemy SDK
lang: en-US
---

In addition to the standard [Ethereum RPC interface](../useful-tools/networks.md), Alchemy makes available an SDK.

- [Quickstart](https://docs.alchemy.com/reference/alchemy-sdk-quickstart/?a=818c11a8da)
- [Examples](https://docs.alchemy.com/reference/optimism-sdk-examples/?a=818c11a8da)

"
ethereum-optimism/community-hub,js-client.md,sdk/js-client.md,"---
title: The OP Stack Client SDK
lang: en-US
---

There are a few areas in which the SDK can help you navigate [the differences between OP Mainnet and Ethereum](../developers/build/differences/):

- [Gas costs](../developers/build/transaction-fees.md)
- [Interlayer communication](../developers/bridge/basics.md)

The SDK supports multiple OP Chains: OP, Base, etc.
To see whether a specific OP Chain is supported directly, [see the documentation](https://sdk.optimism.io/enums/l2chainid).
Chains that aren't officially supported just take a few extra steps.
Get the L1 contract addresses, and [provide them to the SDK](https://stack.optimism.io/docs/build/sdk/#contract-addresses).
Once you do that, you can use the SDK normally.

[Reference](https://sdk.optimism.io/)

## Tutorials:
- [Viewing transactions between layers](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-view-tx)
- [Bridging ETH](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-eth)
- [Bridging ERC-20](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/cross-dom-bridge-erc20)
- [Estimate the costs of an OP (L2) transaction](https://github.com/ethereum-optimism/optimism-tutorial/tree/main/sdk-estimate-gas)

"
ethereum-optimism/community-hub,security-model,security-model,"
"
ethereum-optimism/community-hub,README.md,security-model/README.md,"---
title: OP Mainnet's Security Model
lang: en-US
---

OP Mainnet is a work in progress.
Constantly pushing to improve the security guarantees that users have while using OP Mainnet is a top priority.
At the moment, **it‚Äôs important to understand that the security of OP Mainnet is dependent on a [multisig wallet](https://www.coindesk.com/tech/2020/11/10/multisignature-wallets-can-keep-your-coins-safer-if-you-use-them-right/)** managed by several anonymous individuals.
This multisig wallet can be used to upgrade core OP Mainnet smart contracts without upgrade delays.

Please also keep in mind that just like any other system, **the Optimism codebase may contain unknown bugs** that could lead to the loss of some or all of the assets held within the system.
[2222 smart contract codebase has been audited repeatedly](https://github.com/ethereum-optimism/optimism/tree/develop/docs/security-reviews) but **audits are not a stamp of approval** and **a completed audit does not mean that the audited codebase is free of bugs.**
It‚Äôs important to understand that using OP Mainnet inherently exposes you to the risk of bugs within the Optimism codebase, and that you use OP Mainnet at your own risk.

## Security Model FAQ

### Does OP Mainnet have fault proofs?

**No**, OP Mainnet does not currently have fault proofs.
**Fault proofs do not meaningfully improve the security of a system if that system can be upgraded within the 7 day challenge window (‚Äùfast upgrade keys‚Äù)**.
A system with fast upgrade keys, such as OP Mainnet, is fully dependent on the upgrade keys for security.
OP Mainnet's goal is to be the first system that deploys fault proofs that can secure the system by themselves, without fast upgrade keys.

### Who manages the multisig?

The multisig is managed by an anonymous set of individuals.
Members are anonymous in order to make the multisig more difficult to compromise.

### How is Optimism planning to remove the multisig?

Check out Optimism‚Äôs detailed [Pragmatic Path to Decentralization](https://medium.com/ethereum-optimism/our-pragmatic-path-to-decentralization-cb5805ca43c1) post for a detailed view into how the multisig may be removed in a way that makes OP Mainnet the first chain with true fault proof security.

### How can I help make OP Mainnet more secure?

[OP Mainnet has one of the biggest bug bounties (ever)](./bounties.md).
You can earn up to $2,000,042 by finding critical bugs in the Optimism codebase.
You can also run your own verifier node to detect network faults.

"
ethereum-optimism/community-hub,bounties.md,security-model/bounties.md,"---
title: Bug Bounties
lang: en-US
---

## Optimism Bug Bounty Program

Optimism takes security seriously and as such, we have a massive bug bounty program. We don't just talk about it either! We have given out one of the [largest bounty payouts ever](https://medium.com/ethereum-optimism/disclosure-fixing-a-critical-bug-in-optimisms-geth-fork-a836ebdf7c94)! You can read more about that bug [here](https://www.saurik.com/optimism.html). Below are the various bug bounty programs we have, as well as how to reach out to us if your bug is not covered by an existing bounty.

### Main Bounty Page

Optimism has a very detailed [Bug bounty Page on Immunefi](https://immunefi.com/bounty/optimism/). In the listing you can find all the information relating to assets in scope, reporting, and the payout process.

### Bedrock Audit Contest

With our upcoming launch of [Bedrock](../developers/bedrock/how-is-bedrock-different.md) we have launched a [Sherlock audit contest](https://app.sherlock.xyz/audits/contests/38).

### Unscoped Bug

If you think you have found a critical or major bug that is not covered by our existing bug bounty, please report it to us via the Immunefi program regardless. We will seriously consider the impact of any issues, and have previously rewarded security researchers for bugs not within the stated scope of the program.

"
ethereum-optimism/community-hub,priv-roles.md,security-model/priv-roles.md,"---
title: Privileged Roles in OP Mainnet
lang: en-US
---

In our current state of decentralization, there are still some privileged roles in OP Mainnet. This document explains what they are, and why they exist.

## Hot wallets

These are addresses that *need* to have their private key online somewhere for a component of the system to work.

### Batcher
  
This is the component that submits new transaction batches.

- **Mainnet address**: [`0x6887246668a3b87F54DeB3b94Ba47a6f63F32985`](https://etherscan.io/address/0x6887246668a3b87F54DeB3b94Ba47a6f63F32985)
- **Goerli address**: [`0x7431310e026B69BFC676C0013E12A1A11411EEc9`](https://goerli.etherscan.io/address/0x7431310e026B69BFC676C0013E12A1A11411EEc9)

If this account is compromised, that would enable denial of service attacks against the rollup.


### Proposer
  
This is the component that submits new state roots for the L2 output. 

- **Mainnet address**: [`0x473300df21D047806A082244b417f96b32f13A33`](https://etherscan.io/address/0x473300df21D047806A082244b417f96b32f13A33)
- **Goerli address**: [`0x02b1786A85Ec3f71fBbBa46507780dB7cF9014f6`](https://goerli.etherscan.io/address/0x02b1786A85Ec3f71fBbBa46507780dB7cF9014f6)

If this account is compromised then we might have invalid output proposals that we need the [challenger](#challenger) to cancel. 
As long as we do it within seven days, the risk is minimalized.


## Cold wallets

These addresses are *cold*, meaning the private key is not on any device connected to the network, and cannot be used without human intervention.
On OP Mainnet these are usually multisig contracts, controlled by groups of community members.
On [OP Stack](https://stack.optimism.io) these wallets are set by default to the `ADMIN` account.
When you create a new OP Stack blockchain you specify them in [the deployment configuration JSON file](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/deploy-config/getting-started.json).


### MintManager Owner

On OP Mainnet this account controls the [`MintManager`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/governance/MintManager.sol) that can mint new OP tokens.
On OP Stack it is usually meaningless.


| Address of | Goerli | Mainnet |
| - | - | - |
| Contract | [`0x038a8825A3C3B0c08d52Cc76E5E361953Cf6Dc76`](https://goerli.etherscan.io/address/0x038a8825A3C3B0c08d52Cc76E5E361953Cf6Dc76) | [`0x5c4e7ba1e219e47948e6e3f55019a647ba501005`](https://optimistic.etherscan.io/address/0x5c4e7ba1e219e47948e6e3f55019a647ba501005) 
| Owner | [`0x18394B52d3Cb931dfA76F63251919D051953413d`](https://goerli.etherscan.io/address/0x18394B52d3Cb931dfA76F63251919D051953413d) | [`0x2a82ae142b2e62cb7d10b55e323acb1cab663a26`](https://optimistic.etherscan.io/address/0x2a82ae142b2e62cb7d10b55e323acb1cab663a26) 


If access to this account is lost, there is no more ability to mint new OP tokens.
If access to this account is compromised, attackers can mint an endless supply of OP tokens.

### System Config Owner

This is the address authorized to change the settings in the [`SystemConfig`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/SystemConfig.sol) contract. 

- **Mainnet address**: [`0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A`](https://etherscan.io/address/0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A)
- **Goerli address**: [`0xAe851f927Ee40dE99aaBb7461C00f9622ab91d60`](https://goerli.etherscan.io/address/0xAe851f927Ee40dE99aaBb7461C00f9622ab91d60#readProxyContract)

If access to this account is lost, it would make it more difficult to modify the system configuration (not impossible, because we can upgrade the contract at the proxy). 
If access to this account is compromised, an attack can raise the gas markup and drain users' funds.


### Migration SystemDictator Controller

This is the address authorized to control [`SystemDictator`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/deployment/SystemDictator.sol), used for upgrades.
It can be used to perform an upgrade, and to revert out of one until a certain stage is reached.

- **Mainnet address**: [`0xB4453CEb33d2e67FA244A24acf2E50CEF31F53cB`](https://etherscan.io/address/0xB4453CEb33d2e67FA244A24acf2E50CEF31F53cB)
- **Goerli address**: [`0x1f0613A44c9a8ECE7B3A2e0CdBdF0F5B47A50971`](https://goerli.etherscan.io/address/0x1f0613A44c9a8ECE7B3A2e0CdBdF0F5B47A50971#readProxyContract)


If access to the owner is lost, or compromised, it can prevent upgrades. 


### Challenger

This is the address authorized to call [`deleteL2Outputs()`](https://github.com/ethereum-optimism/optimism/blob/62c7f3b05a70027b30054d4c8974f44000606fb7/packages/contracts-bedrock/contracts/L1/L2OutputOracle.sol#L133-L167) to remove a faulty state commitment. 

Currently this is a multisig with trusted community members.
Eventually, once fault proofs are completed, it will be a contract that verifies challenges are correct.

- **Mainnet address**: [`0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A`](https://etherscan.io/address/0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A)
- **Goerli address:** [`0xBc1233d0C3e6B5d53Ab455cF65A6623F6dCd7e4f`](https://goerli.etherscan.io/address/0xBc1233d0C3e6B5d53Ab455cF65A6623F6dCd7e4f#readProxyContract)


If this account is compromised, an attacker could delay finalization by challenging valid states.
If this account is lost, it needs to be upgraded into a new value.
To do anything beyond slow down service, an attack would need to make sure challenger is not operational *and* control the Proposer.

### L1 ProxyAdmin Owner

This is the owner of most of the L1 contracts, which can upgrade them if necessary. 

- **Mainnet address**: [`0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A`](https://etherscan.io/address/0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A)
- **Goerli address:** [`0xBc1233d0C3e6B5d53Ab455cF65A6623F6dCd7e4f`](https://goerli.etherscan.io/address/0xBc1233d0C3e6B5d53Ab455cF65A6623F6dCd7e4f#readProxyContract)

If this account is compromised, there could be a catastrophic loss of funds, because it controls the bridge.
If access to this account is lost, we will not be able to upgrade in an emergency.

### L2 ProxyAdmin Owner

This is the owner of most of the L2 contracts, which can upgrade them if necessary.

- **Optimism address**: [`0x7871d1187a97cbbe40710ac119aa3d412944e4fe`](https://optimistic.etherscan.io/address/0x7871d1187a97cbbe40710ac119aa3d412944e4fe)
- **Optimistic Goerli address:** [`0xe534cca2753acfbcdbceb2291f596fc60495257e`](https://goerli-optimism.etherscan.io/address/0xe534cca2753acfbcdbceb2291f596fc60495257e)

If this account is compromised, there could be a catastrophic loss of funds, because it controls the bridge.
If access to this account is lost, we will not be able to upgrade in an emergency.


### Guardian

The `OptimismPortal` is pausable as a backup safety mechanism that allows a specific `GUARDIAN` address to temporarily halt deposits and withdrawals to mitigate security issues if necessary.

- **Mainnet address**: [`0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A`](https://etherscan.io/address/0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A)
- **Goerli address:** [`0xBc1233d0C3e6B5d53Ab455cF65A6623F6dCd7e4f`](https://goerli.etherscan.io/address/0xBc1233d0C3e6B5d53Ab455cF65A6623F6dCd7e4f#readProxyContract)

"
ethereum-optimism/community-hub,useful-tools,useful-tools,"
"
ethereum-optimism/community-hub,README.md,useful-tools/README.md,"---
title: Developer tools
lang: en-US
---

Welcome to the OP Mainnet developer tools!

If you are already familiar with [building on OP Mainnet](../developers/README.md) and just need the tools to get cracking, you are in the right place!

## Connecting

You have the list of [networks](./networks.md) and [node providers](./providers.md) to help you connect to an Optimism node.

## Deploying

To get some ETH bridged over for deployment gas fees, use one of the available [faucets](./faucets.md) or just bridge ETH using the [OP Mainnet Gateway](https://gateway.optimism.io/).

## Monitoring

Your app is live in production? Watch it grow using one of the [monitoring tools](./monitoring.md). We also have a set of [troubleshooting tools](./debugging.md) and [block explorers](./explorers.md) to help you provide a stellar service to your users.

"
ethereum-optimism/community-hub,account-abstraction.md,useful-tools/account-abstraction.md,"---
title: Supercharge your dapp with account abstraction
lang: en-US
---

Acount Abstraction enables users to utilize smart contracts as their accounts. While the default account for most users today is an Externally Owned Account (EOA), smart account adoption has been growing due to their ability to create superior user experiences.

Did you know deploying a contract wallet on the OP Stack costs [34x less](https://dune.com/optimismfnd/How-Much-Could-You-Save-on-Optimism-Fee-Savings-Calculator?Transaction+Hash=0x6c097cd57b2f38236ecf06142185345be9263a8305d9b7afe559ee0d6830b640&Transaction+Block+Number=17190737&Transaction+Block+Number_nb9363=17678963&Transaction+Hash_t09de3=0xa37f0b5cdbcb0c26268bab2f3b37687851a1161a6d363c13d13872e2deb89b49) than Ethereum Mainnet?

Use this docs page to learn how you can use use smart contract wallet primitives to build, onboard, and scale your dapp.

## Why account abstraction?
Account abstraction (and contract accounts) enables more opportunities for dapps and wallet developers to innovate on user experiences including the ability to:

- Batch transactions together (e.g. approve and execute a swap in one go)
- Offer wallets with easy recovery and no seed phrase
- Sponsor the gas fees for transactions
- Enable users to pay gas in the token(s) of their choice

## What tools are available on OP Mainnet for account abstraction?
Ready to enable account abstraction experiences in your dapp? Here's some helpful information on account abstraction infrastructure like ERC-4337 bundler and gas manager APIs that are available on OP Mainnet:

- [Station](https://docs.groupos.xyz/)
- [Alchemy](https://www.alchemy.com/account-abstraction)
- [Biconomy](https://docs.biconomy.io/docs/category/biconomy-aa-stack)
- [CyberConnect](https://docs.cyberconnect.me/)
- [Pimlico](https://docs.pimlico.io/)
- [Stackup](https://docs.stackup.sh/docs)

## Helpful tips
- [EIP-1271 Signature Validation](https://eip1271.io/)
- [Making smart accounts work with WalletConnect v2 ](https://safe-global.notion.site/WalletConnect-v2-update-Issues-and-solutions-for-smart-wallets-3fc32fad6af4485fa5823eaebd486819)

"
ethereum-optimism/community-hub,debugging.md,useful-tools/debugging.md,"---
title: Transaction Debugging Tools
lang: en-US
---

::: tip EVM Equivalence
As OP Mainnet is [EVM Equivalent](https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306), most debugging tools work out of the box with OP Mainnet.
:::

## Tenderly

[Tenderly](https://tenderly.co/) lets you [inspect any transaction execution on OP Mainnet or OP Goerli](https://docs.tenderly.co/debugger/how-to-use-tenderly-debugger). 
You can inspect the state of your verified contract in any step of the transaction's execution, as well as step into or over function calls. 
The level of detail the Tenderly dashboard presents will reduce your development time as well as help you understand the execution flow of transactions. 
It helps you to inspect states at every instance of transaction and gives a platform to trace transactions.


## Etherscan

[Etherscan](https://explorer.optimism.io) allows you to see events as well as revert messages for transactions that have been mined on OP Mainnet as well as [OP Goerli](https://goerli-explorer.optimism.io). 
You can see more information about all the L2 features Etherscan offers on our [Explorers page](./explorers.md#etherscan).


## Blockscout

Blockscout allows you to see events on both [OP Mainnet](https://optimism.blockscout.com) and [OP Goerli](https://optimism-goerli.blockscout.com).

## Know other good tools?

Reach out to us in our [Discord](https://discord-gateway.optimism.io) or [make a PR](https://github.com/ethereum-optimism/community-hub/pulls). 
We'd love your help in expanding the tools available to build Optimistically. 

"
ethereum-optimism/community-hub,explorers.md,useful-tools/explorers.md,"---
title: Block Explorers
lang: en-US
---

## Blockscout

We have a Blockscout explorer for [OP Mainnet](https://optimism.blockscout.com), [OP Goerli](https://optimism-goerli.blockscout.com), and [OP Sepolia](https://optimism-sepolia.blockscout.com/). It includes:

- [Verified testnet contract source code, along with the ability to interact with it](https://optimism.blockscout.com/verified-contracts)
- [Detailed testnet transaction information](https://optimism.blockscout.com/tx/0xa1b04233084d4067ec0bb3e09301012900f0e209f14a3d406f3d6dc696eea138)

Blockscout also has some OP-Mainnet-specific features:
- [An interactive list of deposits (L1-L2)](https://optimism.blockscout.com/l2-deposits)
- [An interactive list of withdrawals (L2-L1)](https://optimism.blockscout.com/l2-withdrawals)
- [Transaction batches](https://optimism.blockscout.com/l2-txn-batches)
- [Output roots](https://optimism.blockscout.com/l2-output-roots)
- [Dapp marketplace](https://optimism.blockscout.com/apps)
- And much more!

## Etherscan

We have Etherscan explorers for the [OP Mainnet](https://explorer.optimism.io) and the [OP Goerli](https://goerli-explorer.optimism.io).
Etherscan has lots of tools to help you debug transactions.

Optimistic Etherscan has all the tools you expect from Etherscan, such as:
- [Verified contract source code, along with the ability to interact with it](https://explorer.optimism.io/address/0x420000000000000000000000000000000000000F#code)
- [Detailed transaction information](https://explorer.optimism.io/tx/0x292423266d6da24126dc4e0e81890c22a67295cc8b1a987e71ad84748511452f)
- And everything else you might find on Etherscan!

It's also got some OP-Mainnet-specific features:
- [A list of L1-to-L2 transactions](https://explorer.optimism.io/txsEnqueued)
- [A list of L2-to-L1 transactions](https://explorer.optimism.io/txsExit)
- [A tool for finalizing L2-to-L1 transactions](https://explorer.optimism.io/messagerelayer)
- And more! Just check it out and click around to find all of the available features.



## Tenderly

You can also search for, filter and explore transaction in the [Tenderly Dashboard](https://dashboard.tenderly.co/), where you also have easy and integrated access to stuff like:

- Extremely detailed execution trace, with [complete control and insight into your debugging](https://blog.tenderly.co/tenderly-devnets-develop-and-test-with-mainnet-data/) and transaction simulation environment
- [100% accurate gas estimates](https://blog.tenderly.co/how-tenderly-enables-most-accurate-ethereum-gas-estimation/)
- [RPC customization](https://blog.tenderly.co/customizing-rpc-endpoints-with-node-extensions/)

## Access to pre-regenesis history

Because of our final regenesis on 11 November 2021, older transactions are not part of the current blockchain. 
As such, they do not appear, for example, on [Etherscan](https://explorer.optimism.io/).
However, you **can** access transaction history between 23 June 2021 and the final regenesis using the Etherscan CSV exporting tool.

### Etherscan access

[Browse here](https://explorer.optimism.io/exportDataMain) and select your address and the type of report you want.

![export data](../../assets/docs/useful-tools/explorers/export.png)


### Dune access

[Click here](https://dune.com/optimismfnd/OVM1.0-User-Address-Transactions).

<!--
If none of the Etherscan CSV files contains the information you need, you can use a query on [Dune Analytics](https://dune.xyz), similar to [this query](https://dune.xyz/queries/354886?addr=%5Cx25E1c58040f27ECF20BBd4ca83a09290326896B3).
You have to log on with a Dune account, but their free tier is sufficient.

```sql
SELECT * FROM optimism.transactions
WHERE ""from""='{{addr}}' or ""to""='{{addr}}'
LIMIT 100
```

Notes:
- Make sure to select the data source **Optimism (OVM 1.0)**
- This is how you specify parameters in Dune, `{{` followed by the parameter name and then `}}`. 
- Addresses are specified as `\x<hex address>` rather than `0x<hex address>`.  
- The limit is not required, but here to save resources
-->


### Pre 23 June 2021 history

Follow these steps:

1. Clone go-ethereum (the standard version) and checkout version v1.9.10:

   ```sh
   git clone https://github.com/ethereum/go-ethereum.git
   cd go-ethereum
   git checkout v1.9.10
   ```

1. Download the following three datadir folders:
   - [Generation #1 (Jan to April)](https://storage.googleapis.com/sequencer-datadirs/datadir-gen1.zip) 
   - [Generation #2 (April to May)](https://storage.googleapis.com/sequencer-datadirs/datadir-gen2.zip)
   - [Generation #3 (May to June)](https://storage.googleapis.com/sequencer-datadirs/datadir-gen3.zip)

1. Build and run the standard geth v1.9.10 with:

   ```sh
   ./build/bin/geth --datadir ./path/to/datadir --rpc
   ```

   You can then use ERC20 events filters to get the events that you want for each address. Note that you will have to repeat this process for each datadir to get the full event history.
   If you are non-technical and need help requesting this data please reach out to us in Discord and we will be happy to help.




"
ethereum-optimism/community-hub,faucets.md,useful-tools/faucets.md,"---
title: Network Faucets 
lang: en-US
---

In order to deploy a smart contract to a test network like OP Sepolia you will need some testnet Ether (ETH).

You can get testnet ETH to pay for testnet transactions from a faucet. Faucets are developer tools to get free testnet ETH in order to test and troubleshoot your decentralized application or protocol before going live on mainnet.

::: info Testnet Tokens
Tokens on testnet networks like OP Sepolia have no value as they are only used for testing purposes.
:::

## Superchain Faucet
[Superchain Faucet](https://app.optimism.io/faucet?utm_source=docs) is a developer tool hosted by OP Labs that allows developers to get free testnet ETH to test apps on testnet OP Chains like Base Sepolia, OP Sepolia, PGN Sepolia, Zora Sepolia, and other OP Chains in the Superchain. 

## Additional Faucets
A list of additional faucets is below:

|                       FAUCET                        |                                           DESCRIPTION                                            |    NETWORKS    |
|-----------------------------------------------------|--------------------------------------------------------------------------------------------------|--------------|
| [Paradigm's MultiFaucet](https://faucet.paradigm.xyz/)    | Paradigm offers an easy way to get ETH on many different testnets at the same time. | OP Goerli  |
| [Coinbase Faucet](https://coinbase.com/faucets/optimism-goerli-faucet)    | Get test ETH on OP Goerli directly from the Coinbase Wallet extension or Coinbase Faucet. | OP Goerli  |
| [QuickNode Faucet](https://faucet.quicknode.com/optimism/)    | Another easy way to acquire some testnet ETH for OP Goerli and OP Sepolia. | OP Goerli, OP Sepolia  |


## Bridge from Ethereum Testnet

Need another option? Alternatively, you can get testnet ETH from an [Ethereum Sepolia faucet](https://sepoliafaucet.com/) and bridge the testnet ETH to/from OP Chain testnets using the L1StandardBridge. 

Once you have the testnet ETH on Ethereum Sepolia you can use [Superchain Testnet Tools](https://www.superchain.tools/) if you need to bridge to multiple OP Chain testnets at once.

## Next Steps

- If you're new to onchain development, check out [Optimism Unleashed](https://cryptozombies.io/en/optimism) by CryptoZombies and [Superchain Builder NFT](https://blog.thirdweb.com/optimism-superchain-faucet-nft) by ThirdWeb.
- If you're familiar with onchain development, check out the [Optimism Ecosystem‚Äôs Contributions Dashboard](https://optimism.io/ideas/) for project ideas that the Optimism Collective is looking for.

"
ethereum-optimism/community-hub,meta-tx.md,useful-tools/meta-tx.md,"---
title: Meta Transactions
lang: en-US
---

## What are those?

Meta-transactions let users sign transactions that are then submitted (and the gas paid for) by somebody else. 
OP Mainnet is a good place for meta-transactions because the low gas costs make it possible to explore business models that allow for payment for transactions by other means.

Here are some example use cases for meta-transactions:

- **Onboarding**. 
  Users who aren't committed to web3 yet need to pay and go through [KYC](https://www.thalesgroup.com/en/markets/digital-identity-and-security/banking-payment/issuance/id-verification/know-your-customer) before they can do anything.
  This is a bad initial experience that can cause people to decide they prefer to investigate something else, especially for non-

- **Privacy**.
  It's easy to use a new address for privacy purposes.
  It is a lot harder to transfer ETH to the new address privately without creating a connection between it and your identity.
  
- **Transaction payment by other means**.
  With meta-transactions you can collect payment for transactions either using a different token (ERC-20) or an offchain means (for example a credit card).

## OpenGSN

The [Gas Station Network](https://opengsn.org/) is distributed infrastructure for meta-transaction that allows you to create your own relay, or pay other relays to relay your users' traffic.
Relays have to post a bond, which they lose if they attempt to censor transactions (by pretending to accept them without sending them onchain).
See here for [their documentation](https://docs.opengsn.org/).

### Supported networks:

- [OP Mainnet](https://docs.opengsn.org/networks/optimism/optimism.html)
- [OP Goerli](https://docs.opengsn.org/networks/optimism/goerli-optimism.html)


## Gelato

[Gelato](https://docs.gelato.network/developer-services/relay/what-is-relaying) uses a list of white-listed executors to relay transactions.

### Supported networks:

- OP Mainnet
- OP Goerli

"
ethereum-optimism/community-hub,monitoring.md,useful-tools/monitoring.md,"---
title: Monitoring
lang: en-US
---

## Status Page

Check out the [OP Mainnet status page](https://status.optimism.io/).
This page includes public APIs, the gateway, deposits, withdraws and transaction sequencing for both OP Mainnet and OP Goerli.

## Gas price

You can see the current gas price [here](https://optimism.io/gas-tracker).


## Block explorers

You can find a non-exhaustive list of OP Mainnet Block Explorers [here](../useful-tools/explorers.md). 

### Etherscan

Etherscan provides a lot of detailed information about what's happening on OP Mainnet and OP Goerli.
Check out the [OP Mainnet explorer](https://explorer.optimism.io) as well as the [OP Goerli explorer](https://goerli-explorer.optimism.io) to get a look for yourself.

### Blockscout

Another block explorer for [OP Mainnet](https://optimism.blockscout.com) and [OP Goerli](https://optimism-goerli.blockscout.com) is [Blockscout](https://blockscout.com).


### Tenderly

[Tenderly](https://tenderly.co/) monitoring stack shows transactions and block data, with an option to filter millions of transactions with advanced trace search and a detailed execution overview. 
You can check out [how to robustly monitor wallets](https://blog.tenderly.co/how-to-monitor-ethereum-wallets/) or even [set up real-time alerting for smart contracts](https://blog.tenderly.co/how-to-set-up-real-time-alerting-for-smart-contracts-with-tenderly/), and in both cases you can simulate pending (or any other historical) transactions and see their exact outcomes. 
Finally you can [automate your responses to alert triggers](https://blog.tenderly.co/tenderly-alert-webhooks/) with custom webhooks.


## Dashboards on Dune Analytics

[Dune Analytics](https://dune.xyz) allows anyone to create dashboards that present information about OP Mainnet.
You can find a full list of community created dashboards for OP Mainnet [here](https://dune.xyz/browse/dashboards?q=optimism), or [create your own](https://docs.dune.xyz/#queries) dashboard.

Here are some of our favorite dashboards so far:

- [General OP Mainnet dashboard](https://dune.xyz/Marcov/Optimism-Ethereum)
- [Uniswap usage comparison, Ethereum vs. OP Mainnet](https://dune.xyz/msilb7/Uniswap-v3-Usage-Comparison-on-Ethereum-vs-Optimism-(OVM-2.0))

"
ethereum-optimism/community-hub,networks.md,useful-tools/networks.md,"---
title: Networks, Public RPC Endpoints, & APIs
lang: en-US
---

::: warning
Some API calls, such as those in the [personal namespace](https://geth.ethereum.org/docs/rpc/ns-personal) make no sense in a shared environment.
Such RPCs are either totally unsupported, or will return nonsensical values.
:::

## OP Mainnet

| Parameter | Value |
| --------- | ----- |
| Network Name | **`Optimism`** |
| Description | **`Mainnet`** |
| Chain ID | **`10`** |
| Explorer | **[https://explorer.optimism.io](https://explorer.optimism.io)** |
| HTTP Endpoint | Optimism also provides this endpoint: **`https://mainnet.optimism.io`.** _But it is not for production systems and is rate limited._   |
| Sequencer URL<sup>1</sup> | **`https://mainnet-sequencer.optimism.io/`** |
| L1 Contract Addresses | [link](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/deployments/optimism-mainnet) |
| L2 Contract Addresses | [link](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/deployments/optimism-mainnet) |
| chainid.link | [https://chainid.link/?network=optimism](https://chainid.link/?network=optimism)

(1) The sequencer URL is write only, it only accepts `eth_sendRawTransaction` requests.

::: tip Developer Tip 
If you are seeing rate limit issues when testing with the public end point, or if you need websocket functionality, we recommend signing up for a third-party [provider](../useful-tools/providers.md).
:::

### Contract addresses

The authoritative list of contract addresses is [in the monorepo](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/deployments/mainnet).
They are reproduced here for convenience.

| Contract name | Address |
| - | -
| L1CrossDomainMessenger | [`0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1`](https://etherscan.io/address/0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1)
| L1ERC721Bridge | [`0x5a7749f83b81B301cAb5f48EB8516B986DAef23D`](https://etherscan.io/address/0x5a7749f83b81B301cAb5f48EB8516B986DAef23D)
| L1StandardBridge | [`0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1`](https://etherscan.io/address/0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1)
| L2OutputOracle | [`0xdfe97868233d1aa22e815a266982f2cf17685a27`](https://etherscan.io/address/0xdfe97868233d1aa22e815a266982f2cf17685a27) 
| OptimismMintableERC20Factory | [`0x75505a97BD334E7BD3C476893285569C4136Fa0F`](https://etherscan.io/address/0x75505a97BD334E7BD3C476893285569C4136Fa0F) 
| OptimismPortal | [`0xbEb5Fc579115071764c7423A4f12eDde41f106Ed`](https://etherscan.io/address/0xbEb5Fc579115071764c7423A4f12eDde41f106Ed) | 
| PortalSender | [`0x0A893d9576b9cFD9EF78595963dc973238E78210`](https://etherscan.io/address/0x0A893d9576b9cFD9EF78595963dc973238E78210)
| ProxyAdmin | [`0x543bA4AADBAb8f9025686Bd03993043599c6fB04`](https://etherscan.io/address/0x543bA4AADBAb8f9025686Bd03993043599c6fB04)
| SystemConfig | [`0x229047fed2591dbec1eF1118d64F7aF3dB9EB290`](https://etherscan.io/address/0x229047fed2591dbec1eF1118d64F7aF3dB9EB290)
| SystemDictator | [`0xB4453CEb33d2e67FA244A24acf2E50CEF31F53cB`](https://etherscan.io/address/0xB4453CEb33d2e67FA244A24acf2E50CEF31F53cB)
| Batch Inbox Address | [`0xff00000000000000000000000000000000000010`](https://etherscan.io/address/0xff00000000000000000000000000000000000010)


### Parameters for node operators

These parameters are mostly useful to people responsible for running and administering network nodes.

| Parameter      | Value |
| -------------- | ----- |
| L1 Chain ID    | 1 |
| Rollup Config  | This network does not require a rollup config. Specify `--network=mainnet` on the command line
| Withdrawal period | 1 week |



#### Links

::: tip
  
Links to download data directories will be posted here as soon as they are available.
  
:::
  

- [Bedrock Data Directory (303 GB)<sup>1</sup>](https://datadirs.optimism.io/mainnet-bedrock.tar.zst). 
  The `sha512sum` for this file is `c17067b7bc39a6daa14f71d448c6fa0477834c3e68a25e96f26fe849c12a09bffe510e96f7eacdef19e93e3167d15250f807d252dd6f6f9053d0e4457c73d5fb`.
- [Legacy Geth Data Directory (2.9TB)<sup>1</sup>](https://datadirs.optimism.io/mainnet-legacy-archival.tar.zst).
  The `sha512sum` for this file is `e348488c458baa755510f23bbc8601619bc66bea78a89354c949ba7be3c6b39ed7dd2c50516621e38df6120299407da0d24445b96bf94a50364ed07bb8234b26`.
  Note that you *only* need this file if you run `l2geth` to answer archive queries prior to the bedrock upgrade. 
  If you are running an archive only for post-bedrock transactions (using `op-geth` with the command line flag `gcmode=archive`), you do *not* need this file.
- [Configuration parameters](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/deploy-config/mainnet.json).
- [Latest release of `op-geth`](https://github.com/ethereum-optimism/op-geth/releases/latest)
- [Latest release of `op-node`](https://github.com/ethereum-optimism/optimism/releases/) - you need to scroll down until you get a release that has `op-node` in it.
- [Legacy geth](https://hub.docker.com/layers/ethereumoptimism/l2geth/0.5.31/images/sha256-5577036dc36d167d11f5ac49b91cc0a3d835574928a9563783c2e70309e5eb28?context=explore).
  

(1) This file is compressed with `zstd`. 
We recommend that users install the command line tool if it is not already installed on their system. 
`tar -xf` will work without installing anything if you have an up to date version of `tar`. 
If you want to decompress separately, we recommend `pzstd -d`  or `zstd -d` (pzstd will likely be faster).


## OP Goerli

::: tip Purpose
This is our current test network. Note that OP Goerli is planned to be deprecated in Q4 2023. Please migrate to OP Sepolia before then.
:::



| Parameter | Value |
| --------- | ----- |
| Network Name | **`Optimism Goerli`** |
| Description | **`Testnet (public)`** |
| Chain ID | **`420`** |
| Explorer | **[https://goerli-explorer.optimism.io](https://goerli-explorer.optimism.io)** |
| HTTP Endpoint | **`https://goerli.optimism.io`** |
| Sequencer URL<sup>1</sup> | **`https://goerli-sequencer.optimism.io/`** |
| chainid.link | [https://chainid.link/?network=optimism-goerli](https://chainid.link/?network=optimism-goerli)

(1) The sequencer URL is write only, it only accepts `eth_sendRawTransaction` requests.

### Contract addresses

The authoritative list of contract addresses is [in the monorepo](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/deployments/goerli).
They are reproduced here for convenience

| Contract name | Address |
| - | -
| L1CrossDomainMessenger | [`0x5086d1eEF304eb5284A0f6720f79403b4e9bE294`](https://goerli.etherscan.io/address/0x5086d1eEF304eb5284A0f6720f79403b4e9bE294)
| L1ERC721Bridge | [`0x0F9C590b958002E8B10a7431979c1aF882772E88`](https://goerli.etherscan.io/address/0x0F9C590b958002E8B10a7431979c1aF882772E88)
| L1StandardBridge | [`0x636Af16bf2f682dD3109e60102b8E1A089FedAa8`](https://goerli.etherscan.io/address/0x636Af16bf2f682dD3109e60102b8E1A089FedAa8)
| L2OutputOracle | [`0xE6Dfba0953616Bacab0c9A8ecb3a9BBa77FC15c0`](https://goerli.etherscan.io/address/0xE6Dfba0953616Bacab0c9A8ecb3a9BBa77FC15c0)
| OptimismMintableERC20Factory | [`0x883dcF8B05364083D849D8bD226bC8Cb4c42F9C5`](https://goerli.etherscan.io/address/0x883dcF8B05364083D849D8bD226bC8Cb4c42F9C5)
| OptimismPortal | [`0x5b47E1A08Ea6d985D6649300584e6722Ec4B1383`](https://goerli.etherscan.io/address/0x5b47E1A08Ea6d985D6649300584e6722Ec4B1383)
| PortalSender | [`0xe7FACd39531ee3C313330E93B4d7a8B8A3c84Aa4`](https://goerli.etherscan.io/address/0xe7FACd39531ee3C313330E93B4d7a8B8A3c84Aa4)
| ProxyAdmin | [`0x01d3670863c3F4b24D7b107900f0b75d4BbC6e0d`](https://goerli.etherscan.io/address/0x01d3670863c3F4b24D7b107900f0b75d4BbC6e0d)
| SystemConfig | [`0xAe851f927Ee40dE99aaBb7461C00f9622ab91d60`](https://goerli.etherscan.io/address/0xAe851f927Ee40dE99aaBb7461C00f9622ab91d60)
| SystemDictator | [`0x1f0613A44c9a8ECE7B3A2e0CdBdF0F5B47A50971`](https://goerli.etherscan.io/address/0x1f0613A44c9a8ECE7B3A2e0CdBdF0F5B47A50971)
| Batch Inbox Address | [`0xff00000000000000000000000000000000000420`](https://goerli.etherscan.io/address/0xff00000000000000000000000000000000000420)

### Test ETH

If you already have Goerli ETH, you can [bridge it](https://app.optimism.io/bridge). For more faucet options see [Network Faucets](./faucets.md).


### Parameters for node operators

These parameters are mostly useful to people responsible for running and administering network nodes.


| Parameter      | Value |
| -------------- | ----- |
| L1 Chain ID    | 5 |
| Rollup Config  | This network does not require a rollup config. Specify `--network=goerli` on the command line
| Withdrawal period | 12 seconds |



#### Links

- [Bedrock Data Directory (5.0GB)<sup>1</sup>](https://datadirs.optimism.io/goerli-bedrock.tar.zst).
  The `sha512sum` for this file is `7d420ddf34ee5b157d60cf7a9612cb950b24ff1405e1ab944f8d7910c45e7a46907bdb86ea124a8069b15ad9e171776ab5f8ed0146c43b0ff12539f38f262f7d`.
- [Legacy Geth Data Directory (50GB)<sup>1</sup>](https://datadirs.optimism.io/goerli-legacy-archival.tar.zst).
  The `sha512sum` for this file is `5d78c1f2cd5bea062fb979b9d616a5fe4c55b27a444812b91a90340631d7a5f750c4e6e5a352513f3cf102d61586a4e2861f1aa3827e5be8fcae01e2ec291d2a`.
  Note that you *only* need this file if you run `l2geth` to answer archive queries prior to the bedrock upgrade. 
  If you are running an archive only for post-bedrock transactions (using `op-geth` with the command line flag `gcmode=archive`), you do *not* need this file.
- [Configuration parameters](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/deploy-config/goerli.json)
- [Latest releases of `op-geth`](https://github.com/ethereum-optimism/op-geth/releases/latest)
- [Latest release of `op-node`](https://github.com/ethereum-optimism/optimism/releases/) - you need to scroll down until you get a release that has `op-node` in it.
- [Legacy geth](https://hub.docker.com/layers/ethereumoptimism/l2geth/0.5.31/images/sha256-5577036dc36d167d11f5ac49b91cc0a3d835574928a9563783c2e70309e5eb28?context=explore)

(1) This file is compressed with `zstd`. 
We recommend that users install the command line tool if it is not already installed on their system. 
`tar -xf` will work without installing anything if you have an up to date version of `tar`. 
If you want to decompress separately, we recommend `pzstd -d`  or `zstd -d` (pzstd will likely be faster).



## OP Sepolia

::: tip Purpose
This is our latest test network. Note that OP Sepolia is new and still missing some core third-party infra.
:::



| Parameter | Value |
| --------- | ----- |
| Network Name | **`OP Sepolia`** |
| Description | **`Testnet (public)`** |
| Chain ID | **`11155420`** |
| Explorer | **[https://optimism-sepolia.blockscout.com/](https://optimism-sepolia.blockscout.com/)** |
| HTTP Endpoint | **`https://sepolia.optimism.io`** |
| Sequencer URL<sup>1</sup> | **`https://sepolia-sequencer.optimism.io/`** |

(1) The sequencer URL is write only, it only accepts `eth_sendRawTransaction` requests.

### Contract addresses

The authoritative list of contract addresses is [in the monorepo](https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts-bedrock/deployments/sepolia).
They are reproduced here for convenience

| Contract name | Address |
| - | -
| L1CrossDomainMessenger | [`0x58Cc85b8D04EA49cC6DBd3CbFFd00B4B8D6cb3ef`](https://sepolia.etherscan.io/address/0x58Cc85b8D04EA49cC6DBd3CbFFd00B4B8D6cb3ef)
| L1ERC721Bridge | [`0xd83e03D576d23C9AEab8cC44Fa98d058D2176D1f`](https://sepolia.etherscan.io/address/0xd83e03D576d23C9AEab8cC44Fa98d058D2176D1f)
| L1StandardBridge | [`0xFBb0621E0B23b5478B630BD55a5f21f67730B0F1`](https://sepolia.etherscan.io/address/0xFBb0621E0B23b5478B630BD55a5f21f67730B0F1)
| L2OutputOracle | [`0x90E9c4f8a994a250F6aEfd61CAFb4F2e895D458F`](https://sepolia.etherscan.io/address/0x90E9c4f8a994a250F6aEfd61CAFb4F2e895D458F) 
| OptimismMintableERC20Factory | [`0x868D59fF9710159C2B330Cc0fBDF57144dD7A13b`](https://sepolia.etherscan.io/address/0x868D59fF9710159C2B330Cc0fBDF57144dD7A13b) 
| OptimismPortal | [`0x16Fc5058F25648194471939df75CF27A2fdC48BC`](https://sepolia.etherscan.io/address/0x16Fc5058F25648194471939df75CF27A2fdC48BC) | 
| ProxyAdmin | [`0x189aBAAaa82DfC015A588A7dbaD6F13b1D3485Bc`](https://sepolia.etherscan.io/address/0x189aBAAaa82DfC015A588A7dbaD6F13b1D3485Bc)
| SystemConfig | [`0x034edD2A225f7f429A63E0f1D2084B9E0A93b538`](https://sepolia.etherscan.io/address/0x034edD2A225f7f429A63E0f1D2084B9E0A93b538)
| Batch Inbox Address | [`0xff00000000000000000000000000000011155420`](https://sepolia.etherscan.io/address/0xff00000000000000000000000000000011155420)

### Test ETH

If you already have Sepolia ETH, you can deposit it by sending it to the Optimism Portal on L1 Sepolia (`0x16Fc5058F25648194471939df75CF27A2fdC48BC`). To get L1 Sepolia ETH, check out our faucet options in [Network Faucets](./faucets.md).
We are still building out Sepolia support in our [Bridge UI](https://app.optimism.io/bridge). 

### Parameters for node operators

These parameters are mostly useful to people responsible for running and administering network nodes.

| Parameter      | Value |
| -------------- | ----- |
| L1 Chain ID    | 11155111 |
| Rollup Config  | This network does not require a rollup config. Specify `--network=sepolia` on the command line
| Withdrawal period | 12 seconds |



#### Links

- Note that there is no Bedrock Data Directory or Legacy Geth Data Directory required for running OP Sepolia nodes
- [Configuration parameters](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/deploy-config/sepolia.json)
- [Genesis.json File](https://networks.optimism.io/op-sepolia/genesis.json)
- [Latest releases of `op-geth`](https://github.com/ethereum-optimism/op-geth/releases/latest)
- [Latest release of `op-node`](https://github.com/ethereum-optimism/optimism/releases/latest)
- Note: Unlike on OP Mainnet or OP Goerli, you do not need to run `legacy-geth` to run an archival OP Sepolia node.

"
ethereum-optimism/community-hub,oracles.md,useful-tools/oracles.md,"---
title: Oracles 
lang: en-US
---


[Oracles](https://ethereum.org/en/developers/docs/oracles/) provide offchain data onchain. 
This allows code running on a blockchain to access a wide variety of information.
For example, a [stablecoin](https://ethereum.org/en/stablecoins/) that accepts ETH as collateral needs to know the ETH/USD exchange rate:

- How many stablecoins can we give a user for a given amount of ETH?
- Do we need to liquidate any deposits because they are under collateralized?

Different oracles have different security assumptions and different levels of decentralization.
Usually they are either run by the organization that produces the information, or have a mechanism to reward entities that provide accurate information and penalize those that provide incorrect information.

## Types of oracles

There are two types of oracles:

1. **Push oracles** are updated continuously and always have up to date information available onchain.

1. **Pull oracles** are only updated when information is requested by a contract.
   Pull oracles are themselves divided into two types:
   1. Double-transaction oracles, which require two transactions. 
      The first transaction is the request for information, which usually causes the oracle to emit an event that triggers some offchain mechanism to provide the answer (through its own transaction).
      The second transaction actually reads onchain the result from the oracle and uses it.
   1. Single-transaction oracles, which only require one transaction, such as [Chainlink's random number generator](https://docs.chain.link/docs/get-a-random-number/#request-random-values).
      The way this works is that the transaction that requests the information includes a callback (address and the call data to provide it). 
      When the oracle is updated (which also happens through a transaction, but one that is not sent by the user), the oracle uses the callback to inform a contract of the result.

## Gas Oracle


OP Mainnet provides a [Gas Price Oracle](https://github.com/ethereum-optimism/optimism/blob/233ede59d16cb01bdd8e7ff662a153a4c3178bdd/packages/contracts/contracts/L2/predeploys/OVM_GasPriceOracle.sol) that provides information about [gas prices and related parameters](../developers/build/transaction-fees.md).
It can also calculate the total cost of a transaction for you before you send it.

This contract is a predeploy at address `0x420000000000000000000000000000000000000F`:

- [On OP Mainnet](https://explorer.optimism.io/address/0x420000000000000000000000000000000000000F#readContract)
- [On OP Goerli](https://goerli-explorer.optimism.io/address/0x420000000000000000000000000000000000000F)

This is a push Oracle. 
OP Mainnet (and the testnets) updates the gas price parameters onchain whenever those parameters change. 
The L1 gas price, which can be volatile, is only pushed once every 5 minutes, and each time can change only by up to 20%.

## Chainlink

On OP Mainnet [Chainlink](https://chain.link/) provides a number of [price feeds](https://docs.chain.link/docs/optimism-price-feeds/).
Those feeds are available on the production network.

This is a push Oracle. 
You can always get up to date information (see, for example, [here (scroll down to **latestAnswer**)](https://explorer.optimism.io/address/0x13e3Ee699D1909E989722E753853AE30b17e08c5#readContract)).

[See this guide to learn how to use the Chainlink feeds](https://docs.chain.link/docs/get-the-latest-price/).

## Tellor

[Tellor](https://tellor.io/) is a permissionless, censorship-resistant, and customizable oracle.

The Tellor protocol can secure putting any verifiable data onchain, from spot price feeds, TWAPs, random numbers, to EVM calldata - you can even [specify your own ""query type""](https://github.com/tellor-io/dataSpecs/issues/new?assignees=&labels=&template=new_query_type.yaml&title=%5BNew+Data+Request+Form%5D%3A+) to build a feed to fit your specific needs.

As described in the oracles overview section of this page, we are an oracle protocol that has ""a mechanism to reward entities that provide accurate information and penalize those that provide incorrect information."" Therefore it is necessary to allow some reasonable [amount of time](https://docs.tellor.io/tellor/getting-data/solidity-integration#reading-data) between an oracle update and using that data, to allow for a potential dispute (probabilistic finality).

Tellor is a pull oracle where users fund (tip) a specific feed to get updated data reports and then read the data from our oracle contract, however under certain circumstances it can act similar to a push oracle; if your reading from a feed that is already being updated by others, or if you are [running your own data reporter.](https://docs.tellor.io/tellor/reporting-data/introduction)

To learn more about using tellor please [read our docs](https://docs.tellor.io) or [get in touch](https://discord.gg/tellor).

[Tellor contract addresses on OP Mainnet and the testnets can be found here.](https://docs.tellor.io/tellor/the-basics/contracts-reference#optimism)

### Verifiable Randomness Function (VRF)

#### Band
[Band](https://bandprotocol.com/vrf) provides a source of [onchain randomness](https://bandprotocol.com/vrf). 
[You can learn how to use it here](https://docs.bandchain.org/vrf/getting-started.html).
It is a single-transaction pull oracle.



## Universal Market Access (UMA)

[UMA](https://umaproject.org/) is a generic oracle.
It lets any contract request information (ask a question), and any staked entity can provide an answer.
Other external entities can dispute the proposed answer by providing their own answer and putting up their own stake.
In the case of dispute the question goes to a vote of token holders.
The token holders that vote with the majority are assumed to be truthful and get rewarded.
The external entities that proposed the correct answer are rewarded.
Those that proposed the wrong answer lose their stake.

[See here for the UMA addresses on OP Mainnet](https://github.com/UMAprotocol/protocol/blob/master/packages/core/networks/10.json). 

[See here for instructions how to use UMA](https://docs.umaproject.org/build-walkthrough/build-process).

UMA is a pull Oracle, it does not get information until it is requested by a contract. 
This means that a decentralized application needs to issue two transactions.
First, a transaction that causes a contract on the blockchain to ask for the information.
Later (in the case of UMA 48 hours later if there is no dispute, longer if there is), a second transaction need to be triggered to cause the contract to read from the Oracle and see the response to the request.

## Uniswap

Technically speaking [Uniswap](https://uniswap.io/) is not an oracle, because the information comes from onchain sources.
However, Uniswap pools do provide [quotes that give the relative costs of assets](https://docs.uniswap.org/concepts/protocol/oracle).

::: warning

Using onchain asset prices, especially those in low liquidity pools, makes you vulnerable to price manipulation. 

:::

To use Uniswap as an Oracle:

1. See [the list of pools on OP Mainnet](https://info.uniswap.org/#/optimism/).
1. To find the pool address, [look at the Uniswap factory](https://explorer.optimism.io/address/0x1f98431c8ad98523631ae4a59f267346ea31f984#readContract).
   Use **getPool** with these parameters:

      | Parameter           | Meaning                             |
      | ------------------- | ----------------------------------- | 
      | One token address   | [Address of the ERC-20 contract for that token on OP Mainnet (chainId 10)](https://static.optimism.io/optimism.tokenlist.json) |
      | Other token address | [Address of the ERC-20 contract for that token on OP Mainnet (chainId 10)](https://static.optimism.io/optimism.tokenlist.json) |      
      | Pool fee            | The pool fee percentage times ten thousand. For example, for 0.3% enter `3000` |

1. In your contract, use [IUniswapV3PoolState](https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol) and [IUniswapV3PoolDerivedState](https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol) to get the pool state.

"
ethereum-optimism/community-hub,providers.md,useful-tools/providers.md,"---
title: Node & API Providers
lang: en-US
---

::: warning
Some API calls, such as those in the [personal namespace](https://geth.ethereum.org/docs/rpc/ns-personal) make no sense in a shared environment.
Such RPCs are either totally unsupported, or will return nonsensical values.
:::

## Ankr

### Description and Pricing

[Ankr](https://www.ankr.com/) provides a geo-distributed and decentralized (free) public and premium (Pay-as-you-go) [Optimism RPC](https://www.ankr.com/rpc/optimism/) comprised of many independent blockchain nodes running worldwide for low-latency and incredibly reliable connections. 

Moreover, Ankr offers access to developer tooling on OP Mainnet (and testnets) like SDKs and [Advanced APIs](https://www.ankr.com/advanced-api/) such as NFT, Token and Query API. 

### Supported Networks

- OP Mainnet
- OP Goerli

## Alchemy

### Alchemy's Description & Pricing

[Alchemy](https://docs.alchemy.com/reference/optimism-api-quickstart/?a=818c11a8da) is a popular API provider and developer platform. Its robust, free tier offers access to enhanced features like SDKs and enhanced APIs and hosted OP Mainnet and testnet nodes.


### Supported Networks

- OP Mainnet
- OP Goerli


## Blast

### Description and Pricing

[Blast](https://blastapi.io/) offers access to dedicated OP Mainnet (and testnet) nodes with free data access up to 12M API calls per month and 25 req/s. Paid subscription tiers are available for all development needs.
On the platform, there are also [Public APIs](https://blastapi.io/public-api/optimism) available that can be added easily in Metamask.

### Supported Networks

- OP Mainnet
- OP Goerli


## BlockPI

### Description and Pricing

[BlockPI](https://blockpi.io/) Network ships scalable, high performance and globally distributed infrastructure with the most flexible and developer-first pricing in the industry. Build from scratch all the way to enterprise without monthly subscription. Register at [dashboard](https://dashboard.blockpi.io/) and get Free 100M RU every month!

### Supported Networks

- OP Mainnet
- OP Goerli

## BlockSpaces

[BlockSpaces](https://www.blockspaces.com/) is a multiweb integration platform that is currently offering Web3 infrastructure for free, up to 10 million transactions supported DAILY. To get started, click [here](https://www.blockspaces.com/) and leave an email address. If being able to integrate your OP Mainnet dApp to other web2 business platforms (like Quickbooks) interestes you, make sure to sign up for our Multiweb integration waitlist.

### Supported Networks

- OP Mainnet

## BlockVision

[BlockVision](https://blockvision.org/) is a one-stop development platform and onchain data retrieval portal for developers that boasts impressively low-latencies and high availability.

### Supported Networks

- OP Mainnet

## Chainnodes

### Description and Pricing

[Chainnodes](https://www.chainnodes.org/) offers low-latency archival nodes for OP Mainnet (and testnets) with a free tier and transparent pricing for all needs. Websocket support is included for all networks. Debug and trace APIs and archival requests are available and free.

### Supported Networks

- OP Mainnet
- OP Goerli

## GetBlock

[GetBlock developer](https://getblock.io/en/nodes/optimism/) tools and valuable insights guarantee a simple and reliable API access to multiple blockchains.


### Supported Networks

- OP Mainnet
- OP Goerli

## Infura

### Description and Pricing

[Infura](https://infura.io) is a Web3 infrastructure provider that offers free access to hosted [OP Mainnet and testnet nodes](https://docs.infura.io/infura/networks/optimism), with the option to upgrade to [paid plans](https://www.infura.io/pricing) for more features. With Infura's highly performant Optimism node infrastructure, developers can eliminate the need for syncing or complex setups and get reliable and consistent access to the Optimism blockchain. 

[Sign up for a free Infura account here](https://app.infura.io/register)

### Supported Networks

- OP Mainnet
- OP Goerli


## NodeReal

### Description and pricing

[NodeReal](https://nodereal.io/) is a one-stop blockchain infrastructure and services provider, we provide scalable, reliable, and efficient blockchain solutions for everyone, aiming to support the massive adoption, growth, and long-term success of the Web3 ecosystem. You can connect to the OP Mainnet MegaNode for free every month. Details are [here](https://nodereal.io/pricing)

[Sign up for your free account here](https://nodereal.io/meganode).

### Supported Networks

- OP Mainnet



## NOWNodes

### Description and pricing

[NOWNodes](https://nownodes.io/nodes/optimism) provide access to an OP Mainnet node. Shared and Dedicated nodes are Available. You can connect to the shared OP Mainnet node for free for one month with 5,000 requests/per day or for ‚Ç¨20 with 1,000,000 requests/per month.

The URL format is `https://optimism.nownodes.io/?API_key=<API key from NOWNodes`.

### Supported Networks

- OP Mainnet

## OnFinality

### Description and pricing

[OnFinality](https://onfinality.io/) is a blockchain infrastructure platform that saves Web3 builders time and makes their lives easier. OnFinality delivers scalable API endpoints for the biggest blockchain networks and empowers developers to automatically test, deploy, scale and monitor their own blockchain nodes in minutes. OnFinality offers free and premium (Pay-as-you-go or subsription-based) API [services for OP Mainnet](https://onfinality.io/networks/optimism). 

### Supported Networks

- OP Mainnet


## Pocket Network

### Description and pricing

[Pocket](https://www.portal.pokt.network/) offers access to a highly-available dedicated pool of OP Mainnet nodes coordinated autonomously by the Pocket Network protocol. Through the Pocket Portal, developers may mint OP Mainnet RPC endpoints with a generous free tier of 1M requests per day (per endpoint, max 2 per account).

### Supported Networks

- OP Mainnet


## QuickNode

### Description and Pricing

[QuickNode](https://www.quicknode.com/) offers access to hosted OP Mainnet (and testnet) nodes for free. With the option to upgrade to a premium plan for additional features, we allow you to focus solely on optimizing your application while we manage the complex infrastructure.

### Supported Networks

- OP Mainnet
- OP Goerli
- OP Sepolia

## Stackup

### Description and Pricing
[Stackup](https://www.stackup.sh/) provides ERC-4337 account abstraction infrastructure, including nodes, on EVM-compatible blockchains.

### Supported Networks

- OP Mainnet
- OP Goerli
"
